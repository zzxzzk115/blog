const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,u=Array.from(n.keys());this.set=t,this._type=s,this._path=u.length>0?[{node:n,keys:u}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ut=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const u=t.length+1,o=u+s,i=new Uint8Array(o*u).fill(s+1);for(let r=0;r<u;++r)i[r]=r;for(let r=1;r<o;++r)i[r*u]=r;return R(e,t,s,n,i,1,u,""),n},R=(e,t,s,n,u,o,i,r)=>{const d=o*i;t:for(const l of e.keys())if(l===F){const a=u[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=o;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=u[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=u[f+y]+ +b,A=u[f+y+1]+1,w=u[p+y]+1,L=u[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,u,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[u,o]=M(n);for(const i of u.keys())if(i!==F&&i.startsWith(o)){const r=new Map;return r.set(i.slice(o.length),u.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ot(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ut(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,O(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=O(this._tree,t);let u=n.get(F);return u===void 0&&n.set(F,u=s()),u}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,u]of t)s.set(n,u);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},O=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const o of e.keys())if(o!==F&&t[n]===o[0]){const i=Math.min(s-n,o.length);let r=1;for(;r<i&&t[n+r]===o[r];)++r;const d=e.get(o);if(r===o.length)e=d;else{const l=new Map;l.set(o.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(o),e=l}n+=r;continue t}const u=new Map;return e.set(t.slice(n),u),u}return e},ot=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[u,o]=s.entries().next().value;q(n,u,o)}}},W=e=>{if(e.length===0)return;const[t,s]=M(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,u]=t.entries().next().value;n!==F&&q(e.slice(0,-1),n,u)}},q=(e,t,s)=>{if(e.length===0)return;const[n,u]=M(e);n.set(u+t,s),n.delete(u)},M=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",$="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},N=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:u,terms:o,match:i}=t.get(s);n.score=n.score+u,n.match=Object.assign(n.match,i),P(n.terms,o)}}return e},[$]:(e,t)=>{const s=new Map;for(const n of t.keys()){const u=e.get(n);if(u==null)continue;const{score:o,terms:i,match:r}=t.get(n);P(u.terms,i),s.set(n,{score:u.score+o,terms:u.terms,match:Object.assign(u.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,u,o)=>{const{k:i,b:r,d}=o;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/u)))},ft=e=>(t,s,n)=>{const u=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,o=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:u,prefix:o}},H=(e,t,s,n)=>{for(const u of Object.keys(e._fieldIds))if(e._fieldIds[u]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${u}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const u=e._index.fetch(n,ht),o=u.get(t);o==null||o.get(s)==null?H(e,s,t,n):o.get(s)<=1?o.size<=1?u.delete(t):o.delete(s):o.set(s,o.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:$,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,u,o,i,r,d=new Map)=>{if(u==null)return d;for(const l of Object.keys(o)){const a=o[l],h=e._fieldIds[l],m=u.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=G(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},u=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:G(n.boost,g)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,u,o,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,u,o,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,u,o,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:u,searchOptions:o}=e._options,i={tokenize:n,processTerm:u,...o,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),u=[];for(const[o,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(o),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(o)),(s.filter==null||s.filter(a))&&u.push(a)}return u.sort(N),u},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:o,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=o,d.count+=1):n.set(r,{score:o,terms:i,count:1})}const u=[];for(const[o,{score:i,terms:r,count:d}]of n)u.push({suggestion:o,terms:r,score:i/d});return u.sort(N),u};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const u={};for(const[o,i]of n)u[o]=Object.fromEntries(i);t.push([s,u])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:u,fieldLength:o,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=u,h._fieldLength=k(o),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),u=[];let o=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&u.push(h),i+=h.length,a||(u.push(["mark",t]),i+=t.length,i>=100&&u.push(" …"))};let d=s.indexOf(n,o);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(o,d)),o=l,i>100)break;d=s.indexOf(n,o)}return i<100&&r(e.slice(o),!0),u},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(u=>{const{id:o,terms:i,score:r}=u,d=o.includes("@"),l=o.includes("#"),[a,h]=o.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>u.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(u.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in u)for(const c of u.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,u],[,o])=>"max"==="total"?xt(u,o):kt(u,o)).map(([u,{title:o,contents:i}])=>{if(!o){const r=it(t,u);r&&(o=r.h)}return{title:o,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":45,\"nextId\":45,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-69c6fd6a\",\"2\":\"v-69c6fd6a#catmario-gb\",\"3\":\"v-69c6fd6a#goldminer-rebirth\",\"4\":\"v-15398628\",\"5\":\"v-15398628#vector-dot-product-applications\",\"6\":\"v-15398628#vector-cross-product\",\"7\":\"v-15398628#rendering-steps\",\"8\":\"v-15398628#coordinate-systems\",\"9\":\"v-15398628#why-we-need-homogeneous-coordinates\",\"10\":\"v-a5266caa\",\"11\":\"v-a5266caa#functions\",\"12\":\"v-a5266caa#height-maps\",\"13\":\"v-a5266caa#_2d-parametric-curve\",\"14\":\"v-a5266caa#_3d-parametric-curve\",\"15\":\"v-a5266caa#texture-mapping\",\"16\":\"v-a5266caa#manifolds\",\"17\":\"v-a5266caa#arc-length-integral\",\"18\":\"v-a5266caa#continuity\",\"19\":\"v-a5266caa#calculus-of-multiple-variables\",\"20\":\"v-a5266caa#partial-derivatives\",\"21\":\"v-a5266caa#gradient-vector\",\"22\":\"v-a5266caa#numerical-calculus\",\"23\":\"v-7fadb0a6\",\"24\":\"v-7efdc9d6\",\"25\":\"v-7efdc9d6#what-is-dynamic-programming-dp\",\"26\":\"v-7efdc9d6#a-classic-dp-problem-fibonacci\",\"27\":\"v-7efdc9d6#using-memoization\",\"28\":\"v-7efdc9d6#using-tabulation\",\"29\":\"v-7efdc9d6#optional-improvements\",\"30\":\"v-7efdc9d6#framework\",\"31\":\"v-b7f442a8\",\"32\":\"v-b7f442a8#how-to-solve-the-problem\",\"33\":\"v-6b3cd122\",\"34\":\"v-6b3cd122#why-we-need-it\",\"35\":\"v-6b3cd122#what-is-it\",\"36\":\"v-6b3cd122#how-to-use-it\",\"37\":\"v-6b3cd122#playground\",\"38\":\"v-6b3cd122#analysing-from-code-aspect\",\"39\":\"v-6b3cd122#let-s-look-at-il-codes\",\"40\":\"v-6b3cd122#let-s-try-the-inheritance-relationship\",\"41\":\"v-6b3cd122#playground-1\",\"42\":\"v-6b3cd122#how-does-net-support-generic-math\",\"43\":\"v-e1e3da16\",\"44\":\"v-564155e4\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[2,108],\"1\":[2,20],\"2\":[2],\"3\":[2],\"4\":[3],\"5\":[4,3],\"6\":[3],\"7\":[2,35],\"8\":[2,22],\"9\":[6,32],\"10\":[2],\"11\":[1,14],\"12\":[2,23],\"13\":[3,13],\"14\":[3,14],\"15\":[2,26],\"16\":[1,8],\"17\":[3,9],\"18\":[1,42],\"19\":[4],\"20\":[2],\"21\":[2],\"22\":[2,22],\"23\":[2,82],\"24\":[7,28],\"25\":[6,60],\"26\":[5,172],\"27\":[2,62],\"28\":[2,51],\"29\":[2,92],\"30\":[1,75],\"31\":[6,38],\"32\":[5,58],\"33\":[10,35],\"34\":[4,94],\"35\":[3,58],\"36\":[4,107],\"37\":[1],\"38\":[4],\"39\":[6,104],\"40\":[6,96],\"41\":[1],\"42\":[7,193],\"43\":[1],\"44\":[1]},\"averageFieldLength\":[3.155555555555555,54.448601690026294],\"storedFields\":{\"0\":{\"h\":\"About me\",\"t\":[\"A game developer who has a passion for electronic products and enjoys singing and composing music.\",\"Previously employed at BlackJack Studio, a game studio under Zilong Games, specializing in server-side development. Currently undertaking a research program in graphics and game engine-related topics at the University of Leeds.\",\"Proficient in languages such as C#, C/C++, Java, Python, and Lua. Capable of writing basic programs in other languages. Well-versed in the dotnet technology stack with two years of experience in multi-threading and high-performance server development. Aspiring to transition into a role as a game engine development engineer or graphics programmer to provide robust technical support for games.\",\"Familiar with Unity as a primary game engine and actively exploring Unreal, Godot, and other open-source engines. Also has some knowledge of smaller frameworks like love2d, pygame, and SDL2.\",\"Hoping to connect with like-minded programmers and game developers for mutual exchange of technical knowledge.\"]},\"1\":{\"h\":\"Games Gallery\",\"t\":[\"The following games are all made by myself. Welcome to play! Or we can discuss anything about game development.\"]},\"2\":{\"h\":\"CatMario-GB\"},\"3\":{\"h\":\"GoldMiner-Rebirth\"},\"4\":{\"h\":\"Rendering and Transformations\"},\"5\":{\"h\":\"Vector Dot Product Applications\",\"t\":[\"Dot product applications\"]},\"6\":{\"h\":\"Vector Cross Product\"},\"7\":{\"h\":\"Rendering Steps\",\"t\":[\"Describe our scene: where each object is. \",\"Transformations\",\"Homogeneous Coordinates\",\"Quaternions\",\"Model our camera: what is it able to see? \",\"Camera models\",\"Model the sensing process: what ends up where? \",\"Intersections / Projection: different rendering algorithms\",\"Model the light / film interaction: what color is it? \",\"Shading\"]},\"8\":{\"h\":\"Coordinate Systems\",\"t\":[\"OCS is the Object Coordinate System\",\"WCS is the World Coordinate System\",\"VCS is the View Coordinate System\",\"CCS is the Clipping Coordinate System\",\"NDCS is the Normalized DCS\",\"DCS is the Device Coordinate System\",\"Coordinate systems\",\"Changing coordinate systems by applying matrices\"]},\"9\":{\"h\":\"Why we need Homogeneous Coordinates?\",\"t\":[\"We have to:\",\"Represent translation in matrix form\",\"Apply sequences of transmations efficiently\",\"Represent perspective in matrix form\",\"And about the cost of transformation, using Homogeneous Coordinates (x, y, z, w) is more efficient than using Cartesian Coordinates (x, y, z).\",\"Homogeneous Matrix\"]},\"10\":{\"h\":\"Basic Concepts\"},\"11\":{\"h\":\"Functions\",\"t\":[\"A one-to-one mapping from the domain to the range:\",\"Note\",\" represents the one-dimensional real number domain.\"]},\"12\":{\"h\":\"Height Maps\",\"t\":[\"A height map can be described as:\",\"A height map is a 2D image where each pixel records a height value. It is commonly used to represent terrain.\"]},\"13\":{\"h\":\"2D Parametric Curve\",\"t\":[\"In other words: where is a two-dimensional coordinate point (x, y).\"]},\"14\":{\"h\":\"3D Parametric Curve\",\"t\":[\"In other words: where is a three-dimensional coordinate point (x, y, z).\"]},\"15\":{\"h\":\"Texture Mapping\",\"t\":[\"The relationship mapping a texture to an object's surface can be described as:\",\"Here, represents the texture domain (u, v), and represents the spatial domain (x, y, z).\"]},\"16\":{\"h\":\"Manifolds\",\"t\":[\"1-Manifold: A Curve\",\"2-Manifold: A Surface\",\"3-Manifold: A Volume\"]},\"17\":{\"h\":\"Arc-length Integral\",\"t\":[\"Used to calculate the length of a curve:\"]},\"18\":{\"h\":\"Continuity\",\"t\":[\"When the left limit and right limit exist and are equal at , then is continuous at , also known as continuity.\",\"Or more formally:\",\"For a given , there exists such that if , then .\",\"For the 2D case, we use neighborhoods. Neighborhoods can be described using triangles, rectangles, or circles.\",\"Neighborhoods\"]},\"19\":{\"h\":\"Calculus of Multiple Variables\"},\"20\":{\"h\":\"Partial Derivatives\"},\"21\":{\"h\":\"Gradient Vector\"},\"22\":{\"h\":\"Numerical Calculus\",\"t\":[\"Common numerical methods:\",\"Taylor Series and Expansion\",\"Numerical Integration\",\"Lookup Table\",\"This section belongs to the content of Scientific Computation (COMP5930M).\"]},\"23\":{\"h\":\"New Beginning\",\"t\":[\"My student discounts of Alibaba Cloud and Tencent Cloud will be used up soon, and the cost of subsequent servers is still not small. To save money, I plan to use GitHub Pages back. This time, I don't intend to use Hexo, but consider using a more powerful static page generator with Vue features: VuePress. I chose Hope as the theme, and then will slowly add some contents. I hope this blog is simpler, refreshing and more suitable for reading.\",\"To improve my English writing skill, I decide that most subsequent published articles will be written in both English and Chinese.\"]},\"24\":{\"h\":\"The algorithm framework for solving DP problems\",\"t\":[\"Dynamic Programming problems are the most complicated problems in algorithms. However, it is actually simple to solve if you understand the key concepts and the main algorithm framework of DP.\"]},\"25\":{\"h\":\"What is Dynamic Programming (DP) ?\",\"t\":[\"Dynamic Programming (DP) is a method for solving complex problems by breaking them down into smaller subproblems. It is a bottom-up approach, meaning it starts with solving the smaller subproblems and then uses those solutions to build up to a solution for the larger problem.\",\"To solve a problem with DP, the problem must have the following properties:\",\"Optimal substructure: The optimal solution to a problem can be constructed from optimal solutions to its subproblems.\",\"Overlapping subproblems: A problem can be broken down into subproblems that are reused multiple times.\"]},\"26\":{\"h\":\"A classic DP problem : Fibonacci\",\"t\":[\"For an instance, when we calculate the Fibonacci sequence, we can use DP.\",\"Tips\",\"The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding numbers, starting with 0 and 1. The sequence goes as follows: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, and so on. The sequence is named after Leonardo of Pisa, who was known as Fibonacci. He introduced the sequence to Western European mathematics in his book \\\"Liber Abaci\\\" in the year 1202.\",\"In general, for calculating the Fibonacci sequence, we use recursion functions, like the following:\",\"int Fibonacci(int n) { if (n == 0) { return 0; } if (n == 1 || n == 2) { return 1; } return Fibonacci(n - 1) + Fibonacci(n - 2); } \",\"The technique we use is just Recursion, not DP.\",\"The function call tree has a lot of nodes, but many of them are duplicated.\",\"I have an equation:\",\"DP = Recursion + Memoization OR Tabulation + optional improvements.\",\"What does it mean?\",\"Well, Memoization and tabulation are two techniques used to improve the performance of algorithms that use Dynamic Programming.\",\"Memoization is a technique that involves storing the results of intermediate calculations in a table, so that they can be reused later. This can help to reduce the overall time complexity of the algorithm by avoiding the need to recalculate the same subproblems multiple times. It's top-bottom.\",\"Tabulation, on the other hand, is a technique that involves storing the final results of all the subproblems in a table. This allows the algorithm to avoid recomputing the solutions to the subproblems and simply look up the pre-computed results in the table. It's bottom-up.\",\"Both memoization and tabulation can be used to speed up Dynamic Programming algorithms. The choice between the two techniques often depends on the specific problem being solved and the amount of available memory.\"]},\"27\":{\"h\":\"Using Memoization\",\"t\":[\"To use Memoization, we could define a look-up table or a cache table for saving calculated results. To define that table, we generally use a hash table.\",\"In C++, we will use std::unordered_map.\",\"For example, we can use Memoization to solve the Fibonacci problem:\",\"std::unordered_map<int, int> memo; int Fibonacci(int n) { if (n == 0) { return 0; } if (n == 1 || n == 2) { return 1; } if (memo.count(n) > 0) { return memo[n]; } else { memo[n] = Fibonacci(n - 1) + Fibonacci(n - 2); } return memo[n]; } \",\"Now, all the duplicated nodes are gone, we calculate Fibonacci(i) just one time.\"]},\"28\":{\"h\":\"Using Tabulation\",\"t\":[\"We can also use Tabulation for solving the problem. To use Tabulation, we could define an array or a vector for saving results of sub-problems.\",\"In C++, we will use std::vector.\",\"Here is the implementation of Fibonacci by using Tabulation:\",\"int Fibonacci(int n) { if (n == 0) { return 0; } if (n == 1 || n == 2) { return 1; } std::vector<int> d(n + 1); for (int i = 3; i <= n; i++) { d[i] = d[i - 1] + d[i - 2]; } return d[n]; } \"]},\"29\":{\"h\":\"Optional improvements\",\"t\":[\"There is an optional improvement called State Compression.\",\"State compression is a technique used in Dynamic Programming to reduce the amount of memory needed to store the intermediate results of a calculation. It involves representing the state of a subproblem using a smaller data structure, such as a bit vector or a hash table, instead of a larger data structure like an array or a matrix. This can help to reduce the space complexity of the algorithm and make it possible to solve larger problems or problems with more complex subproblems.\",\"In this case, we replace d with two integers: pre and curr:\",\"int Fibonacci(int n) { if (n == 0) { return 0; } if (n == 1 || n == 2) { return 1; } int pre = 1; int curr = 1; for (int i = 3; i <= n; i++) { int sum = pre + curr; pre = curr; curr = sum; } return curr; } \"]},\"30\":{\"h\":\"Framework\",\"t\":[\"Find all the base cases.\",\"In Fibonacci problem, base cases are n == 0 and n == 1 and n == 2;\",\"Find all the states.\",\"In Fibonacci problem, states are all the non-negative numbers.\",\"Find the state transition equation.\",\"In Fibonacci problem, the state transition equation is : dp[i] = dp[i - 1] + dp[i - 2]\",\"Tips\",\"A state transition equation is a mathematical equation that describes how the state of a system changes over time. In the context of Dynamic Programming, a state transition equation is an equation that describes how the optimal solution to a problem can be constructed from the optimal solutions to its subproblems. By using a state transition equation, it is possible to solve a problem by breaking it down into smaller subproblems and then combining the solutions to those subproblems to find a solution to the larger problem.\",\"Find selections and figure out how to define the DP table.\"]},\"31\":{\"h\":\"Implement automatically increase ids in MongoDB\",\"t\":[\"In MongoDB, every documents have an object id (Bson ID). But sometimes we need ids that can automatically increase when creating a new model. And the id should be an integer starts from 1. How to deal with the problem?\"]},\"32\":{\"h\":\"How to solve the problem\",\"t\":[\"To solve the problem, we have to create a new collection named AutoIncrementIdCollection, in which we insert some models (AutoIncrementIdModel) that have two fields:\",\"CollectionName --> The name of a collection.\",\"Sequence --> The current sequence of a collection. The default value of it should be 0.\",\"Everytime before inserting a new indexed model M to a collection C, we find a AutoIncrementIdModel whose CollectionName is C, and we increase its Sequence by one, then use that sequence to create M (M's id field be initialized by the sequence) and insert it to C.\"]},\"33\":{\"h\":\"Deeply dive into static abstract interface methods in C# 11\",\"t\":[\"Static abstract interface method is a new feature in C# 11 (corresponding .NET 7.0). In this article, we are going to deeply dive into it, talk about why we need it, what it is and how to use it.\"]},\"34\":{\"h\":\"Why we need it\",\"t\":[\"Let's recall our previous demands:\",\"We hope to perform mathematical operations in generics, but the compiler can't know the runtime type of T, so it can't know whether T supports mathematical operations such as addition, subtraction, multiplication and division, so it can't implement code like the following:\",\"public T Add<T>(T a, T b) { return a + b; } \",\"We hope that in some cases, T, as a type that can be determined at compile time, can call the public static method of T. However, the static interface method cannot be declared in the interface to allow us to operate T.XXX(); If only the static interface method could be declared in the interface. We used to dream about implementing code like the following：\",\"public interface ISomeInterface<T> where T : ISomeInterface<T> { static void SomeStaticMethod(); } public void Test<T>() where T : ISomeInterface<T> { T.SomeStaticMethod(); } \",\"In order to meet these needs, Microsoft and community developers jointly launched the static abstract interface method, and everyone's previous fantasy has now been realized.\"]},\"35\":{\"h\":\"What is it\",\"t\":[\"Static abstract interface method is a new feature in C# 11 (corresponding .NET 7.0). Using the latest version of Visual Studio 2022 and then when NET 7.0 runs, you can taste it fresh.\",\"It supports declaring the static abstract method in the interface (officially, it supports declaring the static virtual method in the interface, but I still report an error after opening the language preview, and I don't know how to use static virtual for the time being).\"]},\"36\":{\"h\":\"How to use it\",\"t\":[\"For an instance, we can use the feature mentioned above to declare the following interface:\",\"public interface IGetNext<T> where T : IGetNext<T> { static abstract T operator ++(T other); } \",\"Many operators force their parameters to match the type, or implement the type parameters containing the type according to the constraints. So, in this case we constrain T implement IGetNext<T>.\",\"Then, define a structure named RepeatSequence to implement the above interface, which creates a string composed of 'A', and each ++ operation allows an 'A' to be added to the string.\",\"public struct RepeatSequence : IGetNext<RepeatSequence> { private const char Ch = 'A'; public string Text = new string(Ch, 1); public RepeatSequence() {} public static RepeatSequence operator ++(RepeatSequence other) => other with { Text = other.Text + Ch }; public override string ToString() => Text; } \",\"Then we can write some testing codes, let them print to screen and we look at the output.\",\"var str = new RepeatSequence(); for (int i = 0; i < 10; i++) Console.WriteLine(str++); \",\"Output:\",\"A AA AAA AAAA AAAAA AAAAAA AAAAAAA AAAAAAAA AAAAAAAAA AAAAAAAAAA \"]},\"37\":{\"h\":\"Playground\"},\"38\":{\"h\":\"Analysing from code aspect\"},\"39\":{\"h\":\"Let's look at IL codes\",\"t\":[\"Suppose that we have declared the following interface:\",\"public interface IDeepInSourceCode<T> where T : IDeepInSourceCode<T> { void SomeMethod(); static abstract void SomeStaticAbstractMethod(); } \",\"The IL codes of it:\",\"// Type: StaticAbstractInterfaceMethods.IDeepInSourceCode`1 // Assembly: StaticAbstractInterfaceMethods, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null // MVID: 27A20D9E-C658-48F7-8AC2-47D46316D62D // Location: F:\\\\static_abstract\\\\StaticAbstractInterfaceMethods\\\\bin\\\\Debug\\\\net7.0\\\\StaticAbstractInterfaceMethods.dll // Sequence point data from f:\\\\static_abstract\\\\staticabstractinterfacemethods\\\\bin\\\\debug\\\\net7.0\\\\staticabstractinterfacemethods.pdb .class interface public abstract auto ansi StaticAbstractInterfaceMethods.IDeepInSourceCode`1<(class StaticAbstractInterfaceMethods.IDeepInSourceCode`1<!0/*T*/>) T> { .param constraint [1] /*T*/, class StaticAbstractInterfaceMethods.IDeepInSourceCode`1<!0/*T*/> .custom instance void System.Runtime.CompilerServices.NullableAttribute::.ctor([in] unsigned int8) = (01 00 01 00 00 ) // ..... // unsigned int8(1) // 0x01 .method public hidebysig virtual newslot abstract instance void SomeMethod() cil managed { // Can't find a body } // end of method IDeepInSourceCode`1::SomeMethod .method public hidebysig static virtual abstract void SomeStaticAbstractMethod() cil managed { // Can't find a body } // end of method IDeepInSourceCode`1::SomeStaticAbstractMethod } // end of class StaticAbstractInterfaceMethods.IDeepInSourceCode`1 \",\"It is found that in fact, the difference between the static abstract method and the ordinary interface method is that the newslot and instance keywords become static.\",\"It means that the specific implementation method of implementing the static abstract interface method must be a method starting with public static.\"]},\"40\":{\"h\":\"Let's try the inheritance relationship\",\"t\":[\"We define two types implementing the interface above:\",\"public class DeepInSourceCodeBase : IDeepInSourceCode<DeepInSourceCodeBase> { public virtual void SomeMethod() { Console.WriteLine(\\\"SomeMethodBase is invoked.\\\"); } public static void SomeStaticAbstractMethod() { Console.WriteLine(\\\"SomeStaticAbstractMethodBase is invoked.\\\"); } } public class DeepInSourceCodeDerived : DeepInSourceCodeBase, IDeepInSourceCode<DeepInSourceCodeDerived> { public override void SomeMethod() { Console.WriteLine(\\\"SomeMethodDerived is invoked.\\\"); } public new static void SomeStaticAbstractMethod() { Console.WriteLine(\\\"SomeStaticAbstractMethodDerived is invoked.\\\"); } } \",\"DeepInSourceCodeBase implementes IDeepInSourceCode<DeepInSourceCodeBase>.\",\"DeepInSourceCodeDerived derives from DeepInSourceCodeBase, overrides SomeMethod method, and covers SomeStaticAbstractMethod method.\",\"Let's write some testing code:\",\"public class DeepInSourceCodeTester { public static void Test<T1, T2>() where T1 : IDeepInSourceCode<T1>, new() where T2 : T1, new() { T1 t1 = new T1(); T2 t2 = new T2(); t1.SomeMethod(); t2.SomeMethod(); T1.SomeStaticAbstractMethod(); T2.SomeStaticAbstractMethod(); } } \",\"Add testing codes to Main:\",\"internal class Program { static void Main(string[] args) { DeepInSourceCodeTester.Test<DeepInSourceCodeBase, DeepInSourceCodeDerived>(); } } \",\"Guess what the result is first?\",\"SomeMethodBase is invoked. SomeMethodDerived is invoked. SomeStaticAbstractMethodBase is invoked. SomeStaticAbstractMethodDerived is invoked. \",\"Would you guess the result like this?\",\"Actually, the result is not like this, it's:\",\"SomeMethodBase is invoked. SomeMethodDerived is invoked. SomeStaticAbstractMethodBase is invoked. SomeStaticAbstractMethodBase is invoked. \",\"Here is the official explanation: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface#static-abstract-and-virtual-members\",\"When we change where T2 : T1, new() to where T2 : IDeepInSourceCode<T2>, new(), the result is what we expect.\"]},\"41\":{\"h\":\"Playground\"},\"42\":{\"h\":\"How does .NET support Generic Math ?\",\"t\":[\"In order to support generic math, . NET 7.0 has reimplemented all the base element types.\",\"Take Int32 as an example, it now wants to implement more interfaces to perform some generic mathematical operations:\",\"public readonly struct Int32 : IComparable, IConvertible, ISpanFormattable, IComparable<int>, IEquatable<int>, IBinaryInteger<int>, IMinMaxValue<int>, ISignedNumber<int> \",\"In addition to some previously implemented interfaces, the following new interfaces have been implemented by Int32:\",\"IBinaryInterger<int>\",\"public interface IBinaryInteger<TSelf> : IBinaryNumber<TSelf>, IShiftOperators<TSelf, int, TSelf> where TSelf : IBinaryInteger<TSelf>? \",\"IBinaryNumber<int>\",\"public interface IBinaryNumber<TSelf> : IBitwiseOperators<TSelf, TSelf, TSelf>, INumber<TSelf> where TSelf : IBinaryNumber<TSelf>? \",\"IBitwiseOperators<int, int, int>\",\"Declared the static abstract methods for overloading four operators: &, |, ~ and !.\",\"INumber<int>\",\"public interface INumber<TSelf> : IComparable, IComparable<TSelf>, IComparisonOperators<TSelf, TSelf, bool>, IModulusOperators<TSelf, TSelf, TSelf>, INumberBase<TSelf> where TSelf : INumber<TSelf>? \",\"IComparisonOperators<int, int, int>\",\"Declared the static abstract methods for overloading four operators: >, <, >= and <=.\",\"IModulusOperators<int, int, int>\",\"Declared the static abstract method for overloading the operator: %.\",\"INumberBase<int>\",\"public interface INumberBase<TSelf> : IAdditionOperators<TSelf, TSelf, TSelf>, IAdditiveIdentity<TSelf, TSelf>, IDecrementOperators<TSelf>, IDivisionOperators<TSelf, TSelf, TSelf>, IEquatable<TSelf>, IEqualityOperators<TSelf, TSelf, bool>, IIncrementOperators<TSelf>, IMultiplicativeIdentity<TSelf, TSelf>, IMultiplyOperators<TSelf, TSelf, TSelf>, ISpanFormattable, ISpanParsable<TSelf>, ISubtractionOperators<TSelf, TSelf, TSelf>, IUnaryPlusOperators<TSelf, TSelf>, IUnaryNegationOperators<TSelf, TSelf> where TSelf : INumberBase<TSelf>? \",\"Mainly declared the static abstract methods for overloading four operators: +, -, *, /.\",\"IShiftOperators<int, int, int>\",\"Declared the static abstract methods for overloading three operators: <<, >>, and >>>.\",\"IMinMaxValue<int>\",\"Declared two static abstract properties: MinValue and MaxValue.\",\"ISignedNumber<int>\",\"Declared a static abstract property: NegativeOne.\",\"In this way, Int32 can be used as a generic parameter for generic math.\",\"In addition to Int32, other element types such as Single, Double and Byte also implement many of these interfaces for generic mathematical operations.\",\"Take a simple example:\",\"public static void MultiplyAndSub<T>(T t1, T t2, T t3) where T : IMultiplyOperators<T, T, T>, ISubtractionOperators<T, T, T> { Console.WriteLine(t1 * t2 - t3); } \",\"The above method constraints T support multiplication and subtraction operations.\",\"The above method can be called like this:\",\"MultiplyAndSub(1, 2, 3); MultiplyAndSub(0.1f, 0.2f, 0.3f); MultiplyAndSub(0.1d, 0.2d, 0.3d); \",\"Of course, we can also define a type by ourselves, and then implement the interface related to multiplication and subtraction:\",\"public struct MultiplyAndSubCustomStruct : IMultiplyOperators<MultiplyAndSubCustomStruct, MultiplyAndSubCustomStruct, MultiplyAndSubCustomStruct>, ISubtractionOperators<MultiplyAndSubCustomStruct, MultiplyAndSubCustomStruct, MultiplyAndSubCustomStruct> { public MultiplyAndSubCustomStruct(int value) { Value = value; } public int Value; public static MultiplyAndSubCustomStruct operator *(MultiplyAndSubCustomStruct left, MultiplyAndSubCustomStruct right) { return new MultiplyAndSubCustomStruct(left.Value * right.Value); } public static MultiplyAndSubCustomStruct operator -(MultiplyAndSubCustomStruct left, MultiplyAndSubCustomStruct right) { return new MultiplyAndSubCustomStruct(left.Value - right.Value); } public string ToString(string? format, IFormatProvider? formatProvider) { return Value.ToString(format, formatProvider); } } \",\"You can then call MultiplyAndSub:\",\"MultiplyAndSub(new MultiplyAndSubCustomStruct(1), new MultiplyAndSubCustomStruct(2), new MultiplyAndSubCustomStruct(3)); \",\"The result is -1, which meets expectations.\"]},\"43\":{\"h\":\"Posts\"},\"44\":{\"h\":\"Posts\"}},\"dirtCount\":0,\"index\":[[\"~\",{\"1\":{\"42\":1}}],[\"|\",{\"1\":{\"42\":1}}],[\"||\",{\"1\":{\"26\":1,\"27\":1,\"28\":1,\"29\":1}}],[\"47d46316d62d\",{\"1\":{\"39\":1}}],[\"48f7\",{\"1\":{\"39\":1}}],[\"<<\",{\"1\":{\"42\":1}}],[\"<\",{\"1\":{\"36\":1,\"42\":1}}],[\"<=\",{\"1\":{\"28\":1,\"29\":1,\"42\":1}}],[\"7\",{\"1\":{\"33\":1,\"35\":2,\"42\":1}}],[\">>>\",{\"1\":{\"42\":1}}],[\">>\",{\"1\":{\"42\":1}}],[\">=\",{\"1\":{\"42\":1}}],[\">\",{\"1\":{\"27\":1,\"32\":2,\"39\":2,\"42\":1}}],[\"=>\",{\"1\":{\"36\":2}}],[\"=\",{\"1\":{\"26\":1,\"27\":1,\"28\":2,\"29\":6,\"30\":1,\"36\":5,\"39\":1,\"40\":2,\"42\":1}}],[\"==\",{\"1\":{\"26\":3,\"27\":3,\"28\":3,\"29\":3,\"30\":3}}],[\"jointly\",{\"1\":{\"34\":1}}],[\"just\",{\"1\":{\"26\":1,\"27\":1}}],[\"java\",{\"1\":{\"0\":1}}],[\"++\",{\"1\":{\"36\":3}}],[\"+\",{\"1\":{\"26\":3,\"27\":1,\"28\":2,\"29\":1,\"30\":1,\"34\":1,\"36\":1,\"42\":1}}],[\"8ac2\",{\"1\":{\"39\":1}}],[\"8\",{\"1\":{\"26\":1}}],[\"5\",{\"1\":{\"26\":1}}],[\"0x01\",{\"1\":{\"39\":1}}],[\"00\",{\"1\":{\"39\":3}}],[\"01\",{\"1\":{\"39\":2}}],[\"0\",{\"1\":{\"26\":4,\"27\":3,\"28\":2,\"29\":2,\"30\":1,\"32\":1,\"33\":1,\"35\":2,\"36\":1,\"39\":7,\"42\":7}}],[\"keywords\",{\"1\":{\"39\":1,\"40\":1}}],[\"key\",{\"1\":{\"24\":1}}],[\"know\",{\"1\":{\"34\":2,\"35\":1}}],[\"known\",{\"1\":{\"18\":1,\"26\":1}}],[\"knowledge\",{\"1\":{\"0\":2}}],[\"3f\",{\"1\":{\"42\":1}}],[\"34\",{\"1\":{\"26\":1}}],[\"3\",{\"1\":{\"16\":1,\"26\":1,\"28\":1,\"29\":1,\"42\":2}}],[\"3d\",{\"0\":{\"14\":1},\"1\":{\"42\":1}}],[\"2f\",{\"1\":{\"42\":1}}],[\"27a20d9e\",{\"1\":{\"39\":1}}],[\"2022\",{\"1\":{\"35\":1}}],[\"21\",{\"1\":{\"26\":1}}],[\"2\",{\"1\":{\"16\":1,\"26\":3,\"27\":2,\"28\":2,\"29\":1,\"30\":2,\"42\":2}}],[\"2d\",{\"0\":{\"13\":1},\"1\":{\"12\":1,\"18\":1,\"42\":1}}],[\"1d\",{\"1\":{\"42\":1}}],[\"1f\",{\"1\":{\"42\":1}}],[\"10\",{\"1\":{\"36\":1}}],[\"11\",{\"0\":{\"33\":1},\"1\":{\"33\":1,\"35\":1}}],[\"1202\",{\"1\":{\"26\":1}}],[\"13\",{\"1\":{\"26\":1}}],[\"1\",{\"1\":{\"16\":1,\"26\":6,\"27\":3,\"28\":4,\"29\":4,\"30\":2,\"31\":1,\"36\":1,\"39\":2,\"42\":3}}],[\"z\",{\"1\":{\"9\":2,\"14\":1,\"15\":1}}],[\"zilong\",{\"1\":{\"0\":1}}],[\"year\",{\"1\":{\"26\":1}}],[\"years\",{\"1\":{\"0\":1}}],[\"you\",{\"1\":{\"24\":1,\"35\":1,\"40\":1,\"42\":1}}],[\"y\",{\"1\":{\"9\":2,\"13\":1,\"14\":1,\"15\":1}}],[\"xxx\",{\"1\":{\"34\":1}}],[\"x\",{\"1\":{\"9\":2,\"13\":1,\"14\":1,\"15\":1}}],[\"nullableattribute\",{\"1\":{\"39\":1}}],[\"numerical\",{\"0\":{\"22\":1},\"1\":{\"22\":2}}],[\"numbers\",{\"1\":{\"26\":2,\"30\":1}}],[\"number\",{\"1\":{\"11\":1,\"26\":1}}],[\"name\",{\"1\":{\"32\":1}}],[\"named\",{\"1\":{\"26\":1,\"32\":1,\"36\":1}}],[\"n\",{\"1\":{\"26\":6,\"27\":10,\"28\":7,\"29\":5,\"30\":3}}],[\"net7\",{\"1\":{\"39\":2}}],[\"net\",{\"0\":{\"42\":1},\"1\":{\"33\":1,\"35\":2,\"42\":1}}],[\"negativeone\",{\"1\":{\"42\":1}}],[\"negative\",{\"1\":{\"30\":1}}],[\"newslot\",{\"1\":{\"39\":2}}],[\"new\",{\"0\":{\"23\":1},\"1\":{\"31\":1,\"32\":2,\"33\":1,\"35\":1,\"36\":2,\"40\":7,\"42\":6}}],[\"neighborhoods\",{\"1\":{\"18\":3}}],[\"needs\",{\"1\":{\"34\":1}}],[\"needed\",{\"1\":{\"29\":1}}],[\"need\",{\"0\":{\"9\":1,\"34\":1},\"1\":{\"26\":1,\"31\":1,\"33\":1}}],[\"non\",{\"1\":{\"30\":1}}],[\"now\",{\"1\":{\"27\":1,\"34\":1,\"42\":1}}],[\"nodes\",{\"1\":{\"26\":1,\"27\":1}}],[\"not\",{\"1\":{\"23\":1,\"26\":1,\"40\":1}}],[\"note\",{\"1\":{\"11\":1}}],[\"normalized\",{\"1\":{\"8\":1}}],[\"ndcs\",{\"1\":{\"8\":1}}],[\"virtual\",{\"1\":{\"35\":2,\"39\":2,\"40\":2}}],[\"visual\",{\"1\":{\"35\":1}}],[\"view\",{\"1\":{\"8\":1}}],[\"void\",{\"1\":{\"34\":2,\"39\":5,\"40\":6,\"42\":1}}],[\"volume\",{\"1\":{\"16\":1}}],[\"vuepress\",{\"1\":{\"23\":1}}],[\"vue\",{\"1\":{\"23\":1}}],[\"var\",{\"1\":{\"36\":1}}],[\"variables\",{\"0\":{\"19\":1}}],[\"value\",{\"1\":{\"12\":1,\"32\":1,\"42\":9}}],[\"v\",{\"1\":{\"15\":1}}],[\"vcs\",{\"1\":{\"8\":1}}],[\"version=1\",{\"1\":{\"39\":1}}],[\"version\",{\"1\":{\"35\":1}}],[\"versed\",{\"1\":{\"0\":1}}],[\"vector<int>\",{\"1\":{\"28\":1}}],[\"vector\",{\"0\":{\"5\":1,\"6\":1,\"21\":1},\"1\":{\"28\":2,\"29\":1}}],[\"u\",{\"1\":{\"15\":1}}],[\"us\",{\"1\":{\"34\":1,\"40\":1}}],[\"uses\",{\"1\":{\"25\":1}}],[\"use\",{\"0\":{\"36\":1},\"1\":{\"18\":1,\"23\":2,\"26\":4,\"27\":4,\"28\":3,\"32\":1,\"33\":1,\"35\":1,\"36\":1}}],[\"used\",{\"1\":{\"12\":1,\"17\":1,\"23\":1,\"26\":2,\"29\":1,\"34\":1,\"42\":1}}],[\"using\",{\"0\":{\"27\":1,\"28\":1},\"1\":{\"9\":2,\"18\":1,\"23\":1,\"28\":1,\"29\":1,\"30\":1,\"35\":1}}],[\"up\",{\"1\":{\"7\":1,\"23\":1,\"25\":2,\"26\":3,\"27\":1}}],[\"unsigned\",{\"1\":{\"39\":2}}],[\"unordered\",{\"1\":{\"27\":2}}],[\"unreal\",{\"1\":{\"0\":1}}],[\"unity\",{\"1\":{\"0\":1}}],[\"university\",{\"1\":{\"0\":1}}],[\"understand\",{\"1\":{\"24\":1}}],[\"undertaking\",{\"1\":{\"0\":1}}],[\"under\",{\"1\":{\"0\":1}}],[\"quaternions\",{\"1\":{\"7\":1}}],[\"iunarynegationoperators<tself\",{\"1\":{\"42\":1}}],[\"iunaryplusoperators<tself\",{\"1\":{\"42\":1}}],[\"iincrementoperators<tself>\",{\"1\":{\"42\":1}}],[\"iequalityoperators<tself\",{\"1\":{\"42\":1}}],[\"iequatable<tself>\",{\"1\":{\"42\":1}}],[\"iequatable<int>\",{\"1\":{\"42\":1}}],[\"iadditiveidentity<tself\",{\"1\":{\"42\":1}}],[\"iadditionoperators<tself\",{\"1\":{\"42\":1}}],[\"ibitwiseoperators<int\",{\"1\":{\"42\":1}}],[\"ibitwiseoperators<tself\",{\"1\":{\"42\":1}}],[\"ibinarynumber<int>\",{\"1\":{\"42\":1}}],[\"ibinarynumber<tself>\",{\"1\":{\"42\":3}}],[\"ibinaryinteger<tself>\",{\"1\":{\"42\":2}}],[\"ibinaryinteger<int>\",{\"1\":{\"42\":1}}],[\"ibinaryinterger<int>\",{\"1\":{\"42\":1}}],[\"icomparisonoperators<int\",{\"1\":{\"42\":1}}],[\"icomparisonoperators<tself\",{\"1\":{\"42\":1}}],[\"icomparable<tself>\",{\"1\":{\"42\":1}}],[\"icomparable<int>\",{\"1\":{\"42\":1}}],[\"icomparable\",{\"1\":{\"42\":2}}],[\"iconvertible\",{\"1\":{\"42\":1}}],[\"il\",{\"0\":{\"39\":1},\"1\":{\"39\":1}}],[\"igetnext<repeatsequence>\",{\"1\":{\"36\":1}}],[\"igetnext<t>\",{\"1\":{\"36\":3}}],[\"idivisionoperators<tself\",{\"1\":{\"42\":1}}],[\"idecrementoperators<tself>\",{\"1\":{\"42\":1}}],[\"ideepinsourcecode<t2>\",{\"1\":{\"40\":1}}],[\"ideepinsourcecode<t1>\",{\"1\":{\"40\":1}}],[\"ideepinsourcecode<t>\",{\"1\":{\"39\":2}}],[\"ideepinsourcecode<deepinsourcecodederived>\",{\"1\":{\"40\":1}}],[\"ideepinsourcecode<deepinsourcecodebase>\",{\"1\":{\"40\":2}}],[\"ideepinsourcecode`1<\",{\"1\":{\"39\":3}}],[\"ideepinsourcecode`1\",{\"1\":{\"39\":4}}],[\"id\",{\"1\":{\"31\":3,\"32\":1}}],[\"ids\",{\"0\":{\"31\":1},\"1\":{\"31\":1}}],[\"i++\",{\"1\":{\"28\":1,\"29\":1,\"36\":1}}],[\"imultiplyoperators<multiplyandsubcustomstruct\",{\"1\":{\"42\":1}}],[\"imultiplyoperators<t\",{\"1\":{\"42\":1}}],[\"imultiplyoperators<tself\",{\"1\":{\"42\":1}}],[\"imultiplicativeidentity<tself\",{\"1\":{\"42\":1}}],[\"imodulusoperators<int\",{\"1\":{\"42\":1}}],[\"imodulusoperators<tself\",{\"1\":{\"42\":1}}],[\"iminmaxvalue<int>\",{\"1\":{\"42\":2}}],[\"implemented\",{\"1\":{\"42\":2}}],[\"implementes\",{\"1\":{\"40\":1}}],[\"implementing\",{\"1\":{\"34\":1,\"39\":1,\"40\":1}}],[\"implement\",{\"0\":{\"31\":1},\"1\":{\"34\":1,\"36\":3,\"42\":3}}],[\"implementation\",{\"1\":{\"28\":1,\"39\":1}}],[\"improvement\",{\"1\":{\"29\":1}}],[\"improvements\",{\"0\":{\"29\":1},\"1\":{\"26\":1}}],[\"improve\",{\"1\":{\"23\":1,\"26\":1}}],[\"image\",{\"1\":{\"12\":1}}],[\"i\",{\"1\":{\"23\":5,\"26\":1,\"27\":1,\"28\":5,\"29\":2,\"30\":3,\"35\":2,\"36\":2}}],[\"iformatprovider\",{\"1\":{\"42\":1}}],[\"if\",{\"1\":{\"18\":1,\"24\":1,\"26\":2,\"27\":3,\"28\":2,\"29\":2,\"34\":1}}],[\"its\",{\"1\":{\"25\":1,\"30\":1,\"32\":1}}],[\"it\",{\"0\":{\"34\":1,\"35\":1,\"36\":1},\"1\":{\"7\":2,\"12\":1,\"24\":1,\"25\":2,\"26\":3,\"29\":2,\"30\":2,\"32\":2,\"33\":4,\"34\":2,\"35\":3,\"39\":3,\"40\":1,\"42\":1}}],[\"isubtractionoperators<multiplyandsubcustomstruct\",{\"1\":{\"42\":1}}],[\"isubtractionoperators<t\",{\"1\":{\"42\":1}}],[\"isubtractionoperators<tself\",{\"1\":{\"42\":1}}],[\"ishiftoperators<int\",{\"1\":{\"42\":1}}],[\"ishiftoperators<tself\",{\"1\":{\"42\":1}}],[\"ispanparsable<tself>\",{\"1\":{\"42\":1}}],[\"ispanformattable\",{\"1\":{\"42\":2}}],[\"isignednumber<int>\",{\"1\":{\"42\":2}}],[\"isomeinterface<t>\",{\"1\":{\"34\":3}}],[\"is\",{\"0\":{\"25\":1,\"35\":1},\"1\":{\"7\":3,\"8\":6,\"9\":1,\"12\":2,\"13\":1,\"14\":1,\"18\":1,\"23\":2,\"24\":1,\"25\":2,\"26\":6,\"28\":1,\"29\":2,\"30\":4,\"32\":1,\"33\":2,\"35\":1,\"39\":2,\"40\":16,\"42\":1}}],[\"inumberbase<int>\",{\"1\":{\"42\":1}}],[\"inumberbase<tself>\",{\"1\":{\"42\":3}}],[\"inumber<int>\",{\"1\":{\"42\":1}}],[\"inumber<tself>\",{\"1\":{\"42\":3}}],[\"invoked\",{\"1\":{\"40\":12}}],[\"involves\",{\"1\":{\"26\":2,\"29\":1}}],[\"inheritance\",{\"0\":{\"40\":1}}],[\"initialized\",{\"1\":{\"32\":1}}],[\"indexed\",{\"1\":{\"32\":1}}],[\"inserting\",{\"1\":{\"32\":1}}],[\"insert\",{\"1\":{\"32\":2}}],[\"instead\",{\"1\":{\"29\":1}}],[\"instance\",{\"1\":{\"26\":1,\"36\":1,\"39\":3}}],[\"increase\",{\"0\":{\"31\":1},\"1\":{\"31\":1,\"32\":1}}],[\"int32\",{\"1\":{\"42\":5}}],[\"int8\",{\"1\":{\"39\":2}}],[\"int>\",{\"1\":{\"27\":1,\"42\":4}}],[\"int\",{\"1\":{\"26\":2,\"27\":2,\"28\":3,\"29\":6,\"36\":1,\"42\":7}}],[\"introduced\",{\"1\":{\"26\":1}}],[\"integer\",{\"1\":{\"31\":1}}],[\"integers\",{\"1\":{\"29\":1}}],[\"integration\",{\"1\":{\"22\":1}}],[\"integral\",{\"0\":{\"17\":1}}],[\"intend\",{\"1\":{\"23\":1}}],[\"internal\",{\"1\":{\"40\":1}}],[\"interfaces\",{\"1\":{\"42\":4}}],[\"interface\",{\"0\":{\"33\":1},\"1\":{\"33\":1,\"34\":6,\"35\":3,\"36\":3,\"39\":5,\"40\":2,\"42\":5}}],[\"intermediate\",{\"1\":{\"26\":1,\"29\":1}}],[\"interaction\",{\"1\":{\"7\":1}}],[\"intersections\",{\"1\":{\"7\":1}}],[\"into\",{\"0\":{\"33\":1},\"1\":{\"0\":1,\"25\":2,\"30\":1,\"33\":1}}],[\"in\",{\"0\":{\"31\":1,\"33\":1},\"1\":{\"0\":6,\"9\":2,\"13\":1,\"14\":1,\"23\":1,\"24\":1,\"26\":6,\"27\":1,\"28\":1,\"29\":2,\"30\":4,\"31\":1,\"32\":1,\"33\":2,\"34\":5,\"35\":3,\"36\":1,\"39\":2,\"42\":4}}],[\"f\",{\"1\":{\"39\":2}}],[\"fact\",{\"1\":{\"39\":1}}],[\"fantasy\",{\"1\":{\"34\":1}}],[\"familiar\",{\"1\":{\"0\":1}}],[\"feature\",{\"1\":{\"33\":1,\"35\":1,\"36\":1}}],[\"features\",{\"1\":{\"23\":1}}],[\"function\",{\"1\":{\"26\":1}}],[\"functions\",{\"0\":{\"11\":1},\"1\":{\"26\":1}}],[\"first\",{\"1\":{\"40\":1}}],[\"field\",{\"1\":{\"32\":1}}],[\"fields\",{\"1\":{\"32\":1}}],[\"figure\",{\"1\":{\"30\":1}}],[\"find\",{\"1\":{\"30\":5,\"32\":1,\"39\":2}}],[\"final\",{\"1\":{\"26\":1}}],[\"fibonacci\",{\"0\":{\"26\":1},\"1\":{\"26\":7,\"27\":5,\"28\":2,\"29\":1,\"30\":3}}],[\"film\",{\"1\":{\"7\":1}}],[\"fresh\",{\"1\":{\"35\":1}}],[\"framework\",{\"0\":{\"24\":1,\"30\":1},\"1\":{\"24\":1}}],[\"frameworks\",{\"1\":{\"0\":1}}],[\"from\",{\"0\":{\"38\":1},\"1\":{\"11\":1,\"25\":1,\"30\":1,\"31\":1,\"39\":1,\"40\":1}}],[\"four\",{\"1\":{\"42\":3}}],[\"found\",{\"1\":{\"39\":1}}],[\"follows\",{\"1\":{\"26\":1}}],[\"following\",{\"1\":{\"1\":1,\"25\":1,\"26\":1,\"34\":2,\"36\":1,\"39\":1,\"42\":1}}],[\"force\",{\"1\":{\"36\":1}}],[\"formatprovider\",{\"1\":{\"42\":2}}],[\"format\",{\"1\":{\"42\":2}}],[\"formally\",{\"1\":{\"18\":1}}],[\"form\",{\"1\":{\"9\":2}}],[\"for\",{\"0\":{\"24\":1},\"1\":{\"0\":3,\"18\":2,\"23\":1,\"25\":2,\"26\":2,\"27\":2,\"28\":3,\"29\":1,\"35\":1,\"36\":2,\"42\":7}}],[\"runs\",{\"1\":{\"35\":1}}],[\"runtime\",{\"1\":{\"34\":1,\"39\":1}}],[\"right\",{\"1\":{\"18\":1,\"42\":4}}],[\"range\",{\"1\":{\"11\":1}}],[\"robust\",{\"1\":{\"0\":1}}],[\"role\",{\"1\":{\"0\":1}}],[\"reimplemented\",{\"1\":{\"42\":1}}],[\"reference\",{\"1\":{\"40\":1}}],[\"refreshing\",{\"1\":{\"23\":1}}],[\"repeatsequence\",{\"1\":{\"36\":6}}],[\"report\",{\"1\":{\"35\":1}}],[\"replace\",{\"1\":{\"29\":1}}],[\"representing\",{\"1\":{\"29\":1}}],[\"represents\",{\"1\":{\"11\":1,\"15\":2}}],[\"represent\",{\"1\":{\"9\":2,\"12\":1}}],[\"reduce\",{\"1\":{\"26\":1,\"29\":2}}],[\"result\",{\"1\":{\"40\":4,\"42\":1}}],[\"results\",{\"1\":{\"26\":3,\"27\":1,\"28\":1,\"29\":1}}],[\"research\",{\"1\":{\"0\":1}}],[\"return\",{\"1\":{\"26\":3,\"27\":4,\"28\":3,\"29\":3,\"34\":1,\"42\":3}}],[\"reused\",{\"1\":{\"25\":1,\"26\":1}}],[\"readonly\",{\"1\":{\"42\":1}}],[\"reading\",{\"1\":{\"23\":1}}],[\"realized\",{\"1\":{\"34\":1}}],[\"real\",{\"1\":{\"11\":1}}],[\"recall\",{\"1\":{\"34\":1}}],[\"recalculate\",{\"1\":{\"26\":1}}],[\"recomputing\",{\"1\":{\"26\":1}}],[\"records\",{\"1\":{\"12\":1}}],[\"recursion\",{\"1\":{\"26\":3}}],[\"rectangles\",{\"1\":{\"18\":1}}],[\"relationship\",{\"0\":{\"40\":1},\"1\":{\"15\":1}}],[\"related\",{\"1\":{\"0\":1,\"42\":1}}],[\"rendering\",{\"0\":{\"4\":1,\"7\":1},\"1\":{\"7\":1}}],[\"rebirth\",{\"0\":{\"3\":1}}],[\"https\",{\"1\":{\"40\":1}}],[\"hidebysig\",{\"1\":{\"39\":2}}],[\"his\",{\"1\":{\"26\":1}}],[\"high\",{\"1\":{\"0\":1}}],[\"help\",{\"1\":{\"26\":1,\"29\":1}}],[\"he\",{\"1\":{\"26\":1}}],[\"hexo\",{\"1\":{\"23\":1}}],[\"here\",{\"1\":{\"15\":1,\"28\":1,\"40\":1}}],[\"height\",{\"0\":{\"12\":1},\"1\":{\"12\":3}}],[\"hand\",{\"1\":{\"26\":1}}],[\"have\",{\"1\":{\"9\":1,\"25\":1,\"26\":1,\"31\":1,\"32\":2,\"39\":1,\"42\":1}}],[\"hash\",{\"1\":{\"27\":1,\"29\":1}}],[\"has\",{\"1\":{\"0\":2,\"26\":1,\"34\":1,\"42\":1}}],[\"how\",{\"0\":{\"32\":1,\"36\":1,\"42\":1},\"1\":{\"30\":3,\"31\":1,\"33\":1,\"35\":1}}],[\"however\",{\"1\":{\"24\":1,\"34\":1}}],[\"hope\",{\"1\":{\"23\":2,\"34\":2}}],[\"hoping\",{\"1\":{\"0\":1}}],[\"homogeneous\",{\"0\":{\"9\":1},\"1\":{\"7\":1,\"9\":2}}],[\"dll\",{\"1\":{\"39\":1}}],[\"dream\",{\"1\":{\"34\":1}}],[\"data\",{\"1\":{\"29\":2,\"39\":1}}],[\"d\",{\"1\":{\"28\":5,\"29\":1}}],[\"duplicated\",{\"1\":{\"26\":1,\"27\":1}}],[\"dynamic\",{\"0\":{\"25\":1},\"1\":{\"24\":1,\"25\":1,\"26\":2,\"29\":1,\"30\":1}}],[\"dp\",{\"0\":{\"24\":1,\"25\":1,\"26\":1},\"1\":{\"24\":1,\"25\":2,\"26\":3,\"30\":4}}],[\"double\",{\"1\":{\"42\":1}}],[\"documents\",{\"1\":{\"31\":1}}],[\"does\",{\"0\":{\"42\":1},\"1\":{\"26\":1}}],[\"down\",{\"1\":{\"25\":2,\"30\":1}}],[\"don\",{\"1\":{\"23\":1,\"35\":1}}],[\"domain\",{\"1\":{\"11\":2,\"15\":2}}],[\"dot\",{\"0\":{\"5\":1},\"1\":{\"5\":1}}],[\"dotnet\",{\"1\":{\"0\":1,\"40\":1}}],[\"dcs\",{\"1\":{\"8\":2}}],[\"difference\",{\"1\":{\"39\":1}}],[\"different\",{\"1\":{\"7\":1}}],[\"division\",{\"1\":{\"34\":1}}],[\"dive\",{\"0\":{\"33\":1},\"1\":{\"33\":1}}],[\"discounts\",{\"1\":{\"23\":1}}],[\"discuss\",{\"1\":{\"1\":1}}],[\"dimensional\",{\"1\":{\"11\":1,\"13\":1,\"14\":1}}],[\"derives\",{\"1\":{\"40\":1}}],[\"derivatives\",{\"0\":{\"20\":1}}],[\"deepinsourcecodetester\",{\"1\":{\"40\":2}}],[\"deepinsourcecodederived>\",{\"1\":{\"40\":1}}],[\"deepinsourcecodederived\",{\"1\":{\"40\":2}}],[\"deepinsourcecodebase\",{\"1\":{\"40\":4}}],[\"deeply\",{\"0\":{\"33\":1},\"1\":{\"33\":1}}],[\"debug\",{\"1\":{\"39\":2}}],[\"declare\",{\"1\":{\"36\":1}}],[\"declared\",{\"1\":{\"34\":2,\"39\":1,\"42\":7}}],[\"declaring\",{\"1\":{\"35\":2}}],[\"decide\",{\"1\":{\"23\":1}}],[\"determined\",{\"1\":{\"34\":1}}],[\"demands\",{\"1\":{\"34\":1}}],[\"default\",{\"1\":{\"32\":1}}],[\"define\",{\"1\":{\"27\":2,\"28\":1,\"30\":1,\"36\":1,\"40\":1,\"42\":1}}],[\"deal\",{\"1\":{\"31\":1}}],[\"depends\",{\"1\":{\"26\":1}}],[\"device\",{\"1\":{\"8\":1}}],[\"development\",{\"1\":{\"0\":3,\"1\":1}}],[\"developers\",{\"1\":{\"0\":1,\"34\":1}}],[\"developer\",{\"1\":{\"0\":1}}],[\"describes\",{\"1\":{\"30\":2}}],[\"described\",{\"1\":{\"12\":1,\"15\":1,\"18\":1}}],[\"describe\",{\"1\":{\"7\":1}}],[\"output\",{\"1\":{\"36\":2}}],[\"out\",{\"1\":{\"30\":1}}],[\"ourselves\",{\"1\":{\"42\":1}}],[\"our\",{\"1\":{\"7\":2,\"34\":1}}],[\"overloading\",{\"1\":{\"42\":5}}],[\"overlapping\",{\"1\":{\"25\":1}}],[\"overrides\",{\"1\":{\"40\":1}}],[\"override\",{\"1\":{\"36\":1,\"40\":1}}],[\"over\",{\"1\":{\"30\":1}}],[\"overall\",{\"1\":{\"26\":1}}],[\"only\",{\"1\":{\"34\":1}}],[\"on\",{\"1\":{\"26\":3}}],[\"one\",{\"1\":{\"11\":3,\"27\":1,\"32\":1}}],[\"operation\",{\"1\":{\"36\":1}}],[\"operations\",{\"1\":{\"34\":2,\"42\":3}}],[\"operators\",{\"1\":{\"36\":1,\"42\":4}}],[\"operator\",{\"1\":{\"36\":2,\"42\":3}}],[\"operate\",{\"1\":{\"34\":1}}],[\"opening\",{\"1\":{\"35\":1}}],[\"open\",{\"1\":{\"0\":1}}],[\"optional\",{\"0\":{\"29\":1},\"1\":{\"26\":1,\"29\":1}}],[\"optimal\",{\"1\":{\"25\":3,\"30\":2}}],[\"ocs\",{\"1\":{\"8\":1}}],[\"object\",{\"1\":{\"7\":1,\"8\":1,\"15\":1,\"31\":1}}],[\"ordinary\",{\"1\":{\"39\":1}}],[\"order\",{\"1\":{\"34\":1,\"42\":1}}],[\"or\",{\"1\":{\"0\":1,\"1\":1,\"18\":2,\"26\":1,\"27\":1,\"28\":1,\"29\":3,\"36\":1}}],[\"other\",{\"1\":{\"0\":2,\"13\":1,\"14\":1,\"26\":1,\"36\":4,\"42\":1}}],[\"official\",{\"1\":{\"40\":1}}],[\"officially\",{\"1\":{\"35\":1}}],[\"often\",{\"1\":{\"26\":1}}],[\"of\",{\"0\":{\"19\":1},\"1\":{\"0\":5,\"9\":2,\"17\":1,\"22\":1,\"23\":2,\"24\":1,\"26\":10,\"28\":2,\"29\":5,\"30\":2,\"32\":3,\"34\":2,\"35\":1,\"36\":1,\"39\":5,\"42\":2}}],[\"bin\",{\"1\":{\"39\":2}}],[\"bit\",{\"1\":{\"29\":1}}],[\"b\",{\"1\":{\"34\":2}}],[\"bson\",{\"1\":{\"31\":1}}],[\"bool>\",{\"1\":{\"42\":2}}],[\"book\",{\"1\":{\"26\":1}}],[\"body\",{\"1\":{\"39\":2}}],[\"bottom\",{\"1\":{\"25\":1,\"26\":2}}],[\"both\",{\"1\":{\"23\":1,\"26\":1}}],[\"broken\",{\"1\":{\"25\":1}}],[\"breaking\",{\"1\":{\"25\":1,\"30\":1}}],[\"build\",{\"1\":{\"25\":1}}],[\"but\",{\"1\":{\"23\":1,\"26\":1,\"31\":1,\"34\":1,\"35\":1}}],[\"blog\",{\"1\":{\"23\":1}}],[\"blackjack\",{\"1\":{\"0\":1}}],[\"base\",{\"1\":{\"30\":2,\"42\":1}}],[\"basic\",{\"0\":{\"10\":1},\"1\":{\"0\":1}}],[\"back\",{\"1\":{\"23\":1}}],[\"become\",{\"1\":{\"39\":1}}],[\"been\",{\"1\":{\"34\":1,\"42\":1}}],[\"before\",{\"1\":{\"32\":1}}],[\"being\",{\"1\":{\"26\":1,\"35\":1}}],[\"between\",{\"1\":{\"26\":1,\"39\":1}}],[\"beginning\",{\"0\":{\"23\":1}}],[\"belongs\",{\"1\":{\"22\":1}}],[\"be\",{\"1\":{\"12\":1,\"15\":1,\"18\":1,\"23\":2,\"25\":2,\"26\":2,\"30\":1,\"31\":1,\"32\":2,\"34\":3,\"36\":1,\"39\":1,\"42\":2}}],[\"byte\",{\"1\":{\"42\":1}}],[\"by\",{\"1\":{\"1\":1,\"8\":1,\"25\":1,\"26\":1,\"28\":1,\"30\":2,\"32\":2,\"42\":2}}],[\"way\",{\"1\":{\"42\":1}}],[\"wants\",{\"1\":{\"42\":1}}],[\"was\",{\"1\":{\"26\":1}}],[\"would\",{\"1\":{\"40\":1}}],[\"words\",{\"1\":{\"13\":1,\"14\":1}}],[\"world\",{\"1\":{\"8\":1}}],[\"writeline\",{\"1\":{\"36\":1,\"40\":4,\"42\":1}}],[\"write\",{\"1\":{\"36\":1,\"40\":1}}],[\"written\",{\"1\":{\"23\":1}}],[\"writing\",{\"1\":{\"0\":1,\"23\":1}}],[\"will\",{\"1\":{\"23\":3,\"27\":1,\"28\":1}}],[\"with\",{\"1\":{\"0\":3,\"23\":1,\"25\":2,\"26\":1,\"29\":2,\"31\":1,\"36\":1,\"39\":1}}],[\"w\",{\"1\":{\"9\":1}}],[\"wcs\",{\"1\":{\"8\":1}}],[\"which\",{\"1\":{\"32\":1,\"36\":1,\"42\":1}}],[\"whether\",{\"1\":{\"34\":1}}],[\"when\",{\"1\":{\"18\":1,\"26\":1,\"31\":1,\"35\":1,\"40\":1}}],[\"where\",{\"1\":{\"7\":2,\"12\":1,\"13\":1,\"14\":1,\"26\":1,\"34\":2,\"36\":1,\"39\":1,\"40\":4,\"42\":5}}],[\"why\",{\"0\":{\"9\":1,\"34\":1},\"1\":{\"33\":1}}],[\"what\",{\"0\":{\"25\":1,\"35\":1},\"1\":{\"7\":3,\"26\":1,\"33\":1,\"40\":2}}],[\"whose\",{\"1\":{\"32\":1}}],[\"who\",{\"1\":{\"0\":1,\"26\":1}}],[\"western\",{\"1\":{\"26\":1}}],[\"we\",{\"0\":{\"9\":1,\"34\":1},\"1\":{\"1\":1,\"9\":1,\"18\":1,\"26\":4,\"27\":5,\"28\":3,\"29\":1,\"31\":1,\"32\":4,\"33\":2,\"34\":3,\"36\":4,\"39\":1,\"40\":3,\"42\":1}}],[\"welcome\",{\"1\":{\"1\":1}}],[\"well\",{\"1\":{\"0\":1,\"26\":1}}],[\"language\",{\"1\":{\"35\":1,\"40\":1}}],[\"languages\",{\"1\":{\"0\":2}}],[\"latest\",{\"1\":{\"35\":1}}],[\"later\",{\"1\":{\"26\":1}}],[\"launched\",{\"1\":{\"34\":1}}],[\"larger\",{\"1\":{\"25\":1,\"29\":2,\"30\":1}}],[\"location\",{\"1\":{\"39\":1}}],[\"look\",{\"0\":{\"39\":1},\"1\":{\"26\":1,\"27\":1,\"36\":1}}],[\"lookup\",{\"1\":{\"22\":1}}],[\"lot\",{\"1\":{\"26\":1}}],[\"love2d\",{\"1\":{\"0\":1}}],[\"learn\",{\"1\":{\"40\":1}}],[\"let\",{\"0\":{\"39\":1,\"40\":1},\"1\":{\"34\":1,\"36\":1,\"40\":1}}],[\"leonardo\",{\"1\":{\"26\":1}}],[\"left\",{\"1\":{\"18\":1,\"42\":4}}],[\"length\",{\"0\":{\"17\":1},\"1\":{\"17\":1}}],[\"leeds\",{\"1\":{\"0\":1}}],[\"liber\",{\"1\":{\"26\":1}}],[\"limit\",{\"1\":{\"18\":2}}],[\"light\",{\"1\":{\"7\":1}}],[\"like\",{\"1\":{\"0\":2,\"26\":1,\"29\":1,\"34\":2,\"40\":2,\"42\":1}}],[\"lua\",{\"1\":{\"0\":1}}],[\"t3\",{\"1\":{\"42\":2}}],[\"tself\",{\"1\":{\"42\":12}}],[\"tself>\",{\"1\":{\"42\":11}}],[\"t2\",{\"1\":{\"40\":8,\"42\":2}}],[\"t2>\",{\"1\":{\"40\":1}}],[\"t1\",{\"1\":{\"40\":8,\"42\":2}}],[\"t>\",{\"1\":{\"39\":1,\"42\":2}}],[\"types\",{\"1\":{\"40\":1,\"42\":2}}],[\"type\",{\"1\":{\"34\":2,\"36\":3,\"39\":1,\"42\":1}}],[\"tips\",{\"1\":{\"26\":1,\"30\":1}}],[\"times\",{\"1\":{\"25\":1,\"26\":1}}],[\"time\",{\"1\":{\"23\":1,\"26\":1,\"27\":1,\"30\":1,\"34\":1,\"35\":1}}],[\"t\",{\"1\":{\"23\":1,\"34\":14,\"35\":1,\"36\":4,\"39\":6,\"42\":7}}],[\"take\",{\"1\":{\"42\":2}}],[\"taste\",{\"1\":{\"35\":1}}],[\"talk\",{\"1\":{\"33\":1}}],[\"tabulation\",{\"0\":{\"28\":1},\"1\":{\"26\":4,\"28\":3}}],[\"table\",{\"1\":{\"22\":1,\"26\":3,\"27\":4,\"29\":1,\"30\":1}}],[\"taylor\",{\"1\":{\"22\":1}}],[\"try\",{\"0\":{\"40\":1}}],[\"tree\",{\"1\":{\"26\":1}}],[\"triangles\",{\"1\":{\"18\":1}}],[\"transformation\",{\"1\":{\"9\":1}}],[\"transformations\",{\"0\":{\"4\":1},\"1\":{\"7\":1}}],[\"transmations\",{\"1\":{\"9\":1}}],[\"translation\",{\"1\":{\"9\":1}}],[\"transition\",{\"1\":{\"0\":1,\"30\":5}}],[\"test<deepinsourcecodebase\",{\"1\":{\"40\":1}}],[\"test<t1\",{\"1\":{\"40\":1}}],[\"test<t>\",{\"1\":{\"34\":1}}],[\"testing\",{\"1\":{\"36\":1,\"40\":2}}],[\"text\",{\"1\":{\"36\":4}}],[\"texture\",{\"0\":{\"15\":1},\"1\":{\"15\":2}}],[\"tencent\",{\"1\":{\"23\":1}}],[\"terrain\",{\"1\":{\"12\":1}}],[\"techniques\",{\"1\":{\"26\":2}}],[\"technique\",{\"1\":{\"26\":3,\"29\":1}}],[\"technical\",{\"1\":{\"0\":2}}],[\"technology\",{\"1\":{\"0\":1}}],[\"tostring\",{\"1\":{\"36\":1,\"42\":2}}],[\"top\",{\"1\":{\"26\":1}}],[\"topics\",{\"1\":{\"0\":1}}],[\"to\",{\"0\":{\"32\":1,\"36\":1},\"1\":{\"0\":3,\"1\":1,\"7\":1,\"9\":1,\"11\":2,\"12\":1,\"15\":1,\"17\":1,\"22\":1,\"23\":4,\"24\":1,\"25\":5,\"26\":7,\"27\":3,\"28\":1,\"29\":4,\"30\":7,\"31\":1,\"32\":5,\"33\":2,\"34\":5,\"35\":1,\"36\":7,\"40\":2,\"42\":6}}],[\"those\",{\"1\":{\"25\":1,\"30\":1}}],[\"this\",{\"1\":{\"22\":1,\"23\":2,\"26\":2,\"29\":2,\"33\":1,\"36\":1,\"40\":2,\"42\":2}}],[\"that\",{\"1\":{\"18\":1,\"23\":1,\"25\":1,\"26\":4,\"27\":1,\"30\":2,\"31\":1,\"32\":2,\"34\":2,\"39\":4}}],[\"than\",{\"1\":{\"9\":1}}],[\"three\",{\"1\":{\"14\":1,\"42\":1}}],[\"threading\",{\"1\":{\"0\":1}}],[\"their\",{\"1\":{\"36\":1}}],[\"these\",{\"1\":{\"34\":1,\"42\":1}}],[\"they\",{\"1\":{\"26\":1}}],[\"them\",{\"1\":{\"25\":1,\"26\":1,\"36\":1}}],[\"theme\",{\"1\":{\"23\":1}}],[\"there\",{\"1\":{\"18\":1,\"29\":1}}],[\"then\",{\"1\":{\"18\":2,\"23\":1,\"25\":1,\"30\":1,\"32\":1,\"35\":1,\"36\":2,\"42\":2}}],[\"the\",{\"0\":{\"24\":1,\"32\":1,\"40\":1},\"1\":{\"0\":2,\"1\":1,\"7\":2,\"8\":6,\"9\":1,\"11\":3,\"15\":3,\"17\":1,\"18\":2,\"22\":1,\"23\":2,\"24\":3,\"25\":5,\"26\":30,\"27\":2,\"28\":2,\"29\":5,\"30\":12,\"31\":2,\"32\":5,\"34\":10,\"35\":7,\"36\":9,\"39\":8,\"40\":6,\"42\":12}}],[\"two\",{\"1\":{\"0\":1,\"13\":1,\"26\":3,\"29\":1,\"32\":1,\"40\":1,\"42\":1}}],[\"guess\",{\"1\":{\"40\":2}}],[\"generic\",{\"0\":{\"42\":1},\"1\":{\"42\":5}}],[\"generics\",{\"1\":{\"34\":1}}],[\"generally\",{\"1\":{\"27\":1}}],[\"general\",{\"1\":{\"26\":1}}],[\"generator\",{\"1\":{\"23\":1}}],[\"github\",{\"1\":{\"23\":1}}],[\"given\",{\"1\":{\"18\":1}}],[\"gradient\",{\"0\":{\"21\":1}}],[\"graphics\",{\"1\":{\"0\":2}}],[\"going\",{\"1\":{\"33\":1}}],[\"gone\",{\"1\":{\"27\":1}}],[\"goes\",{\"1\":{\"26\":1}}],[\"goldminer\",{\"0\":{\"3\":1}}],[\"godot\",{\"1\":{\"0\":1}}],[\"gb\",{\"0\":{\"2\":1}}],[\"gallery\",{\"0\":{\"1\":1}}],[\"games\",{\"0\":{\"1\":1},\"1\":{\"0\":2,\"1\":1}}],[\"game\",{\"1\":{\"0\":6,\"1\":1}}],[\"csharp\",{\"1\":{\"40\":1}}],[\"cil\",{\"1\":{\"39\":2}}],[\"circles\",{\"1\":{\"18\":1}}],[\"ctor\",{\"1\":{\"39\":1}}],[\"c658\",{\"1\":{\"39\":1}}],[\"custom\",{\"1\":{\"39\":1}}],[\"culture=neutral\",{\"1\":{\"39\":1}}],[\"current\",{\"1\":{\"32\":1}}],[\"currently\",{\"1\":{\"0\":1}}],[\"curr\",{\"1\":{\"29\":6}}],[\"curve\",{\"0\":{\"13\":1,\"14\":1},\"1\":{\"16\":1,\"17\":1}}],[\"creates\",{\"1\":{\"36\":1}}],[\"create\",{\"1\":{\"32\":2}}],[\"creating\",{\"1\":{\"31\":1}}],[\"cross\",{\"0\":{\"6\":1}}],[\"ch\",{\"1\":{\"36\":3}}],[\"char\",{\"1\":{\"36\":1}}],[\"change\",{\"1\":{\"40\":1}}],[\"changes\",{\"1\":{\"30\":1}}],[\"changing\",{\"1\":{\"8\":1}}],[\"choice\",{\"1\":{\"26\":1}}],[\"chose\",{\"1\":{\"23\":1}}],[\"chinese\",{\"1\":{\"23\":1}}],[\"class\",{\"1\":{\"39\":4,\"40\":4}}],[\"classic\",{\"0\":{\"26\":1}}],[\"cloud\",{\"1\":{\"23\":2}}],[\"clipping\",{\"1\":{\"8\":1}}],[\"ccs\",{\"1\":{\"8\":1}}],[\"cache\",{\"1\":{\"27\":1}}],[\"called\",{\"1\":{\"29\":1,\"42\":1}}],[\"call\",{\"1\":{\"26\":1,\"34\":1,\"42\":1}}],[\"calculation\",{\"1\":{\"29\":1}}],[\"calculations\",{\"1\":{\"26\":1}}],[\"calculating\",{\"1\":{\"26\":1}}],[\"calculated\",{\"1\":{\"27\":1}}],[\"calculate\",{\"1\":{\"17\":1,\"26\":1,\"27\":1}}],[\"calculus\",{\"0\":{\"19\":1,\"22\":1}}],[\"cases\",{\"1\":{\"30\":2,\"34\":1}}],[\"case\",{\"1\":{\"18\":1,\"29\":1,\"36\":1}}],[\"cartesian\",{\"1\":{\"9\":1}}],[\"camera\",{\"1\":{\"7\":2}}],[\"catmario\",{\"0\":{\"2\":1}}],[\"cannot\",{\"1\":{\"34\":1}}],[\"can\",{\"1\":{\"1\":1,\"12\":1,\"15\":1,\"18\":1,\"25\":2,\"26\":4,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"34\":5,\"35\":1,\"36\":2,\"39\":2,\"42\":4}}],[\"capable\",{\"1\":{\"0\":1}}],[\"covers\",{\"1\":{\"40\":1}}],[\"codes\",{\"0\":{\"39\":1},\"1\":{\"36\":1,\"39\":1,\"40\":1}}],[\"code\",{\"0\":{\"38\":1},\"1\":{\"34\":2,\"40\":1}}],[\"corresponding\",{\"1\":{\"33\":1,\"35\":1}}],[\"collectionname\",{\"1\":{\"32\":2}}],[\"collection\",{\"1\":{\"32\":4}}],[\"color\",{\"1\":{\"7\":1}}],[\"course\",{\"1\":{\"42\":1}}],[\"count\",{\"1\":{\"27\":1}}],[\"could\",{\"1\":{\"27\":1,\"28\":1,\"34\":1}}],[\"com\",{\"1\":{\"40\":1}}],[\"community\",{\"1\":{\"34\":1}}],[\"common\",{\"1\":{\"22\":1}}],[\"commonly\",{\"1\":{\"12\":1}}],[\"combining\",{\"1\":{\"30\":1}}],[\"composed\",{\"1\":{\"36\":1}}],[\"composing\",{\"1\":{\"0\":1}}],[\"compile\",{\"1\":{\"34\":1}}],[\"compilerservices\",{\"1\":{\"39\":1}}],[\"compiler\",{\"1\":{\"34\":1}}],[\"compression\",{\"1\":{\"29\":2}}],[\"computed\",{\"1\":{\"26\":1}}],[\"computation\",{\"1\":{\"22\":1}}],[\"complexity\",{\"1\":{\"26\":1,\"29\":1}}],[\"complex\",{\"1\":{\"25\":1,\"29\":1}}],[\"complicated\",{\"1\":{\"24\":1}}],[\"comp5930m\",{\"1\":{\"22\":1}}],[\"console\",{\"1\":{\"36\":1,\"40\":4,\"42\":1}}],[\"const\",{\"1\":{\"36\":1}}],[\"constraint\",{\"1\":{\"39\":1}}],[\"constraints\",{\"1\":{\"36\":1,\"42\":1}}],[\"constrain\",{\"1\":{\"36\":1}}],[\"constructed\",{\"1\":{\"25\":1,\"30\":1}}],[\"consider\",{\"1\":{\"23\":1}}],[\"containing\",{\"1\":{\"36\":1}}],[\"context\",{\"1\":{\"30\":1}}],[\"contents\",{\"1\":{\"23\":1}}],[\"content\",{\"1\":{\"22\":1}}],[\"continuous\",{\"1\":{\"18\":1}}],[\"continuity\",{\"0\":{\"18\":1},\"1\":{\"18\":1}}],[\"concepts\",{\"0\":{\"10\":1},\"1\":{\"24\":1}}],[\"connect\",{\"1\":{\"0\":1}}],[\"cost\",{\"1\":{\"9\":1,\"23\":1}}],[\"coordinate\",{\"0\":{\"8\":1},\"1\":{\"8\":7,\"13\":1,\"14\":1}}],[\"coordinates\",{\"0\":{\"9\":1},\"1\":{\"7\":1,\"9\":2}}],[\"c++\",{\"1\":{\"0\":1,\"27\":1,\"28\":1}}],[\"c\",{\"0\":{\"33\":1},\"1\":{\"0\":2,\"32\":3,\"33\":1,\"35\":1}}],[\"should\",{\"1\":{\"31\":1,\"32\":1}}],[\"shading\",{\"1\":{\"7\":1}}],[\"saving\",{\"1\":{\"27\":1,\"28\":1}}],[\"save\",{\"1\":{\"23\":1}}],[\"same\",{\"1\":{\"26\":1}}],[\"skill\",{\"1\":{\"23\":1}}],[\"slowly\",{\"1\":{\"23\":1}}],[\"small\",{\"1\":{\"23\":1}}],[\"smaller\",{\"1\":{\"0\":1,\"25\":2,\"29\":1,\"30\":1}}],[\"screen\",{\"1\":{\"36\":1}}],[\"scientific\",{\"1\":{\"22\":1}}],[\"scene\",{\"1\":{\"7\":1}}],[\"space\",{\"1\":{\"29\":1}}],[\"spatial\",{\"1\":{\"15\":1}}],[\"specific\",{\"1\":{\"26\":1,\"39\":1}}],[\"specializing\",{\"1\":{\"0\":1}}],[\"speed\",{\"1\":{\"26\":1}}],[\"s\",{\"0\":{\"39\":1,\"40\":1},\"1\":{\"15\":1,\"26\":2,\"32\":1,\"34\":2,\"40\":2}}],[\"system\",{\"1\":{\"8\":5,\"30\":1,\"39\":1}}],[\"systems\",{\"0\":{\"8\":1},\"1\":{\"8\":2}}],[\"selections\",{\"1\":{\"30\":1}}],[\"sequence\",{\"1\":{\"26\":6,\"32\":5,\"39\":1}}],[\"sequences\",{\"1\":{\"9\":1}}],[\"section\",{\"1\":{\"22\":1}}],[\"series\",{\"1\":{\"22\":1,\"26\":1}}],[\"servers\",{\"1\":{\"23\":1}}],[\"server\",{\"1\":{\"0\":2}}],[\"sensing\",{\"1\":{\"7\":1}}],[\"see\",{\"1\":{\"7\":1}}],[\"sdl2\",{\"1\":{\"0\":1}}],[\"so\",{\"1\":{\"26\":2,\"34\":2,\"36\":1}}],[\"solution\",{\"1\":{\"25\":2,\"30\":2}}],[\"solutions\",{\"1\":{\"25\":2,\"26\":1,\"30\":2}}],[\"solved\",{\"1\":{\"26\":1}}],[\"solve\",{\"0\":{\"32\":1},\"1\":{\"24\":1,\"25\":1,\"27\":1,\"29\":1,\"30\":1,\"32\":1}}],[\"solving\",{\"0\":{\"24\":1},\"1\":{\"25\":2,\"28\":1}}],[\"soon\",{\"1\":{\"23\":1}}],[\"somestaticabstractmethodderived\",{\"1\":{\"40\":2}}],[\"somestaticabstractmethodbase\",{\"1\":{\"40\":4}}],[\"somestaticabstractmethod\",{\"1\":{\"39\":3,\"40\":5}}],[\"somestaticmethod\",{\"1\":{\"34\":2}}],[\"somemethodderived\",{\"1\":{\"40\":3}}],[\"somemethodbase\",{\"1\":{\"40\":3}}],[\"somemethod\",{\"1\":{\"39\":3,\"40\":5}}],[\"sometimes\",{\"1\":{\"31\":1}}],[\"some\",{\"1\":{\"0\":1,\"23\":1,\"32\":1,\"34\":1,\"36\":1,\"40\":1,\"42\":2}}],[\"source\",{\"1\":{\"0\":1}}],[\"suppose\",{\"1\":{\"39\":1}}],[\"supports\",{\"1\":{\"34\":1,\"35\":2}}],[\"support\",{\"0\":{\"42\":1},\"1\":{\"0\":1,\"42\":2}}],[\"sum\",{\"1\":{\"26\":1,\"29\":2}}],[\"subtraction\",{\"1\":{\"34\":1,\"42\":2}}],[\"subproblem\",{\"1\":{\"29\":1}}],[\"subproblems\",{\"1\":{\"25\":5,\"26\":3,\"29\":1,\"30\":3}}],[\"sub\",{\"1\":{\"28\":1}}],[\"substructure\",{\"1\":{\"25\":1}}],[\"subsequent\",{\"1\":{\"23\":2}}],[\"suitable\",{\"1\":{\"23\":1}}],[\"surface\",{\"1\":{\"15\":1,\"16\":1}}],[\"such\",{\"1\":{\"0\":1,\"18\":1,\"29\":1,\"34\":1,\"42\":1}}],[\"str++\",{\"1\":{\"36\":1}}],[\"str\",{\"1\":{\"36\":1}}],[\"struct\",{\"1\":{\"36\":1,\"42\":2}}],[\"structure\",{\"1\":{\"29\":2,\"36\":1}}],[\"string\",{\"1\":{\"36\":5,\"40\":1,\"42\":2}}],[\"store\",{\"1\":{\"29\":1}}],[\"storing\",{\"1\":{\"26\":2}}],[\"std\",{\"1\":{\"27\":2,\"28\":2}}],[\"states\",{\"1\":{\"30\":2}}],[\"state\",{\"1\":{\"29\":3,\"30\":6}}],[\"staticabstractinterfacemethods\",{\"1\":{\"39\":10}}],[\"static\",{\"0\":{\"33\":1},\"1\":{\"23\":1,\"33\":1,\"34\":5,\"35\":4,\"36\":2,\"39\":8,\"40\":5,\"42\":10}}],[\"starting\",{\"1\":{\"26\":1,\"39\":1}}],[\"starts\",{\"1\":{\"25\":1,\"31\":1}}],[\"stack\",{\"1\":{\"0\":1}}],[\"still\",{\"1\":{\"23\":1,\"35\":1}}],[\"student\",{\"1\":{\"23\":1}}],[\"studio\",{\"1\":{\"0\":2,\"35\":1}}],[\"steps\",{\"0\":{\"7\":1}}],[\"single\",{\"1\":{\"42\":1}}],[\"singing\",{\"1\":{\"0\":1}}],[\"simply\",{\"1\":{\"26\":1}}],[\"simple\",{\"1\":{\"24\":1,\"42\":1}}],[\"simpler\",{\"1\":{\"23\":1}}],[\"side\",{\"1\":{\"0\":1}}],[\"mvid\",{\"1\":{\"39\":1}}],[\"minvalue\",{\"1\":{\"42\":1}}],[\"minded\",{\"1\":{\"0\":1}}],[\"microsoft\",{\"1\":{\"34\":1,\"40\":1}}],[\"m\",{\"1\":{\"32\":3}}],[\"my\",{\"1\":{\"23\":2}}],[\"myself\",{\"1\":{\"1\":1}}],[\"mongodb\",{\"0\":{\"31\":1},\"1\":{\"31\":1}}],[\"money\",{\"1\":{\"23\":1}}],[\"most\",{\"1\":{\"23\":1,\"24\":1}}],[\"more\",{\"1\":{\"9\":1,\"18\":1,\"23\":2,\"29\":1,\"42\":1}}],[\"models\",{\"1\":{\"7\":1,\"32\":1}}],[\"model\",{\"1\":{\"7\":3,\"31\":1,\"32\":1}}],[\"maxvalue\",{\"1\":{\"42\":1}}],[\"make\",{\"1\":{\"29\":1}}],[\"managed\",{\"1\":{\"39\":2}}],[\"many\",{\"1\":{\"26\":1,\"36\":1,\"42\":1}}],[\"manifold\",{\"1\":{\"16\":3}}],[\"manifolds\",{\"0\":{\"16\":1}}],[\"math\",{\"0\":{\"42\":1},\"1\":{\"42\":2}}],[\"mathematical\",{\"1\":{\"30\":1,\"34\":2,\"42\":2}}],[\"mathematics\",{\"1\":{\"26\":1}}],[\"match\",{\"1\":{\"36\":1}}],[\"matrix\",{\"1\":{\"9\":3,\"29\":1}}],[\"matrices\",{\"1\":{\"8\":1}}],[\"mainly\",{\"1\":{\"42\":1}}],[\"main\",{\"1\":{\"24\":1,\"40\":2}}],[\"map<int\",{\"1\":{\"27\":1}}],[\"map\",{\"1\":{\"12\":2,\"27\":1}}],[\"maps\",{\"0\":{\"12\":1}}],[\"mapping\",{\"0\":{\"15\":1},\"1\":{\"11\":1,\"15\":1}}],[\"made\",{\"1\":{\"1\":1}}],[\"must\",{\"1\":{\"25\":1,\"39\":1}}],[\"music\",{\"1\":{\"0\":1}}],[\"mutual\",{\"1\":{\"0\":1}}],[\"multiplyandsubcustomstruct>\",{\"1\":{\"42\":2}}],[\"multiplyandsubcustomstruct\",{\"1\":{\"42\":15}}],[\"multiplyandsub\",{\"1\":{\"42\":5}}],[\"multiplyandsub<t>\",{\"1\":{\"42\":1}}],[\"multiplication\",{\"1\":{\"34\":1,\"42\":2}}],[\"multiple\",{\"0\":{\"19\":1},\"1\":{\"25\":1,\"26\":1}}],[\"multi\",{\"1\":{\"0\":1}}],[\"members\",{\"1\":{\"40\":1}}],[\"memo\",{\"1\":{\"27\":5}}],[\"memory\",{\"1\":{\"26\":1,\"29\":1}}],[\"memoization\",{\"0\":{\"27\":1},\"1\":{\"26\":4,\"27\":2}}],[\"mentioned\",{\"1\":{\"36\":1}}],[\"meets\",{\"1\":{\"42\":1}}],[\"meet\",{\"1\":{\"34\":1}}],[\"means\",{\"1\":{\"39\":1}}],[\"mean\",{\"1\":{\"26\":1}}],[\"meaning\",{\"1\":{\"25\":1}}],[\"method\",{\"1\":{\"25\":1,\"33\":1,\"34\":4,\"35\":3,\"39\":9,\"40\":2,\"42\":3}}],[\"methods\",{\"0\":{\"33\":1},\"1\":{\"22\":1,\"42\":4}}],[\"me\",{\"0\":{\"0\":1}}],[\"error\",{\"1\":{\"35\":1}}],[\"everyone\",{\"1\":{\"34\":1}}],[\"everytime\",{\"1\":{\"32\":1}}],[\"every\",{\"1\":{\"31\":1}}],[\"element\",{\"1\":{\"42\":2}}],[\"electronic\",{\"1\":{\"0\":1}}],[\"else\",{\"1\":{\"27\":1}}],[\"equation\",{\"1\":{\"26\":1,\"30\":7}}],[\"equal\",{\"1\":{\"18\":1}}],[\"european\",{\"1\":{\"26\":1}}],[\"efficient\",{\"1\":{\"9\":1}}],[\"efficiently\",{\"1\":{\"9\":1}}],[\"each\",{\"1\":{\"7\":1,\"12\":1,\"26\":1,\"36\":1}}],[\"example\",{\"1\":{\"27\":1,\"42\":2}}],[\"exists\",{\"1\":{\"18\":1}}],[\"exist\",{\"1\":{\"18\":1}}],[\"exchange\",{\"1\":{\"0\":1}}],[\"expectations\",{\"1\":{\"42\":1}}],[\"expect\",{\"1\":{\"40\":1}}],[\"experience\",{\"1\":{\"0\":1}}],[\"explanation\",{\"1\":{\"40\":1}}],[\"exploring\",{\"1\":{\"0\":1}}],[\"expansion\",{\"1\":{\"22\":1}}],[\"en\",{\"1\":{\"40\":1}}],[\"end\",{\"1\":{\"39\":3}}],[\"ends\",{\"1\":{\"7\":1}}],[\"english\",{\"1\":{\"23\":2}}],[\"engines\",{\"1\":{\"0\":1}}],[\"engineer\",{\"1\":{\"0\":1}}],[\"engine\",{\"1\":{\"0\":3}}],[\"enjoys\",{\"1\":{\"0\":1}}],[\"employed\",{\"1\":{\"0\":1}}],[\"pdb\",{\"1\":{\"39\":1}}],[\"publickeytoken=null\",{\"1\":{\"39\":1}}],[\"public\",{\"1\":{\"34\":4,\"36\":6,\"39\":5,\"40\":8,\"42\":12}}],[\"published\",{\"1\":{\"23\":1}}],[\"pisa\",{\"1\":{\"26\":1}}],[\"pixel\",{\"1\":{\"12\":1}}],[\"posts\",{\"0\":{\"43\":1,\"44\":1}}],[\"possible\",{\"1\":{\"29\":1,\"30\":1}}],[\"powerful\",{\"1\":{\"23\":1}}],[\"point\",{\"1\":{\"13\":1,\"14\":1,\"39\":1}}],[\"plan\",{\"1\":{\"23\":1}}],[\"playground\",{\"0\":{\"37\":1,\"41\":1}}],[\"play\",{\"1\":{\"1\":1}}],[\"page\",{\"1\":{\"23\":1}}],[\"pages\",{\"1\":{\"23\":1}}],[\"param\",{\"1\":{\"39\":1}}],[\"parameter\",{\"1\":{\"42\":1}}],[\"parameters\",{\"1\":{\"36\":2}}],[\"parametric\",{\"0\":{\"13\":1,\"14\":1}}],[\"partial\",{\"0\":{\"20\":1}}],[\"passion\",{\"1\":{\"0\":1}}],[\"perform\",{\"1\":{\"34\":1,\"42\":1}}],[\"performance\",{\"1\":{\"0\":1,\"26\":1}}],[\"perspective\",{\"1\":{\"9\":1}}],[\"pygame\",{\"1\":{\"0\":1}}],[\"python\",{\"1\":{\"0\":1}}],[\"print\",{\"1\":{\"36\":1}}],[\"private\",{\"1\":{\"36\":1}}],[\"primary\",{\"1\":{\"0\":1}}],[\"preview\",{\"1\":{\"35\":1}}],[\"previous\",{\"1\":{\"34\":2}}],[\"previously\",{\"1\":{\"0\":1,\"42\":1}}],[\"pre\",{\"1\":{\"26\":1,\"29\":4}}],[\"preceding\",{\"1\":{\"26\":1}}],[\"property\",{\"1\":{\"42\":1}}],[\"properties\",{\"1\":{\"25\":1,\"42\":1}}],[\"problem\",{\"0\":{\"26\":1,\"32\":1},\"1\":{\"25\":5,\"26\":1,\"27\":1,\"28\":1,\"30\":6,\"31\":1,\"32\":1}}],[\"problems\",{\"0\":{\"24\":1},\"1\":{\"24\":2,\"25\":1,\"28\":1,\"29\":2}}],[\"projection\",{\"1\":{\"7\":1}}],[\"process\",{\"1\":{\"7\":1}}],[\"product\",{\"0\":{\"5\":1,\"6\":1},\"1\":{\"5\":1}}],[\"products\",{\"1\":{\"0\":1}}],[\"provide\",{\"1\":{\"0\":1}}],[\"proficient\",{\"1\":{\"0\":1}}],[\"programming\",{\"0\":{\"25\":1},\"1\":{\"24\":1,\"25\":1,\"26\":2,\"29\":1,\"30\":1}}],[\"programmers\",{\"1\":{\"0\":1}}],[\"programmer\",{\"1\":{\"0\":1}}],[\"programs\",{\"1\":{\"0\":1}}],[\"program\",{\"1\":{\"0\":1,\"40\":1}}],[\"aaaaaaaaaa\",{\"1\":{\"36\":1}}],[\"aaaaaaaaa\",{\"1\":{\"36\":1}}],[\"aaaaaaaa\",{\"1\":{\"36\":1}}],[\"aaaaaaa\",{\"1\":{\"36\":1}}],[\"aaaaaa\",{\"1\":{\"36\":1}}],[\"aaaaa\",{\"1\":{\"36\":1}}],[\"aaaa\",{\"1\":{\"36\":1}}],[\"aaa\",{\"1\":{\"36\":1}}],[\"aa\",{\"1\":{\"36\":1}}],[\"according\",{\"1\":{\"36\":1}}],[\"actually\",{\"1\":{\"24\":1,\"40\":1}}],[\"actively\",{\"1\":{\"0\":1}}],[\"auto\",{\"1\":{\"39\":1}}],[\"autoincrementidmodel\",{\"1\":{\"32\":2}}],[\"autoincrementidcollection\",{\"1\":{\"32\":1}}],[\"automatically\",{\"0\":{\"31\":1},\"1\":{\"31\":1}}],[\"available\",{\"1\":{\"26\":1}}],[\"avoid\",{\"1\":{\"26\":1}}],[\"avoiding\",{\"1\":{\"26\":1}}],[\"amount\",{\"1\":{\"26\":1,\"29\":1}}],[\"after\",{\"1\":{\"26\":1,\"35\":1}}],[\"approach\",{\"1\":{\"25\":1}}],[\"apply\",{\"1\":{\"9\":1}}],[\"applying\",{\"1\":{\"8\":1}}],[\"applications\",{\"0\":{\"5\":1},\"1\":{\"5\":1}}],[\"added\",{\"1\":{\"36\":1}}],[\"add<t>\",{\"1\":{\"34\":1}}],[\"addition\",{\"1\":{\"34\":1,\"42\":2}}],[\"add\",{\"1\":{\"23\":1,\"40\":1}}],[\"args\",{\"1\":{\"40\":1}}],[\"article\",{\"1\":{\"33\":1}}],[\"articles\",{\"1\":{\"23\":1}}],[\"array\",{\"1\":{\"28\":1,\"29\":1}}],[\"arc\",{\"0\":{\"17\":1}}],[\"are\",{\"1\":{\"1\":1,\"18\":1,\"24\":1,\"25\":1,\"26\":2,\"27\":1,\"30\":2,\"33\":1}}],[\"above\",{\"1\":{\"36\":2,\"40\":1,\"42\":2}}],[\"about\",{\"0\":{\"0\":1},\"1\":{\"1\":1,\"9\":1,\"33\":1,\"34\":1}}],[\"abstract\",{\"0\":{\"33\":1},\"1\":{\"33\":1,\"34\":1,\"35\":2,\"36\":1,\"39\":8,\"40\":1,\"42\":7}}],[\"abaci\",{\"1\":{\"26\":1}}],[\"able\",{\"1\":{\"7\":1}}],[\"ansi\",{\"1\":{\"39\":1}}],[\"analysing\",{\"0\":{\"38\":1}}],[\"an\",{\"1\":{\"15\":1,\"26\":2,\"28\":1,\"29\":2,\"30\":1,\"31\":2,\"35\":1,\"36\":2,\"42\":1}}],[\"anything\",{\"1\":{\"1\":1}}],[\"and\",{\"0\":{\"4\":1},\"1\":{\"0\":9,\"9\":1,\"15\":1,\"18\":2,\"22\":1,\"23\":5,\"24\":1,\"25\":1,\"26\":6,\"29\":2,\"30\":4,\"31\":1,\"32\":2,\"33\":1,\"34\":3,\"35\":2,\"36\":2,\"39\":2,\"40\":2,\"42\":8}}],[\"algorithm\",{\"0\":{\"24\":1},\"1\":{\"24\":1,\"26\":2,\"29\":1}}],[\"algorithms\",{\"1\":{\"7\":1,\"24\":1,\"26\":2}}],[\"alibaba\",{\"1\":{\"23\":1}}],[\"allow\",{\"1\":{\"34\":1}}],[\"allows\",{\"1\":{\"26\":1,\"36\":1}}],[\"all\",{\"1\":{\"1\":1,\"26\":1,\"27\":1,\"30\":3,\"42\":1}}],[\"also\",{\"1\":{\"0\":1,\"18\":1,\"28\":1,\"42\":2}}],[\"assembly\",{\"1\":{\"39\":1}}],[\"aspect\",{\"0\":{\"38\":1}}],[\"aspiring\",{\"1\":{\"0\":1}}],[\"as\",{\"1\":{\"0\":3,\"12\":1,\"15\":1,\"18\":1,\"23\":1,\"26\":2,\"29\":1,\"34\":2,\"42\":3}}],[\"at\",{\"0\":{\"39\":1},\"1\":{\"0\":2,\"18\":2,\"34\":1,\"36\":1}}],[\"a\",{\"0\":{\"26\":1},\"1\":{\"0\":7,\"11\":1,\"12\":4,\"13\":1,\"14\":1,\"15\":1,\"16\":3,\"17\":1,\"18\":1,\"23\":1,\"25\":6,\"26\":6,\"27\":3,\"28\":1,\"29\":8,\"30\":8,\"31\":1,\"32\":6,\"33\":1,\"34\":3,\"35\":1,\"36\":6,\"39\":3,\"42\":4}}]],\"version\":2},\"/zh/\":{\"documentCount\":63,\"nextId\":63,\"documentIds\":{\"0\":\"v-858cfdd6\",\"1\":\"v-349c193c\",\"2\":\"v-349c193c#catmario-gb\",\"3\":\"v-349c193c#goldminer-rebirth\",\"4\":\"v-d6b5934a\",\"5\":\"v-d6b5934a#向量点乘的应用\",\"6\":\"v-d6b5934a#向量的叉乘\",\"7\":\"v-d6b5934a#渲染步骤\",\"8\":\"v-d6b5934a#坐标系\",\"9\":\"v-d6b5934a#为什么我们需要齐次坐标\",\"10\":\"v-bac9ffc8\",\"11\":\"v-bac9ffc8#函数-functions\",\"12\":\"v-bac9ffc8#高度图-height-maps\",\"13\":\"v-bac9ffc8#_2d-参数曲线-2d-parametric-curve\",\"14\":\"v-bac9ffc8#_3d-参数曲线-3d-parametric-curve\",\"15\":\"v-bac9ffc8#纹理映射-texture-mapping\",\"16\":\"v-bac9ffc8#流形-manifolds\",\"17\":\"v-bac9ffc8#弧长积分-arc-length-integral\",\"18\":\"v-bac9ffc8#连续性-continuity\",\"19\":\"v-bac9ffc8#多元函数微积分-calculus-of-multiple-variables\",\"20\":\"v-bac9ffc8#偏导数-partial-derivatives\",\"21\":\"v-bac9ffc8#梯度向量-gradient-vector\",\"22\":\"v-bac9ffc8#数值微积分-numerical-calculus\",\"23\":\"v-6fbaf144\",\"24\":\"v-1870b220\",\"25\":\"v-1870b220#我与-gb-gbc-游戏开发的故事\",\"26\":\"v-1870b220#开启-gb-gbc-的开发之旅吧\",\"27\":\"v-ed635ef4\",\"28\":\"v-ed635ef4#什么是动态规划-dp\",\"29\":\"v-ed635ef4#一个经典的问题-斐波那契\",\"30\":\"v-ed635ef4#使用备忘录\",\"31\":\"v-ed635ef4#使用制表\",\"32\":\"v-ed635ef4#可选的其他改进\",\"33\":\"v-ed635ef4#框架\",\"34\":\"v-2f68f39d\",\"35\":\"v-2f68f39d#怎么解决这个问题\",\"36\":\"v-99eba95a\",\"37\":\"v-99eba95a#为什么要有静态抽象接口方法\",\"38\":\"v-99eba95a#什么是静态抽象接口方法\",\"39\":\"v-99eba95a#怎么样使用静态抽象接口方法\",\"40\":\"v-99eba95a#playground\",\"41\":\"v-99eba95a#从代码角度分析\",\"42\":\"v-99eba95a#看看-il\",\"43\":\"v-99eba95a#试一试继承关系\",\"44\":\"v-99eba95a#playground-1\",\"45\":\"v-99eba95a#net-如何支持泛型数学\",\"46\":\"v-293fc33c\",\"47\":\"v-12ae6e98\",\"48\":\"v-12ae6e98#下载-gbdk\",\"49\":\"v-12ae6e98#文件结构介绍\",\"50\":\"v-12ae6e98#移动-gbdk-文件夹-并添加相关的环境变量\",\"51\":\"v-12ae6e98#准备好为-gbdk-而修正的-gbtd-与-gbmb\",\"52\":\"v-12ae6e98#准备好模拟器-sameboy\",\"53\":\"v-12ae6e98#hello-world\",\"54\":\"v-12ae6e98#编写源码\",\"55\":\"v-12ae6e98#命令行编译\",\"56\":\"v-12ae6e98#用-sameboy-打开-看看效果吧\",\"57\":\"v-9198ae22\",\"58\":\"v-9198ae22#gbtd-简介\",\"59\":\"v-9198ae22#绘制第一个简单的精灵\",\"60\":\"v-9198ae22#导出绘制的精灵\",\"61\":\"v-9198ae22#开始编程吧\",\"62\":\"v-9198ae22#使用-visual-studio-code-makefile-进行项目搭建\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,39],\"1\":[1,4],\"2\":[2],\"3\":[2],\"4\":[1],\"5\":[1,1],\"6\":[1],\"7\":[1,17],\"8\":[1,22],\"9\":[2,16],\"10\":[1],\"11\":[3,4],\"12\":[4,8],\"13\":[5,6],\"14\":[5,7],\"15\":[4,10],\"16\":[3,11],\"17\":[5,2],\"18\":[3,22],\"19\":[6],\"20\":[4],\"21\":[4],\"22\":[4,10],\"23\":[1,25],\"24\":[4,11],\"25\":[4,26],\"26\":[4,26],\"27\":[3,5],\"28\":[3,16],\"29\":[2,68],\"30\":[1,43],\"31\":[1,31],\"32\":[1,37],\"33\":[1,35],\"34\":[4,16],\"35\":[1,27],\"36\":[4,12],\"37\":[1,37],\"38\":[1,28],\"39\":[1,68],\"40\":[1],\"41\":[1],\"42\":[2,89],\"43\":[1,74],\"44\":[1],\"45\":[4,146],\"46\":[2,40],\"47\":[2,24],\"48\":[2,8],\"49\":[1,9],\"50\":[4,26],\"51\":[6,95],\"52\":[2,29],\"53\":[3,7],\"54\":[1,13],\"55\":[1,22],\"56\":[4,33],\"57\":[3,39],\"58\":[2,35],\"59\":[1,97],\"60\":[1,50],\"61\":[2],\"62\":[7,182]},\"averageFieldLength\":[2.4603174603174605,30.87342647944999],\"storedFields\":{\"0\":{\"h\":\"关于我\",\"t\":[\"一名游戏开发者，喜欢电子产品，爱好声乐与编曲。\",\"曾就职于紫龙游戏旗下游戏工作室 BlackJack Studio，服务端方向，目前正在利兹大学研修图形学与游戏引擎相关内容。\",\"熟悉的语言是 C#、C/C++、Java、Python，Lua，其他语言则可以熟练编写 Hello World 程序。比较熟悉 dotnet 相关技术栈，具有两年的多线程和高性能服务器开发经验。未来想转行成为一名游戏引擎开发工程师或者图形程序，为游戏提供强大的技术支持。\",\"熟悉的游戏引擎主要是 Unity，正在研究 Unreal 和 Godot 以及其他开源引擎。其他小框架例如 love2d、pygame、SDL2 也略知一二。\",\"希望能有志同道合的程序员、游戏开发者能够互相交流技术。\"]},\"1\":{\"h\":\"游戏画廊\",\"t\":[\"以下游戏均为本人自制的游戏，欢迎大家游玩体验，也可以交流开发相关的内容。\"]},\"2\":{\"h\":\"CatMario-GB\"},\"3\":{\"h\":\"GoldMiner-Rebirth\"},\"4\":{\"h\":\"渲染和变换\"},\"5\":{\"h\":\"向量点乘的应用\",\"t\":[\"向量点乘的应用\"]},\"6\":{\"h\":\"向量的叉乘\"},\"7\":{\"h\":\"渲染步骤\",\"t\":[\"描述我们的场景：每个物体的位置。 \",\"变换\",\"齐次坐标\",\"四元数\",\"对我们的摄像机建模：它能看到什么？ \",\"摄像机模型\",\"对感知过程进行建模：什么东西最终出现在哪里？ \",\"交点/投影：不同的渲染算法\",\"对光/胶片交互进行建模：它是什么颜色？ \",\"着色\"]},\"8\":{\"h\":\"坐标系\",\"t\":[\"OCS(Object Coordinate System) 是对象坐标系。\",\"WCS(World Coordinate System) 是世界坐标系。\",\"VCS(View Coordinate System) 是视图坐标系。\",\"CCS(Clipping Coordinate System) 是裁剪坐标系。\",\"NDCS(Normalized DCS) 是标准化设备坐标系。\",\"DCS(Device Coordinate System) 是设备坐标系。\",\"坐标系\",\"通过应用矩阵来改变坐标系\"]},\"9\":{\"h\":\"为什么我们需要齐次坐标?\",\"t\":[\"我们需要:\",\"以矩阵形式表示平移： \",\"平移矩阵形式\",\"高效地应用一系列变换： \",\"变换序列的有效应用\",\"以矩阵形式表示透视： \",\"透视矩阵形式\",\"关于变换的成本，使用齐次坐标（x, y, z, w）比使用笛卡尔坐标（x, y, z）更为高效。\",\"齐次矩阵\"]},\"10\":{\"h\":\"基础概念\"},\"11\":{\"h\":\"函数 (Functions)\",\"t\":[\"作用域到值域的一对一映射关系：\",\"提示\",\" 代表一维实数域。\"]},\"12\":{\"h\":\"高度图 (Height Maps)\",\"t\":[\"高度图可以描述为：\",\"高度图是一个 2D 图，每个像素记录了一个高度值。通常可以用高度图来描述地形 (Terrain)。\"]},\"13\":{\"h\":\"2D 参数曲线 (2D Parametric Curve)\",\"t\":[\"也就是： 其中 是一个二维坐标点 (x, y)。\"]},\"14\":{\"h\":\"3D 参数曲线 (3D Parametric Curve)\",\"t\":[\"也就是： 其中 是一个三维坐标点 (x, y, z)。\"]},\"15\":{\"h\":\"纹理映射 (Texture Mapping)\",\"t\":[\"把纹理映射到物体表面的关系可以描述为：\",\"其中 表示纹理域 (u, v)， 表示空间域 (x, y, z)。\"]},\"16\":{\"h\":\"流形 (Manifolds)\",\"t\":[\"1-流形：一条曲线 (Curve)\",\"2-流形：一个表面 (Surface)\",\"3-流形：一个体 (Volume)\"]},\"17\":{\"h\":\"弧长积分 (Arc-length Integral)\",\"t\":[\"用于计算曲线的长度：\"]},\"18\":{\"h\":\"连续性 (Continuity)\",\"t\":[\"当函数在 时，左极限和右极限存在且相等，则 在 处连续，又称为 连续。\",\"或者更正式一点：\",\"对于给定的 , 存在 ，如果 ，则 。\",\"对于 2D 情况，我们使用近邻 (Neighbourhoods)。近邻可以用三角形、矩形、圆形来描述。\",\"近邻 (Neighbourhoods)\"]},\"19\":{\"h\":\"多元函数微积分 (Calculus of Multiple Variables)\"},\"20\":{\"h\":\"偏导数 (Partial Derivatives)\"},\"21\":{\"h\":\"梯度向量 (Gradient Vector)\"},\"22\":{\"h\":\"数值微积分 (Numerical Calculus)\",\"t\":[\"常用数值方法：\",\"泰勒级数与展开\",\"数值积分\",\"Lookup Table\",\"这一部分属于 科学计算(COMP5930M) 的内容。\"]},\"23\":{\"h\":\"新的开始\",\"t\":[\"阿里云、腾讯云的学生优惠马上就都用完了，后续服务器的费用还是不小的。为了节约，我打算还是用回 GitHub Pages。这次，我并不打算使用 Hexo，而是考虑使用具有 Vue 特性的更强大的静态页面生成器：VuePress。我选择 Hope 作为主题，然后慢慢加入一些内容进来。希望这个博客更简约、更清爽，更适合阅读。\",\"为了提高我的英文写作能力，我决定，后续发布的大多数文章都会有中英两个版本。\"]},\"24\":{\"h\":\"GB/GBC 游戏开发：简介\",\"t\":[\"前言\",\"任天堂 GameBoy 曾是风靡全球的掌机，不过很可惜，我小时候并没有接触过它。当我长大后了解它以后，对它产生了浓厚的兴趣。我希望我可以开发一些可以在 GameBoy 上运行的游戏。\"]},\"25\":{\"h\":\"我与 GB/GBC 游戏开发的故事\",\"t\":[\"2018 年，我了解到 GBDK 这个开发工具，并利用它，和我当时已掌握的 C 语言，写过一些小游戏和 DEMO。不过那些都是半成品，就不打算展示了。\",\"2020 年，我了解到 GB-Studio 这个让人人都能进行 GB/GBC 游戏开发的神奇工具。你并不需要编程相关的知识就可以使用它开始进行游戏创作。\",\"2021 年，疫情期间我的创作欲比较强烈，成功使用 GB-Studio 制作了一款属于 GBC 的猫里奥：传送门\"]},\"26\":{\"h\":\"开启 GB/GBC 的开发之旅吧\",\"t\":[\"现在，我想分享一些 GB/GBC 游戏开发相关的知识，给大家带来现代的 GB/GBC 游戏开发教程系列。\",\"对于开发工具，我打算先从比较硬核的 GBDK 开始，毕竟 GB-Studio 上手比较简单，可以放后面讲。\",\"我并不打算先讲 GB/GBC 的硬件原理，这样过于枯燥。我会在讲开发细节的时候，介绍 GB/GBC 某个硬件模块的参数和设置，在实现效果的前提下，解释原理。\",\"接下来你可以选择的教程：\",\"使用 GBDK 开发\"]},\"27\":{\"h\":\"解决 DP 问题的算法框架\",\"t\":[\"动态规划问题在算法中属于复杂的问题. 然而，当你理解它的关键概念和算法框架后，解决它实际上是很简单的。\"]},\"28\":{\"h\":\"什么是动态规划 (DP) ?\",\"t\":[\"动态规划（DP）是一种通过将复杂问题分解为更小的子问题从而解决它们的方法。这是一种自下而上的方法，这意味着它从解决较小的子问题开始，然后使用这些子问题的结果去得到更大问题的结果。\",\"要解决 DP 问题，问题必须具有以下属性：\",\"1.最优子结构：问题的最优解可以从其子问题的最优解得到。\",\"2.重叠的子问题：问题可以分解为多次重复使用的子问题。\"]},\"29\":{\"h\":\"一个经典的问题 : 斐波那契\",\"t\":[\"举个例子，当我们计算斐波那契数列的时候，我们可以使用 DP。\",\"提示\",\"斐波那契数列是一系列数字，其中每个数字都是前两个数字的总和，从0和1开始。顺序如下：0、1、1、2、3、5、8、13、21、34等。该序列以比萨的莱昂纳多命名，他也被称为斐波那契。1202年，他在《Liber Abaci》一书中介绍了西欧数学的顺序。\",\"一般而言，我们通常使用递归函数来计算斐波那契数列，就像下面这样：\",\"int Fibonacci(int n) { if (n == 0) { return 0; } if (n == 1 || n == 2) { return 1; } return Fibonacci(n - 1) + Fibonacci(n - 2); } \",\"我们使用的技术并非 DP，而只是递归。\",\"函数调用树存在多个节点，但是，多数节点是重复的。\",\"我有一个公式：\",\"DP = 递归(Recursion) + 备忘录(Memoization) 或者 制表(Tabulation) + 可选的其他改进\",\"这是什么意思？\",\"其实，备忘录和制表是用于提高动态规划算法性能的两种技术。\",\"备忘录是一种技术，涉及将中间计算的结果存储在表格中，以便以后可以重复使用。这可以通过避免多次重新计算相同的子问题，帮助降低算法的整体时间复杂性。它是自上而下的。\",\"另一方面，制表是一种涉及将所有子问题最终结果存储在表中的技术。这允许算法避免将解决方案重新计算到子问题，只需在表中查找预计算的结果。它是自下而上的。\",\"备忘录和制表都可以用来加快动态规划算法。这两种技术之间的选择通常取决于正在解决的具体问题和可用内存量。\"]},\"30\":{\"h\":\"使用备忘录\",\"t\":[\"为了使用备忘录，我们可以定义一个查找表 (Look-up table) 或者 缓存表 (Cache table) 去保存已经计算过的结果。我们通常使用哈希表去定义该结构。\",\"在 C++ 中，我们将使用 std::unordered_map。\",\"举个例子，下面我们使用备忘录来解决斐波那契问题：\",\"std::unordered_map<int, int> memo; int Fibonacci(int n) { if (n == 0) { return 0; } if (n == 1 || n == 2) { return 1; } if (memo.count(n) > 0) { return memo[n]; } else { memo[n] = Fibonacci(n - 1) + Fibonacci(n - 2); } return memo[n]; } \",\"现在，所有重复的节点都不存在了，我们只需要计算 Fibonacci(i) 一次。\"]},\"31\":{\"h\":\"使用制表\",\"t\":[\"我们也可以使用制表来解决这个问题。要使用制表，我们可以定义一个数组或者一个向量来保存子问题的结果。\",\"在 C++ 中，我们将使用 std::vector。\",\"下面是使用制表实现的 Fibonacci 函数：\",\"int Fibonacci(int n) { if (n == 0) { return 0; } if (n == 1 || n == 2) { return 1; } std::vector<int> d(n + 1); for (int i = 3; i <= n; i++) { d[i] = d[i - 1] + d[i - 2]; } return d[n]; } \"]},\"32\":{\"h\":\"可选的其他改进\",\"t\":[\"有一种叫 \\\"状态压缩\\\" 的改进方式。\",\"状态压缩是动态规划中使用的一种技术，用于减少存储计算中间结果所需的内存量。 它涉及使用较小的数据结构（如位向量或哈希表）而不是数组或矩阵等较大的数据结构来表示子问题状态。 这有助于降低算法的空间复杂性，并有可能解决更大的问题或具有更复杂的子问题的问题。\",\"针对当前情况，我们将 d 替换为 pre 和 curr 两个整数：\",\"int Fibonacci(int n) { if (n == 0) { return 0; } if (n == 1 || n == 2) { return 1; } int pre = 1; int curr = 1; for (int i = 3; i <= n; i++) { int sum = pre + curr; pre = curr; curr = sum; } return curr; } \"]},\"33\":{\"h\":\"框架\",\"t\":[\"找到所有的 base cases。\",\"在斐波那契问题中，所有的 base cases 包括 n == 0、 n == 1 以及 n == 2。\",\"找到所有的状态。\",\"在斐波那契问题中，所有的状态即是所有的非负数。\",\"找到状态转移方程。\",\"在斐波那契问题中，状态转移方程为 : dp[i] = dp[i - 1] + dp[i - 2]\",\"提示\",\"状态转换方程是一个数学方程，描述了系统状态如何随时间变化。 在动态规划的背景下，状态转换方程是一种方程，它描述了如何从最优解到其子问题构建问题的最优解。 通过使用状态转换方程，可以通过将其分解为较小的子问题，然后将最优解与这些子问题相结合，以找到较大问题的最优解来解决问题。\",\"找到所有的选择，并弄明白怎么去定义 DP 表。\"]},\"34\":{\"h\":\"在 MongoDB 中实现自增 ID\",\"t\":[\"在 MongoDB 中，每个文档都有一个 object id (Bson ID)。但有时我们创建新模型的时候，需要能够自增的 ID，并且 ID 应该是从 1 开始的整数。怎么解决这个问题呢？\"]},\"35\":{\"h\":\"怎么解决这个问题\",\"t\":[\"为了解决这个问题，我们需要创建一个名为 AutoIncrementIdCollection 的新集合，其中我们插入一些有两个字段的模型（AutoIncrementIdModel）：\",\"CollectionName --> 集合的名称\",\"Sequence --> 集合当前的序列值，默认值为 0。\",\"每次在将新的索引模型 M 插入集合 C 之前，我们都会找到一个 CollectionName 为 C 的 AutoIncrementIdModel，并将其序列加一，然后使用该序列创建 M（M 的 id 字段由序列初始化）并将其插入 C。\"]},\"36\":{\"h\":\"深入探究 C# 11 的静态抽象接口方法\",\"t\":[\"静态抽象接口方法是 C# 11 (对应 .NET 7.0) 引入的新特性。本篇我们来探究一下为什么要有它、它是什么，以及怎么使用它。\"]},\"37\":{\"h\":\"为什么要有静态抽象接口方法\",\"t\":[\"回顾我们曾经的需求：\",\"我们希望在泛型中进行数学运算，但是编译器无法得知 T 的运行时类型，从而无法得知 T 是否支持诸如加减乘除的数学运算，故无法实现类似下面这样的代码：\",\"public T Add<T>(T a, T b) { return a + b; } \",\"我们希望某些情况下，T 作为编译期能够确定的类型，能够调用 T 的公有静态方法。然而，接口中无法声明静态接口方法，来允许我们进行 T.XXX(); 的操作。要是能够让接口中声明静态接口方法就好了。我们曾经的幻想：\",\"public interface ISomeInterface<T> where T : ISomeInterface<T> { static void SomeStaticMethod(); } public void Test<T>() where T : ISomeInterface<T> { T.SomeStaticMethod(); } \",\"为了满足这些需求，微软携手社区开发者们，共同推出了静态抽象接口方法，大家以前的幻想现在已经得以实现。\"]},\"38\":{\"h\":\"什么是静态抽象接口方法\",\"t\":[\"静态抽象接口方法是 C# 11 (对应 .NET 7.0) 引入的新特性。使用最新的 Visual Studio 2022 版本，安装过 .NET 7.0 运行时，即可尝鲜。\",\"它支持在接口中声明 static abstract 方法 (官方说支持在接口中声明 static virtual 方法，但我开启了 preview 后依旧报错，暂时不知道 static virtual 如何使用)。\"]},\"39\":{\"h\":\"怎么样使用静态抽象接口方法\",\"t\":[\"举个例子：\",\"我们可以利用上述新特性，定义如下接口：\",\"public interface IGetNext<T> where T : IGetNext<T> { static abstract T operator ++(T other); } \",\"许多运算符都强制要求其参数必须与类型匹配，或者是按照约束要实现包含类型的类型参数，所以这里，我们约束 T 必须实现 IGetNext<T>。\",\"然后，定义一个 RepeatSequence 结构去实现上面的接口，该结构创建由 ‘A' 组成的字符串，每个 ++ 操作都使得向字符串中添加一个 'A'。\",\"public struct RepeatSequence : IGetNext<RepeatSequence> { private const char Ch = 'A'; public string Text = new string(Ch, 1); public RepeatSequence() {} public static RepeatSequence operator ++(RepeatSequence other) => other with { Text = other.Text + Ch }; public override string ToString() => Text; } \",\"然后我们可以编写测试代码，打印看看结果：\",\"var str = new RepeatSequence(); for (int i = 0; i < 10; i++) Console.WriteLine(str++); \",\"得到输出：\",\"A AA AAA AAAA AAAAA AAAAAA AAAAAAA AAAAAAAA AAAAAAAAA AAAAAAAAAA \"]},\"40\":{\"h\":\"Playground\"},\"41\":{\"h\":\"从代码角度分析\"},\"42\":{\"h\":\"看看 IL\",\"t\":[\"如下接口：\",\"public interface IDeepInSourceCode<T> where T : IDeepInSourceCode<T> { void SomeMethod(); static abstract void SomeStaticAbstractMethod(); } \",\"它的 IL：\",\"// Type: StaticAbstractInterfaceMethods.IDeepInSourceCode`1 // Assembly: StaticAbstractInterfaceMethods, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null // MVID: 27A20D9E-C658-48F7-8AC2-47D46316D62D // Location: F:\\\\static_abstract\\\\StaticAbstractInterfaceMethods\\\\bin\\\\Debug\\\\net7.0\\\\StaticAbstractInterfaceMethods.dll // Sequence point data from f:\\\\static_abstract\\\\staticabstractinterfacemethods\\\\bin\\\\debug\\\\net7.0\\\\staticabstractinterfacemethods.pdb .class interface public abstract auto ansi StaticAbstractInterfaceMethods.IDeepInSourceCode`1<(class StaticAbstractInterfaceMethods.IDeepInSourceCode`1<!0/*T*/>) T> { .param constraint [1] /*T*/, class StaticAbstractInterfaceMethods.IDeepInSourceCode`1<!0/*T*/> .custom instance void System.Runtime.CompilerServices.NullableAttribute::.ctor([in] unsigned int8) = (01 00 01 00 00 ) // ..... // unsigned int8(1) // 0x01 .method public hidebysig virtual newslot abstract instance void SomeMethod() cil managed { // Can't find a body } // end of method IDeepInSourceCode`1::SomeMethod .method public hidebysig static virtual abstract void SomeStaticAbstractMethod() cil managed { // Can't find a body } // end of method IDeepInSourceCode`1::SomeStaticAbstractMethod } // end of class StaticAbstractInterfaceMethods.IDeepInSourceCode`1 \",\"对比发现，实际上，static abstract 方法和普通接口方法的区别在于，newslot 和 instance 关键字变成了 static。\",\"这意味着，实现 static abstract 接口方法的具体实现方法，必须是一个以 `public static 开头的方法。\"]},\"43\":{\"h\":\"试一试继承关系\",\"t\":[\"接着上面的接口，我们定义两个类型：\",\"public class DeepInSourceCodeBase : IDeepInSourceCode<DeepInSourceCodeBase> { public virtual void SomeMethod() { Console.WriteLine(\\\"SomeMethodBase is invoked.\\\"); } public static void SomeStaticAbstractMethod() { Console.WriteLine(\\\"SomeStaticAbstractMethodBase is invoked.\\\"); } } public class DeepInSourceCodeDerived : DeepInSourceCodeBase, IDeepInSourceCode<DeepInSourceCodeDerived> { public override void SomeMethod() { Console.WriteLine(\\\"SomeMethodDerived is invoked.\\\"); } public new static void SomeStaticAbstractMethod() { Console.WriteLine(\\\"SomeStaticAbstractMethodDerived is invoked.\\\"); } } \",\"DeepInSourceCodeBase 实现了 IDeepInSourceCode<DeepInSourceCodeBase> 接口。\",\"DeepInSourceCodeDerived 派生自 DeepInSourceCodeBase，重写了 SomeMethod 方法，覆盖了 SomeStaticAbstractMethod 方法。\",\"写一个测试代码：\",\"public class DeepInSourceCodeTester { public static void Test<T1, T2>() where T1 : IDeepInSourceCode<T1>, new() where T2 : T1, new() { T1 t1 = new T1(); T2 t2 = new T2(); t1.SomeMethod(); t2.SomeMethod(); T1.SomeStaticAbstractMethod(); T2.SomeStaticAbstractMethod(); } } \",\"在 Main 方法中加入测试代码：\",\"internal class Program { static void Main(string[] args) { DeepInSourceCodeTester.Test<DeepInSourceCodeBase, DeepInSourceCodeDerived>(); } } \",\"先猜猜结果是什么？\",\"SomeMethodBase is invoked. SomeMethodDerived is invoked. SomeStaticAbstractMethodBase is invoked. SomeStaticAbstractMethodDerived is invoked. \",\"你会猜测是这样的结果吗？\",\"其实不是。\",\"这里结果是：\",\"SomeMethodBase is invoked. SomeMethodDerived is invoked. SomeStaticAbstractMethodBase is invoked. SomeStaticAbstractMethodBase is invoked. \",\"官方有专门的说明：https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface#static-abstract-and-virtual-members\",\"当我们把 where T2 : T1, new() 改为 where T2 : IDeepInSourceCode<T2>, new() 结果就是我们猜测的那样了。\"]},\"44\":{\"h\":\"Playground\"},\"45\":{\"h\":\".NET 如何支持 泛型数学\",\"t\":[\"为了支持泛型数学，.NET 7.0 将所有的基元类型进行了重新实现。\",\"以 Int32 为例，它现在要实现更多的接口，这些接口就是为了进行一些泛型数学运算。\",\"public readonly struct Int32 : IComparable, IConvertible, ISpanFormattable, IComparable<int>, IEquatable<int>, IBinaryInteger<int>, IMinMaxValue<int>, ISignedNumber<int> \",\"Int32 除了之前实现的一些接口，目前还实现了以下新的接口：\",\"IBinaryInterger<int>\",\"public interface IBinaryInteger<TSelf> : IBinaryNumber<TSelf>, IShiftOperators<TSelf, int, TSelf> where TSelf : IBinaryInteger<TSelf>? \",\"IBinaryNumber<int>\",\"public interface IBinaryNumber<TSelf> : IBitwiseOperators<TSelf, TSelf, TSelf>, INumber<TSelf> where TSelf : IBinaryNumber<TSelf>? \",\"IBitwiseOperators<int, int, int>\",\"声明了重载 &、|、~、! 四个运算符的 static abstract 方法\",\"INumber<int>\",\"public interface INumber<TSelf> : IComparable, IComparable<TSelf>, IComparisonOperators<TSelf, TSelf, bool>, IModulusOperators<TSelf, TSelf, TSelf>, INumberBase<TSelf> where TSelf : INumber<TSelf>? \",\"IComparisonOperators<int, int, int>\",\"声明了重载 >、<、>=、<= 四个运算符的 static abstract 方法\",\"IModulusOperators<int, int, int>\",\"声明了重载 % 运算符的 static abstract 方法\",\"INumberBase<int>\",\"public interface INumberBase<TSelf> : IAdditionOperators<TSelf, TSelf, TSelf>, IAdditiveIdentity<TSelf, TSelf>, IDecrementOperators<TSelf>, IDivisionOperators<TSelf, TSelf, TSelf>, IEquatable<TSelf>, IEqualityOperators<TSelf, TSelf, bool>, IIncrementOperators<TSelf>, IMultiplicativeIdentity<TSelf, TSelf>, IMultiplyOperators<TSelf, TSelf, TSelf>, ISpanFormattable, ISpanParsable<TSelf>, ISubtractionOperators<TSelf, TSelf, TSelf>, IUnaryPlusOperators<TSelf, TSelf>, IUnaryNegationOperators<TSelf, TSelf> where TSelf : INumberBase<TSelf>? \",\"简述：主要声明了四则运算相关运算符的重载 static abstract 方法。\",\"IShiftOperators<int, int, int>\",\"声明了重载 <<、>>、>>> 三个移位运算符的 static abstract 方法\",\"IMinMaxValue<int>\",\"声明了 MinValue、MaxValue 两个 static abstract 属性，表示具有最大最小值属性。\",\"ISignedNumber<int>\",\"声明了 NegativeOne static abstract 属性，表示具有 -1 属性。\",\"如此一来，Int32 可以作为泛型数学的泛型参数。\",\"除了 Int32，其他诸如 Single、Double、Byte 这些基元类型也都实现了很多这种用于泛型数学运算的接口。\",\"举一个简单的例子：\",\"public static void MultiplyAndSub<T>(T t1, T t2, T t3) where T : IMultiplyOperators<T, T, T>, ISubtractionOperators<T, T, T> { Console.WriteLine(t1 * t2 - t3); } \",\"上述方法约束 T 类型支持乘法和减法运算。\",\"可以这样调用上述方法：\",\"MultiplyAndSub(1, 2, 3); MultiplyAndSub(0.1f, 0.2f, 0.3f); MultiplyAndSub(0.1d, 0.2d, 0.3d); \",\"当然，我们也可以自己定义一个类型，然后实现 乘法、减法 相关的接口：\",\"public struct MultiplyAndSubCustomStruct : IMultiplyOperators<MultiplyAndSubCustomStruct, MultiplyAndSubCustomStruct, MultiplyAndSubCustomStruct>, ISubtractionOperators<MultiplyAndSubCustomStruct, MultiplyAndSubCustomStruct, MultiplyAndSubCustomStruct> { public MultiplyAndSubCustomStruct(int value) { Value = value; } public int Value; public static MultiplyAndSubCustomStruct operator *(MultiplyAndSubCustomStruct left, MultiplyAndSubCustomStruct right) { return new MultiplyAndSubCustomStruct(left.Value * right.Value); } public static MultiplyAndSubCustomStruct operator -(MultiplyAndSubCustomStruct left, MultiplyAndSubCustomStruct right) { return new MultiplyAndSubCustomStruct(left.Value - right.Value); } public string ToString(string? format, IFormatProvider? formatProvider) { return Value.ToString(format, formatProvider); } } \",\"然后也可以调用 MultiplyAndSub：\",\"MultiplyAndSub(new MultiplyAndSubCustomStruct(1), new MultiplyAndSubCustomStruct(2), new MultiplyAndSubCustomStruct(3)); \",\"结果是 -1，符合预期。\"]},\"46\":{\"h\":\"GBDK 简介\",\"t\":[\"对于经典的 GB/GBC 开发，高手们习惯使用汇编。但是使用汇编需要我们首先对 GB/GBC 整个硬件原理和完整的指令集有了完整的了解后才合适，这样的成本太高了。\",\"现代的 GB/GBC 开发，至少需要使用高级编程语言，例如 C 语言。我们可以利用 GBDK 和 C 语言，进行 GB/GBC 开发。\",\"GBDK (GameBoy Development Kit) 即 GameBoy 开发工具包，主要包含一个 C 语言编译器： SDCC。它包括编译器、汇编器和链接器。GBDK 还包含一系列 Z80 处理器相关的库。GameBoy 的 CPU 和 Z80 比较像，可以说是基于 Z80，它兼容 Z80 的大部分指令集，所以那些库也可以有效利用。\",\"GBDK 包含了我们编译相关的所有内容，接下来我们开始进行环境搭建吧！\"]},\"47\":{\"h\":\"GBDK 环境搭建\",\"t\":[\"GBDK 是开源工具，我们可以在 GitHub 上直接下载最新的 Release 版本。\",\"我最近习惯使用 MacOS，这里我首先介绍如何在 MacOS 上搭建 GBDK 环境，并成功编译 Hello world 程序。Linux 和 MacOS 是一样的步骤。Windows 也是类似的步骤，如果有问题，欢迎随时在评论区留言。\"]},\"48\":{\"h\":\"下载 GBDK\",\"t\":[\"撰写本文时，GBDK 的稳定版本为 v4.1.1，点击直接下载。\",\"你也可以访问这里下载最新的版本。\"]},\"49\":{\"h\":\"文件结构介绍\",\"t\":[\"解压下载得到的压缩包后，我们得到一个名为 gbdk 的文件夹，其中的文件结构如下：\",\"接下来我们需要把 gbdk 文件夹移动到一个合适的位置，并添加环境变量。\"]},\"50\":{\"h\":\"移动 gbdk 文件夹，并添加相关的环境变量\",\"t\":[\"可以把该文件夹拷贝到 /opt/gbdk：\",\"sudo cp -r gbdk /opt/gbdk \",\"然后设置相关的环境变量。\",\"提示\",\"为了永久生效，可以编辑 /etc/profile 或者你所使用的 shell 配置文件：\",\"相关信息\",\"GBDKDIR 系统环境变量是必须设置的内容，除此之外，你可以选择将 bin 目录设置到 PATH 变量中，这样我们可以更方便的使用一些预编译的可执行程序。\"]},\"51\":{\"h\":\"准备好为 GBDK 而修正的 GBTD 与 GBMB\",\"t\":[\"GBTD (GameBoy Tile Designer) 和 GBMB (GameBoy Map Builder) 分别用于瓦块设计与地图编辑。前者可以绘制精灵和瓦块，后者使用前者已绘制好的瓦块进行地图的编辑。\",\"我们后续会用到这两个工具，这里我们先下载准备好。点击下载\",\"最新版本在这个页面。\",\"下载好并解压后，我们会得到 GBTD_GBMB_release 文件夹，里面包括 GBTD 文件夹和 GBMB 文件夹。\",\"我们在 gbdk 文件夹下新建 tools 目录，然后将解压后得到的 GBTD 目录和 GBMB 目录拷贝到 tools 目录。\",\"MacOS 和 Linux 用户可以使用 shell 来快速操作：\",\"sudo mkdir -p $GBDKDIR/tools cd GBTD_GBMB_release sudo cp -r GBTD $GBDKDIR/tools/ sudo cp -r GBMB $GBDKDIR/tools/ \",\"重点注意\",\"此时可能部分 ini 配置文件不具备相应的权限，我们直接设置这些文件的权限掩码为 777：\",\"sudo chmod 777 $GBDKDIR/tools/**/*.ini \",\"提示\",\"MacOS 和 Linux 需要准备 Wine 环境：\",\"Wine (Wine is not an emulator, 递归式命名)，可以在 MacOS 和 Linux 上，通过本地库，链接 DLL 的形式，运行 Windows 应用。\",\"MacOS 和 Linux 使用 Wine 运行 GBTD 和 GBMB 的后续流程\",\"上面这些都配置好后，我们就可以这样运行 GBTD 和 GBMB：\",\"wine $GBDKDIR/tools/GBTD/gbtd.exe wine $GBDKDIR/tools/GBMB/gbmb.exe \",\"觉得麻烦，建议使用 alias 命令创建别名，建议写入到 /etc/profile，当然也可以跟上面配置环境变量一样，写入到 shell 的配置文件中：\",\"# 添加到 /etc/profile echo \\\"alias gbtd='wine $GBDKDIR/tools/GBTD/gbtd.exe'\\\" | sudo tee -a /etc/profile echo \\\"alias gbmb='wine $GBDKDIR/tools/GBMB/gbmb.exe'\\\" | sudo tee -a /etc/profile # 添加到 ~/.zshrc echo \\\"alias gbtd='wine $GBDKDIR/tools/GBTD/gbtd.exe'\\\" | sudo tee -a ~/.zshrc echo \\\"alias gbmb='wine $GBDKDIR/tools/GBMB/gbmb.exe'\\\" | sudo tee -a ~/.zshrc # 添加到 ~/.bashrc echo \\\"alias gbtd='wine $GBDKDIR/tools/GBTD/gbtd.exe'\\\" | sudo tee -a ~/.bashrc echo \\\"alias gbmb='wine $GBDKDIR/tools/GBMB/gbmb.exe'\\\" | sudo tee -a ~/.bashrc \"]},\"52\":{\"h\":\"准备好模拟器 - SameBoy\",\"t\":[\"由于我使用 MacOS，我考虑使用开源、跨平台的模拟器：SameBoy，它功能丰富，支持调试，方便我们开发。\",\"打开它的下载页面，下载对应的版本即可：https://sameboy.github.io/downloads/\",\"这里我下载 MacOS 最新 v0.15.8 版。\",\"解压后是一个 app，拖到 应用程序 (英文系统中是 Applications) 中即可完成安装。\"]},\"53\":{\"h\":\"Hello, world!\",\"t\":[\"接下来编写我们第一个程序：在 GameBoy 的屏幕里打印一行 \\\"Hello,world!\\\"\"]},\"54\":{\"h\":\"编写源码\",\"t\":[\"helloworld.c:\",\"#include <gb/gb.h> #include <stdio.h> void main() { printf(\\\"HELLO, WORLD!\\\"); } \"]},\"55\":{\"h\":\"命令行编译\",\"t\":[\"在 helloworld.c 的同级目录打开命令行，并执行：\",\"$GBDKDIR/bin/lcc -Wa-l -Wl-m -Wl-j -o helloworld.gb helloworld.c \",\"执行结束后，会发现目录下编译得到了 helloworld.gb，也就是我们熟悉的 ROM 文件啦，放到模拟器可以直接运行。\"]},\"56\":{\"h\":\"用 SameBoy 打开，看看效果吧\",\"t\":[\"Hello, world!\",\"提示\",\"可以将 SameBoy 也使用 alias 取个别名：\",\"# 添加到 /etc/profile echo \\\"alias sameboy=/Applications/SameBoy.app/Contents/MacOS/SameBoy\\\" | sudo tee -a /etc/profile # 添加到 ~/.zshrc echo \\\"alias sameboy=/Applications/SameBoy.app/Contents/MacOS/SameBoy\\\" | sudo tee -a ~/.zshrc # 添加到 ~/.bashrc echo \\\"alias sameboy=/Applications/SameBoy.app/Contents/MacOS/SameBoy\\\" | sudo tee -a ~/.bashrc \",\"然后我们就可以使用\",\"sameboy helloworld.gb \",\"这种形式直接运行游戏了。\",\"恭喜，到这里，你已经入门了！🎉🎉🎉\"]},\"57\":{\"h\":\"使用 GBDK 绘制简单的精灵\",\"t\":[\"GameBoy 屏幕分辨率为 160*144，对于现在而言，这是非常低的，但是这个分辨率对于那个像素时代而言，却已经足以显示一个个生动活泼的角色了。\",\"精灵 (Sprite)，在计算机图形学中指 2D 的位图，并经常使用于 2D 游戏中。\",\"举个例子，超级马里奥中，马里奥对应的位图就是精灵。\",\"我们如何使用 GBDK 将一个精灵绘制到 GameBoy 的屏幕中呢？\",\"答案是，使用工具，设计好我们的精灵，最后将精灵数据导出为 C 数组。\",\"这里，我们使用最为流行的 GBTD。\",\"如果你想造轮子\",\"当然，自己写一个工具也是可以的，只要自己写的工具最后导出的 C 数组符合 GBDK 需要的 C 数组格式就行。\"]},\"58\":{\"h\":\"GBTD 简介\",\"t\":[\"在 GameBoy 的世界中，地图多半是由瓦块所组成的瓦块地图 (Tile Map)，精灵实际上也是由一些小小的瓦块组成的。\",\"GBTD, GameBoy Tile Designer，主要用于设计瓦块 (Tile)，并最终导出兼容 GBDK 的 C 数组。\",\"它的界面是这样的：\",\"GBTD 的界面\",\"关于 MacOS/Linux 运行 GBTD 和 GBMB\",\"如果没有搭建好环境，请参考上一篇文章，先搭建好环境。\",\"环境搭建好后，且跟着教程一起配置了 alias 后，可以直接使用别名打开：\",\"# 打开 GBTD gbtd # 打开 GBMB gbmb \"]},\"59\":{\"h\":\"绘制第一个简单的精灵\",\"t\":[\"接下来，我们绘制一个 8*8 的笑脸，并显示在靠近屏幕中央的位置。\",\"为什么是 8*8\",\"GameBoy 中，精灵的渲染有两种模式（二选一）：\",\"8*8\",\"8*16\",\"每个瓦块的尺寸最小为 8*8，所以最简单的精灵都是用一个瓦块，这里我们希望精灵不要过于迷你，所以还是选择 8*8 的尺寸，实际上，1*1 都是可以的，只是依旧还是需要一个 8*8 的瓦块来表达。复杂一点的精灵，可能会使用 8*16 模式。更复杂一点的精灵，甚至可能是多个 8*8 的瓦片组合而成的。\",\"GBTD 的最下方有一个颜色选择器。\",\"左侧 L R 显示的是鼠标左键和鼠标右键对应要在画布上绘制的颜色索引。\",\"右侧的四个色块代表 0 到 3 四个索引色，每个索引对应的颜色是我们自己通过调色板进行配置的，默认调色板是从白到黑的渐变的四个颜色。\",\"GBTD 颜色选择器\",\"GBTD 的左侧工具栏，默认选择了画笔工具，画笔底下是油漆桶工具。往下四个是移动工具，可以自行试试效果。再往下是垂直翻转、水平翻转、旋转以及自动更新。\",\"GBTD 左侧工具栏\",\"GBTD 不存在橡皮擦工具\",\"GBTD 不存在橡皮擦工具，这是因为 GameBoy 的颜色模式是索引色模式，而非 RGBA 模式。\",\"如果需要擦除某个画错的部分，你要做的就是使用另一个索引色来填充画错的部分。\",\"当我们在颜色选择器的右侧色块区域使用鼠标左键点击其中一个色块，则鼠标左键即将绘制的颜色索引会变成你点击的那个色块的索引值，简而言之就是接下来你的鼠标左键在画布上绘制的时候画笔（或油漆桶）的颜色变成了你所选色块的颜色。鼠标右键也是一样的逻辑。这样方便我们鼠标左右两个键在画布上绘制图形。\",\"我们首先选择画笔工具，使用鼠标左键点击颜色选择器右侧的索引值为 3 的黑色色块，然后在画布上绘制一个笑脸，当然，你也可以按照自己的想法绘制，只要是 8*8 及以内的就行。\",\"然后选择油漆桶工具，选择索引值为 1 的浅灰色色块，然后填充笑脸。\",\"画好后大致长这样（没认真画，教程嘛，意思意思）：\",\"第一个精灵：笑脸\",\"绘制好了，我们就可以开始导出成 GBDK 兼容的 C 数组了。\",\"当然，为了备份，你应该先保存一下。保存后，你将得到一个以 .gbr 后缀的文件，下次再用 GBTD 打开它就能继续编辑。\"]},\"60\":{\"h\":\"导出绘制的精灵\",\"t\":[\"最上面主菜单点击 Files/ExportTo，然后配置如下：\",\"导出笑脸为 GBDK 支持的 C 数组\",\"关键参数介绍\",\"Filename - 导出文件的名称，这里我们填入 Smile.c\",\"Type - 导出数据的类型，这里我们选择 GBDK C file，代表导出文件中包含的数据是兼容 GBDK 的 C 数组\",\"Label - 导出 C 数组的名称，我们在代码中会用到，这里我们命名为 Smile\",\"Format - 颜色格式，这里我们选择 Gameboy 4 color\",\"点击 OK 即可导出。导出成功后，会在 .gbr 所在同级目录下得到 Smile.h 和 Smile.c 文件。\",\".h 文件中是数组相关的声明，而 .c 文件中是具体定义，存放了实际的精灵数据。\",\"下面，我们就可以利用 C 数组，开始编写程序，绘制精灵了。\"]},\"61\":{\"h\":\"开始编程吧！\"},\"62\":{\"h\":\"使用 Visual Studio Code + Makefile 进行项目搭建\",\"t\":[\"相关信息\",\"之前的 helloworld 程序由于是单文件，过于简单，所以没有提到 Visual Studio Code 的配置以及使用 Makefile。\",\"后面的项目中，我们都会使用 Visual Studio Code + Makefile 的模式来进行开发。\",\"我们创建一个 gb-dev 目录，并在它下面创建一个 first-sprite 目录。\",\"然后使用 Visual Studio Code 打开 gb-dev 目录。\",\"首先配置 includePath，让我们可以拥有智能提示。在 gb-dev 目录下创建一个 .vscode 文件夹，在该文件夹下创建一个名为 c_cpp_properties.json 的配置文件：\",\"{ \\\"configurations\\\": [ { \\\"name\\\": \\\"GBDK_VSC\\\", \\\"includePath\\\": [ \\\"${GBDKDIR}/include/**\\\" ], \\\"defines\\\": [], \\\"macFrameworkPath\\\": [], \\\"compilerPath\\\": \\\"${GBDKDIR}/bin/lcc\\\", \\\"cStandard\\\": \\\"gnu99\\\" } ], \\\"version\\\": 4 } \",\"这样，我们以后的代码就拥有智能提示了。\",\"然后我们将之前导出的 Smile.h 和 Smile.c 拷贝到 first-sprite 目录下。\",\"接着我们就可以在 first-sprite 目录下，开始编写主程序 FirstSprite.c 了：\",\"#include <gb/gb.h> #include <stdio.h> #include \\\"Smile.h\\\" void main() { // 设置精灵数据 // 从第 0 号位的 Tile 开始，设置 No.0 的瓦块的数据 // 数据来源于 Smile 数组 set_sprite_data(0, 0, Smile); // 设置精灵使用哪个瓦块的数据 // 这里是 No.0 精灵使用 No.0 瓦块数据 set_sprite_tile(0, 0); // 一个宏，内部设置 LCDC 寄存器的第 1 位为 1， // 目的是开启精灵层，代表显示所有精灵 SHOW_SPRITES; // 将精灵 No.0 移动到 (84, 78) 的位置，即屏幕中央附近 move_sprite(0, 84, 78); } \",\"随后，我们编写一个叫做 Makefile 的文件。实际上，Makefile 是 make 的配置文件，make 可以方便我们设定编译参数以及具体每个模块的编译流程。这些模块的编译流程大多是重复的，所以使用 make 这套规则去编译，节约了我们的时间，也让编译流程更加清晰。\",\"我们的 Makefile 如下：\",\"# 设置 LCC 编译器执行路径 CC = $(GBDKDIR)/bin/lcc # 设置 SameBoy 执行路径 EMU = /Applications/SameBoy.app/Contents/MacOS/SameBoy # 默认行为，编译各个编译单元，最后链接得到 FirstSprite.gb all: $(CC) -Wa-l -Wl-m -Wl-j -o FirstSprite.gb Smile.c FirstSprite.c # 编译得到 FirstSprite.gb 后，使用 SameBoy 启动 run: all $(EMU) FirstSprite.gb # 清理，删除中间文件和目标文件 clean: rm -f *.o *.lst *.map *.gb *.ihx *.sym *.cdb *.adb *.asm *.noi \",\"现在，make 支持几种不同的命令参数：\",\"无，即默认行为，默认为 Makefile 中第一个出现的目标，在我们的设置中，为 all\",\"all，编译链接最终得到 FirstSprite.gb ，即 ROM 文件\",\"run，编译得到 ROM 后，使用 SameBoy 模拟器运行该 ROM 文件\",\"clean，清理，删除中间文件和目标文件\",\"我们可以直接使用 make run 来编译、链接并运行。\",\"最后的效果如下：\",\"成功在屏幕中显示第一个精灵\",\"最后还可以使用 make clean 来删除中间文件和目标文件，回到只有源码和 Makefile 等文件的状态。\",\"提示\",\"gb-dev 源码看这里\"]}},\"dirtCount\":0,\"index\":[[\"源码看这里\",{\"1\":{\"62\":1}}],[\"等文件的状态\",{\"1\":{\"62\":1}}],[\"回到只有源码和\",{\"1\":{\"62\":1}}],[\"回顾我们曾经的需求\",{\"1\":{\"37\":1}}],[\"成功在屏幕中显示第一个精灵\",{\"1\":{\"62\":1}}],[\"成功使用\",{\"1\":{\"25\":1}}],[\"模拟器运行该\",{\"1\":{\"62\":1}}],[\"模式\",{\"1\":{\"59\":2}}],[\"无\",{\"1\":{\"62\":1}}],[\"删除中间文件和目标文件\",{\"1\":{\"62\":2}}],[\"清理\",{\"1\":{\"62\":2}}],[\"启动\",{\"1\":{\"62\":1}}],[\"执行路径\",{\"1\":{\"62\":1}}],[\"执行结束后\",{\"1\":{\"55\":1}}],[\"编译链接最终得到\",{\"1\":{\"62\":1}}],[\"编译得到\",{\"1\":{\"62\":2}}],[\"编译各个编译单元\",{\"1\":{\"62\":1}}],[\"编译器执行路径\",{\"1\":{\"62\":1}}],[\"编写源码\",{\"0\":{\"54\":1}}],[\"节约了我们的时间\",{\"1\":{\"62\":1}}],[\"随后\",{\"1\":{\"62\":1}}],[\"位为\",{\"1\":{\"62\":1}}],[\"寄存器的第\",{\"1\":{\"62\":1}}],[\"内部设置\",{\"1\":{\"62\":1}}],[\"瓦块数据\",{\"1\":{\"62\":1}}],[\"号位的\",{\"1\":{\"62\":1}}],[\"设置精灵使用哪个瓦块的数据\",{\"1\":{\"62\":1}}],[\"设置精灵数据\",{\"1\":{\"62\":1}}],[\"设置\",{\"1\":{\"62\":3}}],[\"设计好我们的精灵\",{\"1\":{\"57\":1}}],[\"了\",{\"1\":{\"62\":1}}],[\"拷贝到\",{\"1\":{\"62\":1}}],[\"$\",{\"1\":{\"62\":5}}],[\"$gbdkdir\",{\"1\":{\"51\":12,\"55\":1}}],[\"让我们可以拥有智能提示\",{\"1\":{\"62\":1}}],[\"首先配置\",{\"1\":{\"62\":1}}],[\"过于简单\",{\"1\":{\"62\":1}}],[\"存放了实际的精灵数据\",{\"1\":{\"60\":1}}],[\"存在\",{\"1\":{\"18\":1}}],[\"会在\",{\"1\":{\"60\":1}}],[\"会发现目录下编译得到了\",{\"1\":{\"55\":1}}],[\"颜色格式\",{\"1\":{\"60\":1}}],[\"颜色选择器\",{\"1\":{\"59\":1}}],[\"代表显示所有精灵\",{\"1\":{\"62\":1}}],[\"代表导出文件中包含的数据是兼容\",{\"1\":{\"60\":1}}],[\"代表一维实数域\",{\"1\":{\"11\":1}}],[\"支持几种不同的命令参数\",{\"1\":{\"62\":1}}],[\"支持的\",{\"1\":{\"60\":1}}],[\"支持调试\",{\"1\":{\"52\":1}}],[\"导出成功后\",{\"1\":{\"60\":1}}],[\"导出\",{\"1\":{\"60\":1}}],[\"导出数据的类型\",{\"1\":{\"60\":1}}],[\"导出文件的名称\",{\"1\":{\"60\":1}}],[\"导出笑脸为\",{\"1\":{\"60\":1}}],[\"导出绘制的精灵\",{\"0\":{\"60\":1}}],[\"保存后\",{\"1\":{\"59\":1}}],[\"兼容的\",{\"1\":{\"59\":1}}],[\"笑脸\",{\"1\":{\"59\":1}}],[\"第一个精灵\",{\"1\":{\"59\":1}}],[\"意思意思\",{\"1\":{\"59\":1}}],[\"教程嘛\",{\"1\":{\"59\":1}}],[\"没认真画\",{\"1\":{\"59\":1}}],[\"画好后大致长这样\",{\"1\":{\"59\":1}}],[\"画笔底下是油漆桶工具\",{\"1\":{\"59\":1}}],[\"选择索引值为\",{\"1\":{\"59\":1}}],[\"及以内的就行\",{\"1\":{\"59\":1}}],[\"鼠标右键也是一样的逻辑\",{\"1\":{\"59\":1}}],[\"或油漆桶\",{\"1\":{\"59\":1}}],[\"或者你所使用的\",{\"1\":{\"50\":1}}],[\"或者是按照约束要实现包含类型的类型参数\",{\"1\":{\"39\":1}}],[\"或者\",{\"1\":{\"29\":1,\"30\":1}}],[\"或者更正式一点\",{\"1\":{\"18\":1}}],[\"旋转以及自动更新\",{\"1\":{\"59\":1}}],[\"水平翻转\",{\"1\":{\"59\":1}}],[\"再往下是垂直翻转\",{\"1\":{\"59\":1}}],[\"往下四个是移动工具\",{\"1\":{\"59\":1}}],[\"默认为\",{\"1\":{\"62\":1}}],[\"默认行为\",{\"1\":{\"62\":1}}],[\"默认选择了画笔工具\",{\"1\":{\"59\":1}}],[\"默认调色板是从白到黑的渐变的四个颜色\",{\"1\":{\"59\":1}}],[\"默认值为\",{\"1\":{\"35\":1}}],[\"到\",{\"1\":{\"59\":1}}],[\"到这里\",{\"1\":{\"56\":1}}],[\"右侧的四个色块代表\",{\"1\":{\"59\":1}}],[\"显示的是鼠标左键和鼠标右键对应要在画布上绘制的颜色索引\",{\"1\":{\"59\":1}}],[\"左侧工具栏\",{\"1\":{\"59\":1}}],[\"左侧\",{\"1\":{\"59\":1}}],[\"左极限和右极限存在且相等\",{\"1\":{\"18\":1}}],[\"甚至可能是多个\",{\"1\":{\"59\":1}}],[\"复杂一点的精灵\",{\"1\":{\"59\":1}}],[\"都是可以的\",{\"1\":{\"59\":1}}],[\"二选一\",{\"1\":{\"59\":1}}],[\"绘制精灵了\",{\"1\":{\"60\":1}}],[\"绘制好了\",{\"1\":{\"59\":1}}],[\"绘制第一个简单的精灵\",{\"0\":{\"59\":1}}],[\"绘制简单的精灵\",{\"0\":{\"57\":1}}],[\"且跟着教程一起配置了\",{\"1\":{\"58\":1}}],[\"先搭建好环境\",{\"1\":{\"58\":1}}],[\"先猜猜结果是什么\",{\"1\":{\"43\":1}}],[\"请参考上一篇文章\",{\"1\":{\"58\":1}}],[\"地图多半是由瓦块所组成的瓦块地图\",{\"1\":{\"58\":1}}],[\"只要是\",{\"1\":{\"59\":1}}],[\"只要自己写的工具最后导出的\",{\"1\":{\"57\":1}}],[\"只是依旧还是需要一个\",{\"1\":{\"59\":1}}],[\"只需在表中查找预计算的结果\",{\"1\":{\"29\":1}}],[\"自己写一个工具也是可以的\",{\"1\":{\"57\":1}}],[\"数据来源于\",{\"1\":{\"62\":1}}],[\"数组的名称\",{\"1\":{\"60\":1}}],[\"数组了\",{\"1\":{\"59\":1}}],[\"数组格式就行\",{\"1\":{\"57\":1}}],[\"数组符合\",{\"1\":{\"57\":1}}],[\"数组\",{\"1\":{\"57\":1,\"58\":1,\"60\":3,\"62\":1}}],[\"数值积分\",{\"1\":{\"22\":1}}],[\"数值微积分\",{\"0\":{\"22\":1}}],[\"答案是\",{\"1\":{\"57\":1}}],[\"将精灵\",{\"1\":{\"62\":1}}],[\"将一个精灵绘制到\",{\"1\":{\"57\":1}}],[\"将所有的基元类型进行了重新实现\",{\"1\":{\"45\":1}}],[\"马里奥对应的位图就是精灵\",{\"1\":{\"57\":1}}],[\"超级马里奥中\",{\"1\":{\"57\":1}}],[\"精灵使用\",{\"1\":{\"62\":1}}],[\"精灵的渲染有两种模式\",{\"1\":{\"59\":1}}],[\"精灵实际上也是由一些小小的瓦块组成的\",{\"1\":{\"58\":1}}],[\"精灵\",{\"1\":{\"57\":1}}],[\"却已经足以显示一个个生动活泼的角色了\",{\"1\":{\"57\":1}}],[\"屏幕分辨率为\",{\"1\":{\"57\":1}}],[\"🎉🎉🎉\",{\"1\":{\"56\":1}}],[\"恭喜\",{\"1\":{\"56\":1}}],[\"取个别名\",{\"1\":{\"56\":1}}],[\"放到模拟器可以直接运行\",{\"1\":{\"55\":1}}],[\"json\",{\"1\":{\"62\":1}}],[\"j\",{\"1\":{\"55\":1,\"62\":1}}],[\"java\",{\"1\":{\"0\":1}}],[\"命令行编译\",{\"0\":{\"55\":1}}],[\"命令创建别名\",{\"1\":{\"51\":1}}],[\"英文系统中是\",{\"1\":{\"52\":1}}],[\"拖到\",{\"1\":{\"52\":1}}],[\"版\",{\"1\":{\"52\":1}}],[\"版本\",{\"1\":{\"38\":1,\"47\":1}}],[\"打开它就能继续编辑\",{\"1\":{\"59\":1}}],[\"打开它的下载页面\",{\"1\":{\"52\":1}}],[\"打开\",{\"0\":{\"56\":1},\"1\":{\"58\":2,\"62\":1}}],[\"打印看看结果\",{\"1\":{\"39\":1}}],[\"方便我们开发\",{\"1\":{\"52\":1}}],[\"方法中加入测试代码\",{\"1\":{\"43\":1}}],[\"方法和普通接口方法的区别在于\",{\"1\":{\"42\":1}}],[\"方法\",{\"1\":{\"38\":2,\"43\":2,\"45\":5}}],[\"跨平台的模拟器\",{\"1\":{\"52\":1}}],[\"由于我使用\",{\"1\":{\"52\":1}}],[\"准备好模拟器\",{\"0\":{\"52\":1}}],[\"准备好为\",{\"0\":{\"51\":1}}],[\"添加到\",{\"1\":{\"51\":3,\"56\":3}}],[\"建议写入到\",{\"1\":{\"51\":1}}],[\"建议使用\",{\"1\":{\"51\":1}}],[\"觉得麻烦\",{\"1\":{\"51\":1}}],[\"应用程序\",{\"1\":{\"52\":1}}],[\"应用\",{\"1\":{\"51\":1}}],[\"应该是从\",{\"1\":{\"34\":1}}],[\"链接并运行\",{\"1\":{\"62\":1}}],[\"链接\",{\"1\":{\"51\":1}}],[\"需要的\",{\"1\":{\"57\":1}}],[\"需要准备\",{\"1\":{\"51\":1}}],[\"需要能够自增的\",{\"1\":{\"34\":1}}],[\"此时可能部分\",{\"1\":{\"51\":1}}],[\"来删除中间文件和目标文件\",{\"1\":{\"62\":1}}],[\"来编译\",{\"1\":{\"62\":1}}],[\"来快速操作\",{\"1\":{\"51\":1}}],[\"来允许我们进行\",{\"1\":{\"37\":1}}],[\"用\",{\"0\":{\"56\":1}}],[\"用户可以使用\",{\"1\":{\"51\":1}}],[\"用于减少存储计算中间结果所需的内存量\",{\"1\":{\"32\":1}}],[\"用于计算曲线的长度\",{\"1\":{\"17\":1}}],[\"里面包括\",{\"1\":{\"51\":1}}],[\"最后还可以使用\",{\"1\":{\"62\":1}}],[\"最后的效果如下\",{\"1\":{\"62\":1}}],[\"最后链接得到\",{\"1\":{\"62\":1}}],[\"最后将精灵数据导出为\",{\"1\":{\"57\":1}}],[\"最上面主菜单点击\",{\"1\":{\"60\":1}}],[\"最新\",{\"1\":{\"52\":1}}],[\"最新版本在这个页面\",{\"1\":{\"51\":1}}],[\"最优子结构\",{\"1\":{\"28\":1}}],[\"点击\",{\"1\":{\"60\":1}}],[\"点击下载\",{\"1\":{\"51\":1}}],[\"点击直接下载\",{\"1\":{\"48\":1}}],[\"前者可以绘制精灵和瓦块\",{\"1\":{\"51\":1}}],[\"前言\",{\"1\":{\"24\":1}}],[\"分别用于瓦块设计与地图编辑\",{\"1\":{\"51\":1}}],[\"与\",{\"0\":{\"51\":1}}],[\"变量中\",{\"1\":{\"50\":1}}],[\"变换序列的有效应用\",{\"1\":{\"9\":1}}],[\"变换\",{\"1\":{\"7\":1}}],[\"目的是开启精灵层\",{\"1\":{\"62\":1}}],[\"目录下\",{\"1\":{\"62\":2}}],[\"目录下创建一个\",{\"1\":{\"62\":1}}],[\"目录拷贝到\",{\"1\":{\"51\":1}}],[\"目录和\",{\"1\":{\"51\":1}}],[\"目录\",{\"1\":{\"51\":2,\"62\":3}}],[\"目录设置到\",{\"1\":{\"50\":1}}],[\"目前还实现了以下新的接口\",{\"1\":{\"45\":1}}],[\"目前正在利兹大学研修图形学与游戏引擎相关内容\",{\"1\":{\"0\":1}}],[\"除此之外\",{\"1\":{\"50\":1}}],[\"除了\",{\"1\":{\"45\":1}}],[\"除了之前实现的一些接口\",{\"1\":{\"45\":1}}],[\"系统环境变量是必须设置的内容\",{\"1\":{\"50\":1}}],[\"配置文件不具备相应的权限\",{\"1\":{\"51\":1}}],[\"配置文件\",{\"1\":{\"50\":1}}],[\"移动到\",{\"1\":{\"62\":1}}],[\"移动\",{\"0\":{\"50\":1}}],[\"文件中是具体定义\",{\"1\":{\"60\":1}}],[\"文件中是数组相关的声明\",{\"1\":{\"60\":1}}],[\"文件\",{\"1\":{\"60\":1,\"62\":2}}],[\"文件啦\",{\"1\":{\"55\":1}}],[\"文件夹下新建\",{\"1\":{\"51\":1}}],[\"文件夹和\",{\"1\":{\"51\":1}}],[\"文件夹\",{\"0\":{\"50\":1},\"1\":{\"51\":2,\"62\":1}}],[\"文件夹移动到一个合适的位置\",{\"1\":{\"49\":1}}],[\"文件结构介绍\",{\"0\":{\"49\":1}}],[\"撰写本文时\",{\"1\":{\"48\":1}}],[\"下次再用\",{\"1\":{\"59\":1}}],[\"下载对应的版本即可\",{\"1\":{\"52\":1}}],[\"下载好并解压后\",{\"1\":{\"51\":1}}],[\"下载\",{\"0\":{\"48\":1}}],[\"下面\",{\"1\":{\"60\":1}}],[\"下面是使用制表实现的\",{\"1\":{\"31\":1}}],[\"下面我们使用备忘录来解决斐波那契问题\",{\"1\":{\"30\":1}}],[\"欢迎随时在评论区留言\",{\"1\":{\"47\":1}}],[\"欢迎大家游玩体验\",{\"1\":{\"1\":1}}],[\"环境\",{\"1\":{\"47\":1,\"51\":1}}],[\"环境搭建好后\",{\"1\":{\"58\":1}}],[\"环境搭建\",{\"0\":{\"47\":1}}],[\"包含了我们编译相关的所有内容\",{\"1\":{\"46\":1}}],[\"包括\",{\"1\":{\"33\":1}}],[\"处理器相关的库\",{\"1\":{\"46\":1}}],[\"处连续\",{\"1\":{\"18\":1}}],[\"还包含一系列\",{\"1\":{\"46\":1}}],[\"汇编器和链接器\",{\"1\":{\"46\":1}}],[\"主要用于设计瓦块\",{\"1\":{\"58\":1}}],[\"主要包含一个\",{\"1\":{\"46\":1}}],[\"主要声明了四则运算相关运算符的重载\",{\"1\":{\"45\":1}}],[\"即默认行为\",{\"1\":{\"62\":1}}],[\"即屏幕中央附近\",{\"1\":{\"62\":1}}],[\"即可导出\",{\"1\":{\"60\":1}}],[\"即可尝鲜\",{\"1\":{\"38\":1}}],[\"即\",{\"1\":{\"46\":1,\"62\":1}}],[\"kit\",{\"1\":{\"46\":1}}],[\"keywords\",{\"1\":{\"43\":1}}],[\"进行项目搭建\",{\"0\":{\"62\":1}}],[\"进行\",{\"1\":{\"46\":1}}],[\"例如\",{\"1\":{\"46\":1}}],[\"至少需要使用高级编程语言\",{\"1\":{\"46\":1}}],[\"现代的\",{\"1\":{\"46\":1}}],[\"现在\",{\"1\":{\"26\":1,\"30\":1,\"62\":1}}],[\"整个硬件原理和完整的指令集有了完整的了解后才合适\",{\"1\":{\"46\":1}}],[\"符合预期\",{\"1\":{\"45\":1}}],[\"相关信息\",{\"1\":{\"50\":1,\"62\":1}}],[\"相关的接口\",{\"1\":{\"45\":1}}],[\"相关技术栈\",{\"1\":{\"0\":1}}],[\"减法\",{\"1\":{\"45\":1}}],[\"乘法\",{\"1\":{\"45\":1}}],[\"类型支持乘法和减法运算\",{\"1\":{\"45\":1}}],[\"举一个简单的例子\",{\"1\":{\"45\":1}}],[\"举个例子\",{\"1\":{\"29\":1,\"30\":1,\"39\":1,\"57\":1}}],[\"属性\",{\"1\":{\"45\":3}}],[\"两个\",{\"1\":{\"45\":1}}],[\"两个整数\",{\"1\":{\"32\":1}}],[\"声明了\",{\"1\":{\"45\":2}}],[\"声明了重载\",{\"1\":{\"45\":4}}],[\"三个移位运算符的\",{\"1\":{\"45\":1}}],[\"简而言之就是接下来你的鼠标左键在画布上绘制的时候画笔\",{\"1\":{\"59\":1}}],[\"简述\",{\"1\":{\"45\":1}}],[\"简介\",{\"0\":{\"24\":1,\"46\":1,\"58\":1}}],[\"运行\",{\"1\":{\"51\":2,\"58\":1}}],[\"运行时\",{\"1\":{\"38\":1}}],[\"运算符的\",{\"1\":{\"45\":1}}],[\"四个索引色\",{\"1\":{\"59\":1}}],[\"四个运算符的\",{\"1\":{\"45\":2}}],[\"四元数\",{\"1\":{\"7\":1}}],[\"~\",{\"1\":{\"45\":1,\"51\":6,\"56\":4}}],[\"|\",{\"1\":{\"45\":1,\"51\":6,\"56\":3}}],[\"||\",{\"1\":{\"29\":1,\"30\":1,\"31\":1,\"32\":1}}],[\"泛型数学\",{\"0\":{\"45\":1}}],[\"结果是\",{\"1\":{\"45\":1}}],[\"结果就是我们猜测的那样了\",{\"1\":{\"43\":1}}],[\"结构去实现上面的接口\",{\"1\":{\"39\":1}}],[\"改为\",{\"1\":{\"43\":1}}],[\"官方有专门的说明\",{\"1\":{\"43\":1}}],[\"官方说支持在接口中声明\",{\"1\":{\"38\":1}}],[\"你将得到一个以\",{\"1\":{\"59\":1}}],[\"你应该先保存一下\",{\"1\":{\"59\":1}}],[\"你也可以按照自己的想法绘制\",{\"1\":{\"59\":1}}],[\"你也可以访问这里下载最新的版本\",{\"1\":{\"48\":1}}],[\"你要做的就是使用另一个索引色来填充画错的部分\",{\"1\":{\"59\":1}}],[\"你已经入门了\",{\"1\":{\"56\":1}}],[\"你可以选择将\",{\"1\":{\"50\":1}}],[\"你会猜测是这样的结果吗\",{\"1\":{\"43\":1}}],[\"你并不需要编程相关的知识就可以使用它开始进行游戏创作\",{\"1\":{\"25\":1}}],[\"写入到\",{\"1\":{\"51\":1}}],[\"写一个测试代码\",{\"1\":{\"43\":1}}],[\"写过一些小游戏和\",{\"1\":{\"25\":1}}],[\"覆盖了\",{\"1\":{\"43\":1}}],[\"重点注意\",{\"1\":{\"51\":1}}],[\"重写了\",{\"1\":{\"43\":1}}],[\"重叠的子问题\",{\"1\":{\"28\":1}}],[\"派生自\",{\"1\":{\"43\":1}}],[\"试一试继承关系\",{\"0\":{\"43\":1}}],[\"`public\",{\"1\":{\"42\":1}}],[\"必须是一个以\",{\"1\":{\"42\":1}}],[\"必须实现\",{\"1\":{\"39\":1}}],[\"实现了\",{\"1\":{\"43\":1}}],[\"实现\",{\"1\":{\"42\":1}}],[\"实际上\",{\"1\":{\"42\":1,\"59\":1,\"62\":1}}],[\"关键参数介绍\",{\"1\":{\"60\":1}}],[\"关键字变成了\",{\"1\":{\"42\":1}}],[\"关于\",{\"1\":{\"58\":1}}],[\"关于变换的成本\",{\"1\":{\"9\":1}}],[\"关于我\",{\"0\":{\"0\":1}}],[\"emu\",{\"1\":{\"62\":2}}],[\"emulator\",{\"1\":{\"51\":1}}],[\"exportto\",{\"1\":{\"60\":1}}],[\"exe\",{\"1\":{\"51\":8}}],[\"echo\",{\"1\":{\"51\":6,\"56\":3}}],[\"etc\",{\"1\":{\"50\":1,\"51\":4,\"56\":2}}],[\"en\",{\"1\":{\"43\":1}}],[\"end\",{\"1\":{\"42\":3}}],[\"else\",{\"1\":{\"30\":1}}],[\"rm\",{\"1\":{\"62\":1}}],[\"run\",{\"1\":{\"62\":3}}],[\"runtime\",{\"1\":{\"42\":1}}],[\"rgba\",{\"1\":{\"59\":1}}],[\"rom\",{\"1\":{\"55\":1,\"62\":3}}],[\"r\",{\"1\":{\"50\":1,\"51\":2,\"59\":1}}],[\"right\",{\"1\":{\"45\":4}}],[\"release\",{\"1\":{\"47\":1,\"51\":2}}],[\"readonly\",{\"1\":{\"45\":1}}],[\"reference\",{\"1\":{\"43\":1}}],[\"repeatsequence\",{\"1\":{\"39\":6}}],[\"recursion\",{\"1\":{\"29\":1}}],[\"return\",{\"1\":{\"29\":3,\"30\":4,\"31\":3,\"32\":3,\"37\":1,\"45\":3}}],[\"rebirth\",{\"0\":{\"3\":1}}],[\"4\",{\"1\":{\"60\":1,\"62\":1}}],[\"47d46316d62d\",{\"1\":{\"42\":1}}],[\"48f7\",{\"1\":{\"42\":1}}],[\"看看效果吧\",{\"0\":{\"56\":1}}],[\"看看\",{\"0\":{\"42\":1}}],[\"得到输出\",{\"1\":{\"39\":1}}],[\"<stdio\",{\"1\":{\"54\":1,\"62\":1}}],[\"<gb\",{\"1\":{\"54\":1,\"62\":1}}],[\"<<\",{\"1\":{\"45\":1}}],[\"<\",{\"1\":{\"39\":1,\"45\":1}}],[\"<=\",{\"1\":{\"31\":1,\"32\":1,\"45\":1}}],[\"操作都使得向字符串中添加一个\",{\"1\":{\"39\":1}}],[\"组成的字符串\",{\"1\":{\"39\":1}}],[\"该结构创建由\",{\"1\":{\"39\":1}}],[\"该序列以比萨的莱昂纳多命名\",{\"1\":{\"29\":1}}],[\"定义一个\",{\"1\":{\"39\":1}}],[\"定义如下接口\",{\"1\":{\"39\":1}}],[\"所在同级目录下得到\",{\"1\":{\"60\":1}}],[\"所以使用\",{\"1\":{\"62\":1}}],[\"所以没有提到\",{\"1\":{\"62\":1}}],[\"所以还是选择\",{\"1\":{\"59\":1}}],[\"所以最简单的精灵都是用一个瓦块\",{\"1\":{\"59\":1}}],[\"所以那些库也可以有效利用\",{\"1\":{\"46\":1}}],[\"所以这里\",{\"1\":{\"39\":1}}],[\"所有的状态即是所有的非负数\",{\"1\":{\"33\":1}}],[\"所有的\",{\"1\":{\"33\":1}}],[\"所有重复的节点都不存在了\",{\"1\":{\"30\":1}}],[\"许多运算符都强制要求其参数必须与类型匹配\",{\"1\":{\"39\":1}}],[\"怎么样使用静态抽象接口方法\",{\"0\":{\"39\":1}}],[\"怎么解决这个问题\",{\"0\":{\"35\":1}}],[\"怎么解决这个问题呢\",{\"1\":{\"34\":1}}],[\"暂时不知道\",{\"1\":{\"38\":1}}],[\"后面的项目中\",{\"1\":{\"62\":1}}],[\"后缀的文件\",{\"1\":{\"59\":1}}],[\"后\",{\"1\":{\"58\":1,\"62\":2}}],[\"后者使用前者已绘制好的瓦块进行地图的编辑\",{\"1\":{\"51\":1}}],[\"后依旧报错\",{\"1\":{\"38\":1}}],[\"后续发布的大多数文章都会有中英两个版本\",{\"1\":{\"23\":1}}],[\"后续服务器的费用还是不小的\",{\"1\":{\"23\":1}}],[\"安装过\",{\"1\":{\"38\":1}}],[\"大家以前的幻想现在已经得以实现\",{\"1\":{\"37\":1}}],[\"共同推出了静态抽象接口方法\",{\"1\":{\"37\":1}}],[\"微软携手社区开发者们\",{\"1\":{\"37\":1}}],[\"接着我们就可以在\",{\"1\":{\"62\":1}}],[\"接着上面的接口\",{\"1\":{\"43\":1}}],[\"接下来\",{\"1\":{\"59\":1}}],[\"接下来编写我们第一个程序\",{\"1\":{\"53\":1}}],[\"接下来我们需要把\",{\"1\":{\"49\":1}}],[\"接下来我们开始进行环境搭建吧\",{\"1\":{\"46\":1}}],[\"接下来你可以选择的教程\",{\"1\":{\"26\":1}}],[\"接口\",{\"1\":{\"43\":1}}],[\"接口方法的具体实现方法\",{\"1\":{\"42\":1}}],[\"接口中无法声明静态接口方法\",{\"1\":{\"37\":1}}],[\"能够调用\",{\"1\":{\"37\":1}}],[\"故无法实现类似下面这样的代码\",{\"1\":{\"37\":1}}],[\"从第\",{\"1\":{\"62\":1}}],[\"从代码角度分析\",{\"0\":{\"41\":1}}],[\"从而无法得知\",{\"1\":{\"37\":1}}],[\"从0和1开始\",{\"1\":{\"29\":1}}],[\"本篇我们来探究一下为什么要有它\",{\"1\":{\"36\":1}}],[\"引入的新特性\",{\"1\":{\"36\":1,\"38\":1}}],[\"78\",{\"1\":{\"62\":2}}],[\"777\",{\"1\":{\"51\":2}}],[\"7\",{\"1\":{\"36\":1,\"38\":2,\"45\":1}}],[\"静态抽象接口方法是\",{\"1\":{\"36\":1,\"38\":1}}],[\"深入探究\",{\"0\":{\"36\":1}}],[\"字段由序列初始化\",{\"1\":{\"35\":1}}],[\"之前的\",{\"1\":{\"62\":1}}],[\"之前\",{\"1\":{\"35\":1}}],[\"插入集合\",{\"1\":{\"35\":1}}],[\"每次在将新的索引模型\",{\"1\":{\"35\":1}}],[\"每个索引对应的颜色是我们自己通过调色板进行配置的\",{\"1\":{\"59\":1}}],[\"每个瓦块的尺寸最小为\",{\"1\":{\"59\":1}}],[\"每个\",{\"1\":{\"39\":1}}],[\"每个文档都有一个\",{\"1\":{\"34\":1}}],[\"每个像素记录了一个高度值\",{\"1\":{\"12\":1}}],[\"每个物体的位置\",{\"1\":{\"7\":1}}],[\"集合当前的序列值\",{\"1\":{\"35\":1}}],[\"集合的名称\",{\"1\":{\"35\":1}}],[\"但我开启了\",{\"1\":{\"38\":1}}],[\"但有时我们创建新模型的时候\",{\"1\":{\"34\":1}}],[\"但是这个分辨率对于那个像素时代而言\",{\"1\":{\"57\":1}}],[\"但是使用汇编需要我们首先对\",{\"1\":{\"46\":1}}],[\"但是编译器无法得知\",{\"1\":{\"37\":1}}],[\"但是\",{\"1\":{\"29\":1}}],[\"表\",{\"1\":{\"33\":1}}],[\"表示具有\",{\"1\":{\"45\":1}}],[\"表示具有最大最小值属性\",{\"1\":{\"45\":1}}],[\"表示空间域\",{\"1\":{\"15\":1}}],[\"表示纹理域\",{\"1\":{\"15\":1}}],[\"描述了系统状态如何随时间变化\",{\"1\":{\"33\":1}}],[\"描述我们的场景\",{\"1\":{\"7\":1}}],[\"状态转换方程是一种方程\",{\"1\":{\"33\":1}}],[\"状态转换方程是一个数学方程\",{\"1\":{\"33\":1}}],[\"状态转移方程为\",{\"1\":{\"33\":1}}],[\"状态压缩是动态规划中使用的一种技术\",{\"1\":{\"32\":1}}],[\"状态压缩\",{\"1\":{\"32\":1}}],[\"找到状态转移方程\",{\"1\":{\"33\":1}}],[\"找到所有的选择\",{\"1\":{\"33\":1}}],[\"找到所有的状态\",{\"1\":{\"33\":1}}],[\"找到所有的\",{\"1\":{\"33\":1}}],[\"bashrc\",{\"1\":{\"51\":3,\"56\":2}}],[\"base\",{\"1\":{\"33\":2}}],[\"builder\",{\"1\":{\"51\":1}}],[\"byte\",{\"1\":{\"45\":1}}],[\"bool>\",{\"1\":{\"45\":2}}],[\"body\",{\"1\":{\"42\":2}}],[\"bin\",{\"1\":{\"42\":2,\"50\":1,\"55\":1,\"62\":2}}],[\"b\",{\"1\":{\"37\":2}}],[\"bson\",{\"1\":{\"34\":1}}],[\"blackjack\",{\"1\":{\"0\":1}}],[\"框架\",{\"0\":{\"33\":1}}],[\"替换为\",{\"1\":{\"32\":1}}],[\"针对当前情况\",{\"1\":{\"32\":1}}],[\"并在它下面创建一个\",{\"1\":{\"62\":1}}],[\"并显示在靠近屏幕中央的位置\",{\"1\":{\"59\":1}}],[\"并最终导出兼容\",{\"1\":{\"58\":1}}],[\"并经常使用于\",{\"1\":{\"57\":1}}],[\"并执行\",{\"1\":{\"55\":1}}],[\"并添加相关的环境变量\",{\"0\":{\"50\":1}}],[\"并添加环境变量\",{\"1\":{\"49\":1}}],[\"并成功编译\",{\"1\":{\"47\":1}}],[\"并将其插入\",{\"1\":{\"35\":1}}],[\"并将其序列加一\",{\"1\":{\"35\":1}}],[\"并且\",{\"1\":{\"34\":1}}],[\"并弄明白怎么去定义\",{\"1\":{\"33\":1}}],[\"并有可能解决更大的问题或具有更复杂的子问题的问题\",{\"1\":{\"32\":1}}],[\"并利用它\",{\"1\":{\"25\":1}}],[\"如下\",{\"1\":{\"62\":1}}],[\"如下接口\",{\"1\":{\"42\":1}}],[\"如此一来\",{\"1\":{\"45\":1}}],[\"如何支持\",{\"0\":{\"45\":1}}],[\"如何使用\",{\"1\":{\"38\":1}}],[\"如位向量或哈希表\",{\"1\":{\"32\":1}}],[\"如果需要擦除某个画错的部分\",{\"1\":{\"59\":1}}],[\"如果没有搭建好环境\",{\"1\":{\"58\":1}}],[\"如果你想造轮子\",{\"1\":{\"57\":1}}],[\"如果有问题\",{\"1\":{\"47\":1}}],[\"如果\",{\"1\":{\"18\":1}}],[\"有一种叫\",{\"1\":{\"32\":1}}],[\"要是能够让接口中声明静态接口方法就好了\",{\"1\":{\"37\":1}}],[\"要使用制表\",{\"1\":{\"31\":1}}],[\"要解决\",{\"1\":{\"28\":1}}],[\">>>\",{\"1\":{\"45\":1}}],[\">>\",{\"1\":{\"45\":1}}],[\">=\",{\"1\":{\"45\":1}}],[\">\",{\"1\":{\"30\":1,\"35\":2,\"42\":2,\"45\":1}}],[\"中第一个出现的目标\",{\"1\":{\"62\":1}}],[\"中即可完成安装\",{\"1\":{\"52\":1}}],[\"中实现自增\",{\"0\":{\"34\":1}}],[\"中\",{\"1\":{\"30\":1,\"31\":1,\"34\":1,\"59\":1}}],[\"去保存已经计算过的结果\",{\"1\":{\"30\":1}}],[\"缓存表\",{\"1\":{\"30\":1}}],[\"另一方面\",{\"1\":{\"29\":1}}],[\"帮助降低算法的整体时间复杂性\",{\"1\":{\"29\":1}}],[\"涉及将中间计算的结果存储在表格中\",{\"1\":{\"29\":1}}],[\"可能会使用\",{\"1\":{\"59\":1}}],[\"可以方便我们设定编译参数以及具体每个模块的编译流程\",{\"1\":{\"62\":1}}],[\"可以自行试试效果\",{\"1\":{\"59\":1}}],[\"可以直接使用别名打开\",{\"1\":{\"58\":1}}],[\"可以将\",{\"1\":{\"56\":1}}],[\"可以在\",{\"1\":{\"51\":1}}],[\"可以编辑\",{\"1\":{\"50\":1}}],[\"可以把该文件夹拷贝到\",{\"1\":{\"50\":1}}],[\"可以说是基于\",{\"1\":{\"46\":1}}],[\"可以这样调用上述方法\",{\"1\":{\"45\":1}}],[\"可以作为泛型数学的泛型参数\",{\"1\":{\"45\":1}}],[\"可以通过将其分解为较小的子问题\",{\"1\":{\"33\":1}}],[\"可以放后面讲\",{\"1\":{\"26\":1}}],[\"可选的其他改进\",{\"0\":{\"32\":1},\"1\":{\"29\":1}}],[\"制表是一种涉及将所有子问题最终结果存储在表中的技术\",{\"1\":{\"29\":1}}],[\"制表\",{\"1\":{\"29\":1}}],[\"制作了一款属于\",{\"1\":{\"25\":1}}],[\"备忘录和制表都可以用来加快动态规划算法\",{\"1\":{\"29\":1}}],[\"备忘录和制表是用于提高动态规划算法性能的两种技术\",{\"1\":{\"29\":1}}],[\"备忘录是一种技术\",{\"1\":{\"29\":1}}],[\"备忘录\",{\"1\":{\"29\":1}}],[\"递归式命名\",{\"1\":{\"51\":1}}],[\"递归\",{\"1\":{\"29\":1}}],[\"=>\",{\"1\":{\"39\":2}}],[\"=\",{\"1\":{\"29\":1,\"30\":1,\"31\":2,\"32\":6,\"33\":1,\"39\":5,\"42\":1,\"43\":2,\"45\":1,\"62\":2}}],[\"==\",{\"1\":{\"29\":3,\"30\":3,\"31\":3,\"32\":3,\"33\":3}}],[\"多数节点是重复的\",{\"1\":{\"29\":1}}],[\"多元函数微积分\",{\"0\":{\"19\":1}}],[\"而\",{\"1\":{\"60\":1}}],[\"而非\",{\"1\":{\"59\":1}}],[\"而修正的\",{\"0\":{\"51\":1}}],[\"而不是数组或矩阵等较大的数据结构来表示子问题状态\",{\"1\":{\"32\":1}}],[\"而只是递归\",{\"1\":{\"29\":1}}],[\"而是考虑使用具有\",{\"1\":{\"23\":1}}],[\"++\",{\"1\":{\"39\":3}}],[\"+\",{\"0\":{\"62\":1},\"1\":{\"29\":3,\"30\":1,\"31\":2,\"32\":1,\"33\":1,\"37\":1,\"39\":1,\"62\":1}}],[\"ihx\",{\"1\":{\"62\":1}}],[\"io\",{\"1\":{\"52\":1}}],[\"iunarynegationoperators<tself\",{\"1\":{\"45\":1}}],[\"iunaryplusoperators<tself\",{\"1\":{\"45\":1}}],[\"iincrementoperators<tself>\",{\"1\":{\"45\":1}}],[\"iequalityoperators<tself\",{\"1\":{\"45\":1}}],[\"iequatable<tself>\",{\"1\":{\"45\":1}}],[\"iequatable<int>\",{\"1\":{\"45\":1}}],[\"iadditiveidentity<tself\",{\"1\":{\"45\":1}}],[\"iadditionoperators<tself\",{\"1\":{\"45\":1}}],[\"imultiplyoperators<multiplyandsubcustomstruct\",{\"1\":{\"45\":1}}],[\"imultiplyoperators<t\",{\"1\":{\"45\":1}}],[\"imultiplyoperators<tself\",{\"1\":{\"45\":1}}],[\"imultiplicativeidentity<tself\",{\"1\":{\"45\":1}}],[\"imodulusoperators<int\",{\"1\":{\"45\":1}}],[\"imodulusoperators<tself\",{\"1\":{\"45\":1}}],[\"iminmaxvalue<int>\",{\"1\":{\"45\":2}}],[\"ibitwiseoperators<int\",{\"1\":{\"45\":1}}],[\"ibitwiseoperators<tself\",{\"1\":{\"45\":1}}],[\"ibinarynumber<int>\",{\"1\":{\"45\":1}}],[\"ibinarynumber<tself>\",{\"1\":{\"45\":3}}],[\"ibinaryinteger<tself>\",{\"1\":{\"45\":2}}],[\"ibinaryinteger<int>\",{\"1\":{\"45\":1}}],[\"ibinaryinterger<int>\",{\"1\":{\"45\":1}}],[\"icomparisonoperators<int\",{\"1\":{\"45\":1}}],[\"icomparisonoperators<tself\",{\"1\":{\"45\":1}}],[\"icomparable<tself>\",{\"1\":{\"45\":1}}],[\"icomparable<int>\",{\"1\":{\"45\":1}}],[\"icomparable\",{\"1\":{\"45\":2}}],[\"iconvertible\",{\"1\":{\"45\":1}}],[\"isubtractionoperators<multiplyandsubcustomstruct\",{\"1\":{\"45\":1}}],[\"isubtractionoperators<t\",{\"1\":{\"45\":1}}],[\"isubtractionoperators<tself\",{\"1\":{\"45\":1}}],[\"ishiftoperators<int\",{\"1\":{\"45\":1}}],[\"ishiftoperators<tself\",{\"1\":{\"45\":1}}],[\"ispanparsable<tself>\",{\"1\":{\"45\":1}}],[\"ispanformattable\",{\"1\":{\"45\":2}}],[\"isignednumber<int>\",{\"1\":{\"45\":2}}],[\"is\",{\"1\":{\"43\":12,\"51\":1}}],[\"isomeinterface<t>\",{\"1\":{\"37\":3}}],[\"includepath\",{\"1\":{\"62\":2}}],[\"include\",{\"1\":{\"54\":2,\"62\":4}}],[\"ini\",{\"1\":{\"51\":2}}],[\"inumberbase<int>\",{\"1\":{\"45\":1}}],[\"inumberbase<tself>\",{\"1\":{\"45\":3}}],[\"inumber<int>\",{\"1\":{\"45\":1}}],[\"inumber<tself>\",{\"1\":{\"45\":3}}],[\"invoked\",{\"1\":{\"43\":12}}],[\"in\",{\"1\":{\"42\":1}}],[\"instance\",{\"1\":{\"42\":3}}],[\"int32\",{\"1\":{\"45\":5}}],[\"int8\",{\"1\":{\"42\":2}}],[\"internal\",{\"1\":{\"43\":1}}],[\"interface\",{\"1\":{\"37\":1,\"39\":1,\"42\":2,\"43\":1,\"45\":4}}],[\"integral\",{\"0\":{\"17\":1}}],[\"int>\",{\"1\":{\"30\":1,\"45\":4}}],[\"int\",{\"1\":{\"29\":2,\"30\":2,\"31\":3,\"32\":6,\"39\":1,\"45\":7}}],[\"il\",{\"0\":{\"42\":1},\"1\":{\"42\":1}}],[\"igetnext<repeatsequence>\",{\"1\":{\"39\":1}}],[\"igetnext<t>\",{\"1\":{\"39\":3}}],[\"idivisionoperators<tself\",{\"1\":{\"45\":1}}],[\"idecrementoperators<tself>\",{\"1\":{\"45\":1}}],[\"ideepinsourcecode<t2>\",{\"1\":{\"43\":1}}],[\"ideepinsourcecode<t1>\",{\"1\":{\"43\":1}}],[\"ideepinsourcecode<t>\",{\"1\":{\"42\":2}}],[\"ideepinsourcecode<deepinsourcecodederived>\",{\"1\":{\"43\":1}}],[\"ideepinsourcecode<deepinsourcecodebase>\",{\"1\":{\"43\":2}}],[\"ideepinsourcecode`1<\",{\"1\":{\"42\":3}}],[\"ideepinsourcecode`1\",{\"1\":{\"42\":4}}],[\"id\",{\"0\":{\"34\":1},\"1\":{\"34\":4,\"35\":1}}],[\"i++\",{\"1\":{\"31\":1,\"32\":1,\"39\":1}}],[\"i\",{\"1\":{\"30\":1,\"31\":5,\"32\":2,\"33\":3,\"39\":2}}],[\"iformatprovider\",{\"1\":{\"45\":1}}],[\"if\",{\"1\":{\"29\":2,\"30\":3,\"31\":2,\"32\":2}}],[\"firstsprite\",{\"1\":{\"62\":7}}],[\"first\",{\"1\":{\"62\":3}}],[\"file\",{\"1\":{\"60\":1}}],[\"filename\",{\"1\":{\"60\":1}}],[\"files\",{\"1\":{\"60\":1}}],[\"find\",{\"1\":{\"42\":2}}],[\"fibonacci\",{\"1\":{\"29\":3,\"30\":4,\"31\":2,\"32\":1}}],[\"from\",{\"1\":{\"42\":1}}],[\"f\",{\"1\":{\"42\":2,\"62\":1}}],[\"formatprovider\",{\"1\":{\"45\":2}}],[\"format\",{\"1\":{\"45\":2,\"60\":1}}],[\"for\",{\"1\":{\"31\":1,\"32\":1,\"39\":1}}],[\"functions\",{\"0\":{\"11\":1}}],[\"就像下面这样\",{\"1\":{\"29\":1}}],[\"就不打算展示了\",{\"1\":{\"25\":1}}],[\"asm\",{\"1\":{\"62\":1}}],[\"assembly\",{\"1\":{\"42\":1}}],[\"adb\",{\"1\":{\"62\":1}}],[\"add<t>\",{\"1\":{\"37\":1}}],[\"all\",{\"1\":{\"62\":4}}],[\"alias\",{\"1\":{\"51\":7,\"56\":4,\"58\":1}}],[\"applications\",{\"1\":{\"52\":1,\"56\":3,\"62\":1}}],[\"app\",{\"1\":{\"52\":1,\"56\":3,\"62\":1}}],[\"an\",{\"1\":{\"51\":1}}],[\"and\",{\"1\":{\"43\":1}}],[\"ansi\",{\"1\":{\"42\":1}}],[\"args\",{\"1\":{\"43\":1}}],[\"arc\",{\"0\":{\"17\":1}}],[\"auto\",{\"1\":{\"42\":1}}],[\"autoincrementidmodel\",{\"1\":{\"35\":2}}],[\"autoincrementidcollection\",{\"1\":{\"35\":1}}],[\"aaaaaaaaaa\",{\"1\":{\"39\":1}}],[\"aaaaaaaaa\",{\"1\":{\"39\":1}}],[\"aaaaaaaa\",{\"1\":{\"39\":1}}],[\"aaaaaaa\",{\"1\":{\"39\":1}}],[\"aaaaaa\",{\"1\":{\"39\":1}}],[\"aaaaa\",{\"1\":{\"39\":1}}],[\"aaaa\",{\"1\":{\"39\":1}}],[\"aaa\",{\"1\":{\"39\":1}}],[\"aa\",{\"1\":{\"39\":1}}],[\"abstract\",{\"1\":{\"38\":1,\"39\":1,\"42\":8,\"43\":1,\"45\":7}}],[\"abaci\",{\"1\":{\"29\":1}}],[\"a\",{\"1\":{\"37\":2,\"39\":4,\"42\":2,\"51\":6,\"56\":3}}],[\"他在\",{\"1\":{\"29\":1}}],[\"他也被称为斐波那契\",{\"1\":{\"29\":1}}],[\"84\",{\"1\":{\"62\":2}}],[\"8ac2\",{\"1\":{\"42\":1}}],[\"8\",{\"1\":{\"29\":1,\"52\":1,\"59\":18}}],[\"5\",{\"1\":{\"29\":1}}],[\"0x01\",{\"1\":{\"42\":1}}],[\"00\",{\"1\":{\"42\":3}}],[\"01\",{\"1\":{\"42\":2}}],[\"0\",{\"1\":{\"29\":3,\"30\":3,\"31\":2,\"32\":2,\"33\":1,\"35\":1,\"36\":1,\"38\":2,\"39\":1,\"42\":7,\"45\":7,\"59\":1,\"62\":10}}],[\"顺序如下\",{\"1\":{\"29\":1}}],[\"斐波那契数列是一系列数字\",{\"1\":{\"29\":1}}],[\"斐波那契\",{\"0\":{\"29\":1}}],[\"问题可以分解为多次重复使用的子问题\",{\"1\":{\"28\":1}}],[\"问题的最优解可以从其子问题的最优解得到\",{\"1\":{\"28\":1}}],[\"问题的算法框架\",{\"0\":{\"27\":1}}],[\"问题必须具有以下属性\",{\"1\":{\"28\":1}}],[\"问题\",{\"1\":{\"28\":1}}],[\"动态规划\",{\"1\":{\"28\":1}}],[\"动态规划问题在算法中属于复杂的问题\",{\"1\":{\"27\":1}}],[\"什么是静态抽象接口方法\",{\"0\":{\"38\":1}}],[\"什么是动态规划\",{\"0\":{\"28\":1}}],[\"什么东西最终出现在哪里\",{\"1\":{\"7\":1}}],[\"然后配置如下\",{\"1\":{\"60\":1}}],[\"然后填充笑脸\",{\"1\":{\"59\":1}}],[\"然后选择油漆桶工具\",{\"1\":{\"59\":1}}],[\"然后在画布上绘制一个笑脸\",{\"1\":{\"59\":1}}],[\"然后我们将之前导出的\",{\"1\":{\"62\":1}}],[\"然后我们就可以使用\",{\"1\":{\"56\":1}}],[\"然后我们可以编写测试代码\",{\"1\":{\"39\":1}}],[\"然后将解压后得到的\",{\"1\":{\"51\":1}}],[\"然后将最优解与这些子问题相结合\",{\"1\":{\"33\":1}}],[\"然后设置相关的环境变量\",{\"1\":{\"50\":1}}],[\"然后也可以调用\",{\"1\":{\"45\":1}}],[\"然后实现\",{\"1\":{\"45\":1}}],[\"然后\",{\"1\":{\"39\":1}}],[\"然后使用\",{\"1\":{\"62\":1}}],[\"然后使用该序列创建\",{\"1\":{\"35\":1}}],[\"然后使用这些子问题的结果去得到更大问题的结果\",{\"1\":{\"28\":1}}],[\"然后慢慢加入一些内容进来\",{\"1\":{\"23\":1}}],[\"然而\",{\"1\":{\"27\":1,\"37\":1}}],[\"解压后是一个\",{\"1\":{\"52\":1}}],[\"解压下载得到的压缩包后\",{\"1\":{\"49\":1}}],[\"解决它实际上是很简单的\",{\"1\":{\"27\":1}}],[\"解决\",{\"0\":{\"27\":1}}],[\"解释原理\",{\"1\":{\"26\":1}}],[\"使用鼠标左键点击颜色选择器右侧的索引值为\",{\"1\":{\"59\":1}}],[\"使用工具\",{\"1\":{\"57\":1}}],[\"使用最新的\",{\"1\":{\"38\":1}}],[\"使用制表\",{\"0\":{\"31\":1}}],[\"使用备忘录\",{\"0\":{\"30\":1}}],[\"使用\",{\"0\":{\"57\":1,\"62\":1},\"1\":{\"26\":1,\"51\":1,\"62\":2}}],[\"使用齐次坐标\",{\"1\":{\"9\":1}}],[\"某个硬件模块的参数和设置\",{\"1\":{\"26\":1}}],[\"介绍\",{\"1\":{\"26\":1}}],[\"上面这些都配置好后\",{\"1\":{\"51\":1}}],[\"上\",{\"1\":{\"51\":1}}],[\"上搭建\",{\"1\":{\"47\":1}}],[\"上直接下载最新的\",{\"1\":{\"47\":1}}],[\"上述方法约束\",{\"1\":{\"45\":1}}],[\"上手比较简单\",{\"1\":{\"26\":1}}],[\"上运行的游戏\",{\"1\":{\"24\":1}}],[\"毕竟\",{\"1\":{\"26\":1}}],[\"开头的方法\",{\"1\":{\"42\":1}}],[\"开发工具包\",{\"1\":{\"46\":1}}],[\"开发\",{\"1\":{\"26\":1,\"46\":3}}],[\"开始编写主程序\",{\"1\":{\"62\":1}}],[\"开始编写程序\",{\"1\":{\"60\":1}}],[\"开始编程吧\",{\"0\":{\"61\":1}}],[\"开始的整数\",{\"1\":{\"34\":1}}],[\"开始\",{\"1\":{\"26\":1,\"62\":1}}],[\"开启\",{\"0\":{\"26\":1}}],[\"给大家带来现代的\",{\"1\":{\"26\":1}}],[\"传送门\",{\"1\":{\"25\":1}}],[\"的文件\",{\"1\":{\"62\":1}}],[\"的文件夹\",{\"1\":{\"49\":1}}],[\"的位置\",{\"1\":{\"62\":1}}],[\"的位图\",{\"1\":{\"57\":1}}],[\"的模式来进行开发\",{\"1\":{\"62\":1}}],[\"的配置文件\",{\"1\":{\"62\":2}}],[\"的配置文件中\",{\"1\":{\"51\":1}}],[\"的配置以及使用\",{\"1\":{\"62\":1}}],[\"的浅灰色色块\",{\"1\":{\"59\":1}}],[\"的黑色色块\",{\"1\":{\"59\":1}}],[\"的颜色变成了你所选色块的颜色\",{\"1\":{\"59\":1}}],[\"的颜色模式是索引色模式\",{\"1\":{\"59\":1}}],[\"的左侧工具栏\",{\"1\":{\"59\":1}}],[\"的最下方有一个颜色选择器\",{\"1\":{\"59\":1}}],[\"的瓦块的数据\",{\"1\":{\"62\":1}}],[\"的瓦块来表达\",{\"1\":{\"59\":1}}],[\"的瓦片组合而成的\",{\"1\":{\"59\":1}}],[\"的尺寸\",{\"1\":{\"59\":1}}],[\"的笑脸\",{\"1\":{\"59\":1}}],[\"的界面\",{\"1\":{\"58\":1}}],[\"的世界中\",{\"1\":{\"58\":1}}],[\"的屏幕中呢\",{\"1\":{\"57\":1}}],[\"的屏幕里打印一行\",{\"1\":{\"53\":1}}],[\"的同级目录打开命令行\",{\"1\":{\"55\":1}}],[\"的后续流程\",{\"1\":{\"51\":1}}],[\"的形式\",{\"1\":{\"51\":1}}],[\"的稳定版本为\",{\"1\":{\"48\":1}}],[\"的大部分指令集\",{\"1\":{\"46\":1}}],[\"的操作\",{\"1\":{\"37\":1}}],[\"的公有静态方法\",{\"1\":{\"37\":1}}],[\"的运行时类型\",{\"1\":{\"37\":1}}],[\"的静态抽象接口方法\",{\"0\":{\"36\":1}}],[\"的\",{\"1\":{\"35\":2,\"46\":1,\"58\":1,\"60\":1}}],[\"的新集合\",{\"1\":{\"35\":1}}],[\"的改进方式\",{\"1\":{\"32\":1}}],[\"的硬件原理\",{\"1\":{\"26\":1}}],[\"的开发之旅吧\",{\"0\":{\"26\":1}}],[\"的猫里奥\",{\"1\":{\"25\":1}}],[\"的内容\",{\"1\":{\"22\":1}}],[\"疫情期间我的创作欲比较强烈\",{\"1\":{\"25\":1}}],[\"语言编译器\",{\"1\":{\"46\":1}}],[\"语言\",{\"1\":{\"25\":1,\"46\":2}}],[\"年\",{\"1\":{\"25\":3}}],[\"当然也可以跟上面配置环境变量一样\",{\"1\":{\"51\":1}}],[\"当然\",{\"1\":{\"45\":1,\"57\":1,\"59\":2}}],[\"当我们在颜色选择器的右侧色块区域使用鼠标左键点击其中一个色块\",{\"1\":{\"59\":1}}],[\"当我们把\",{\"1\":{\"43\":1}}],[\"当我们计算斐波那契数列的时候\",{\"1\":{\"29\":1}}],[\"当我长大后了解它以后\",{\"1\":{\"24\":1}}],[\"当你理解它的关键概念和算法框架后\",{\"1\":{\"27\":1}}],[\"当函数在\",{\"1\":{\"18\":1}}],[\"不存在橡皮擦工具\",{\"1\":{\"59\":2}}],[\"不过那些都是半成品\",{\"1\":{\"25\":1}}],[\"不过很可惜\",{\"1\":{\"24\":1}}],[\"不同的渲染算法\",{\"1\":{\"7\":1}}],[\"曾是风靡全球的掌机\",{\"1\":{\"24\":1}}],[\"曾就职于紫龙游戏旗下游戏工作室\",{\"1\":{\"0\":1}}],[\"任天堂\",{\"1\":{\"24\":1}}],[\"更复杂一点的精灵\",{\"1\":{\"59\":1}}],[\"更适合阅读\",{\"1\":{\"23\":1}}],[\"更清爽\",{\"1\":{\"23\":1}}],[\"更为高效\",{\"1\":{\"9\":1}}],[\"希望这个博客更简约\",{\"1\":{\"23\":1}}],[\"希望能有志同道合的程序员\",{\"1\":{\"0\":1}}],[\"作为编译期能够确定的类型\",{\"1\":{\"37\":1}}],[\"作为主题\",{\"1\":{\"23\":1}}],[\"作用域到值域的一对一映射关系\",{\"1\":{\"11\":1}}],[\"h\",{\"1\":{\"60\":2,\"62\":2}}],[\"h>\",{\"1\":{\"54\":2,\"62\":2}}],[\"https\",{\"1\":{\"43\":1,\"52\":1}}],[\"hidebysig\",{\"1\":{\"42\":2}}],[\"hope\",{\"1\":{\"23\":1}}],[\"hexo\",{\"1\":{\"23\":1}}],[\"height\",{\"0\":{\"12\":1}}],[\"helloworld\",{\"1\":{\"54\":1,\"55\":4,\"56\":1,\"62\":1}}],[\"hello\",{\"0\":{\"53\":1},\"1\":{\"0\":1,\"47\":1,\"53\":1,\"54\":1,\"56\":1}}],[\"特性的更强大的静态页面生成器\",{\"1\":{\"23\":1}}],[\"这套规则去编译\",{\"1\":{\"62\":1}}],[\"这种形式直接运行游戏了\",{\"1\":{\"56\":1}}],[\"这里是\",{\"1\":{\"62\":1}}],[\"这里\",{\"1\":{\"57\":1}}],[\"这里我们命名为\",{\"1\":{\"60\":1}}],[\"这里我们选择\",{\"1\":{\"60\":2}}],[\"这里我们填入\",{\"1\":{\"60\":1}}],[\"这里我们希望精灵不要过于迷你\",{\"1\":{\"59\":1}}],[\"这里我们先下载准备好\",{\"1\":{\"51\":1}}],[\"这里我下载\",{\"1\":{\"52\":1}}],[\"这里我首先介绍如何在\",{\"1\":{\"47\":1}}],[\"这里结果是\",{\"1\":{\"43\":1}}],[\"这样\",{\"1\":{\"62\":1}}],[\"这样方便我们鼠标左右两个键在画布上绘制图形\",{\"1\":{\"59\":1}}],[\"这样我们可以更方便的使用一些预编译的可执行程序\",{\"1\":{\"50\":1}}],[\"这样的成本太高了\",{\"1\":{\"46\":1}}],[\"这样过于枯燥\",{\"1\":{\"26\":1}}],[\"这些模块的编译流程大多是重复的\",{\"1\":{\"62\":1}}],[\"这些基元类型也都实现了很多这种用于泛型数学运算的接口\",{\"1\":{\"45\":1}}],[\"这些接口就是为了进行一些泛型数学运算\",{\"1\":{\"45\":1}}],[\"这意味着\",{\"1\":{\"42\":1}}],[\"这意味着它从解决较小的子问题开始\",{\"1\":{\"28\":1}}],[\"这有助于降低算法的空间复杂性\",{\"1\":{\"32\":1}}],[\"这两种技术之间的选择通常取决于正在解决的具体问题和可用内存量\",{\"1\":{\"29\":1}}],[\"这允许算法避免将解决方案重新计算到子问题\",{\"1\":{\"29\":1}}],[\"这可以通过避免多次重新计算相同的子问题\",{\"1\":{\"29\":1}}],[\"这是因为\",{\"1\":{\"59\":1}}],[\"这是非常低的\",{\"1\":{\"57\":1}}],[\"这是什么意思\",{\"1\":{\"29\":1}}],[\"这是一种自下而上的方法\",{\"1\":{\"28\":1}}],[\"这个让人人都能进行\",{\"1\":{\"25\":1}}],[\"这个开发工具\",{\"1\":{\"25\":1}}],[\"这次\",{\"1\":{\"23\":1}}],[\"这一部分属于\",{\"1\":{\"22\":1}}],[\"我考虑使用开源\",{\"1\":{\"52\":1}}],[\"我最近习惯使用\",{\"1\":{\"47\":1}}],[\"我有一个公式\",{\"1\":{\"29\":1}}],[\"我会在讲开发细节的时候\",{\"1\":{\"26\":1}}],[\"我并不打算先讲\",{\"1\":{\"26\":1}}],[\"我并不打算使用\",{\"1\":{\"23\":1}}],[\"我打算先从比较硬核的\",{\"1\":{\"26\":1}}],[\"我打算还是用回\",{\"1\":{\"23\":1}}],[\"我想分享一些\",{\"1\":{\"26\":1}}],[\"我了解到\",{\"1\":{\"25\":2}}],[\"我与\",{\"0\":{\"25\":1}}],[\"我希望我可以开发一些可以在\",{\"1\":{\"24\":1}}],[\"我小时候并没有接触过它\",{\"1\":{\"24\":1}}],[\"我决定\",{\"1\":{\"23\":1}}],[\"我选择\",{\"1\":{\"23\":1}}],[\"我们的\",{\"1\":{\"62\":1}}],[\"我们编写一个叫做\",{\"1\":{\"62\":1}}],[\"我们以后的代码就拥有智能提示了\",{\"1\":{\"62\":1}}],[\"我们创建一个\",{\"1\":{\"62\":1}}],[\"我们都会使用\",{\"1\":{\"62\":1}}],[\"我们都会找到一个\",{\"1\":{\"35\":1}}],[\"我们就可以利用\",{\"1\":{\"60\":1}}],[\"我们就可以开始导出成\",{\"1\":{\"59\":1}}],[\"我们就可以这样运行\",{\"1\":{\"51\":1}}],[\"我们首先选择画笔工具\",{\"1\":{\"59\":1}}],[\"我们绘制一个\",{\"1\":{\"59\":1}}],[\"我们如何使用\",{\"1\":{\"57\":1}}],[\"我们直接设置这些文件的权限掩码为\",{\"1\":{\"51\":1}}],[\"我们在代码中会用到\",{\"1\":{\"60\":1}}],[\"我们在\",{\"1\":{\"51\":1}}],[\"我们会得到\",{\"1\":{\"51\":1}}],[\"我们后续会用到这两个工具\",{\"1\":{\"51\":1}}],[\"我们得到一个名为\",{\"1\":{\"49\":1}}],[\"我们也可以自己定义一个类型\",{\"1\":{\"45\":1}}],[\"我们也可以使用制表来解决这个问题\",{\"1\":{\"31\":1}}],[\"我们定义两个类型\",{\"1\":{\"43\":1}}],[\"我们约束\",{\"1\":{\"39\":1}}],[\"我们曾经的幻想\",{\"1\":{\"37\":1}}],[\"我们希望某些情况下\",{\"1\":{\"37\":1}}],[\"我们希望在泛型中进行数学运算\",{\"1\":{\"37\":1}}],[\"我们将\",{\"1\":{\"32\":1}}],[\"我们将使用\",{\"1\":{\"30\":1,\"31\":1}}],[\"我们只需要计算\",{\"1\":{\"30\":1}}],[\"我们通常使用哈希表去定义该结构\",{\"1\":{\"30\":1}}],[\"我们通常使用递归函数来计算斐波那契数列\",{\"1\":{\"29\":1}}],[\"我们可以直接使用\",{\"1\":{\"62\":1}}],[\"我们可以在\",{\"1\":{\"47\":1}}],[\"我们可以利用\",{\"1\":{\"46\":1}}],[\"我们可以利用上述新特性\",{\"1\":{\"39\":1}}],[\"我们可以定义一个数组或者一个向量来保存子问题的结果\",{\"1\":{\"31\":1}}],[\"我们可以定义一个查找表\",{\"1\":{\"30\":1}}],[\"我们可以使用\",{\"1\":{\"29\":1}}],[\"我们使用最为流行的\",{\"1\":{\"57\":1}}],[\"我们使用的技术并非\",{\"1\":{\"29\":1}}],[\"我们使用近邻\",{\"1\":{\"18\":1}}],[\"我们需要创建一个名为\",{\"1\":{\"35\":1}}],[\"我们需要\",{\"1\":{\"9\":1}}],[\"腾讯云的学生优惠马上就都用完了\",{\"1\":{\"23\":1}}],[\"阿里云\",{\"1\":{\"23\":1}}],[\"新的开始\",{\"0\":{\"23\":1}}],[\"科学计算\",{\"1\":{\"22\":1}}],[\"tools\",{\"1\":{\"51\":14}}],[\"tostring\",{\"1\":{\"39\":1,\"45\":2}}],[\"tile\",{\"1\":{\"51\":1,\"58\":3,\"62\":2}}],[\"t3\",{\"1\":{\"45\":2}}],[\"tself\",{\"1\":{\"45\":12}}],[\"tself>\",{\"1\":{\"45\":11}}],[\"t2\",{\"1\":{\"43\":8,\"45\":2}}],[\"t2>\",{\"1\":{\"43\":1}}],[\"t1\",{\"1\":{\"43\":8,\"45\":2}}],[\"t>\",{\"1\":{\"42\":1,\"45\":2}}],[\"type\",{\"1\":{\"42\":1,\"60\":1}}],[\"t\",{\"1\":{\"37\":11,\"39\":4,\"42\":6,\"45\":7}}],[\"tabulation\",{\"1\":{\"29\":1}}],[\"table\",{\"1\":{\"22\":1,\"30\":2}}],[\"tee\",{\"1\":{\"51\":6,\"56\":3}}],[\"test<deepinsourcecodebase\",{\"1\":{\"43\":1}}],[\"test<t1\",{\"1\":{\"43\":1}}],[\"test<t>\",{\"1\":{\"37\":1}}],[\"text\",{\"1\":{\"39\":4}}],[\"texture\",{\"0\":{\"15\":1}}],[\"terrain\",{\"1\":{\"12\":1}}],[\"泰勒级数与展开\",{\"1\":{\"22\":1}}],[\"常用数值方法\",{\"1\":{\"22\":1}}],[\"梯度向量\",{\"0\":{\"21\":1}}],[\"偏导数\",{\"0\":{\"20\":1}}],[\"move\",{\"1\":{\"62\":1}}],[\"mongodb\",{\"0\":{\"34\":1},\"1\":{\"34\":1}}],[\"mkdir\",{\"1\":{\"51\":1}}],[\"multiplyandsubcustomstruct>\",{\"1\":{\"45\":2}}],[\"multiplyandsubcustomstruct\",{\"1\":{\"45\":15}}],[\"multiplyandsub\",{\"1\":{\"45\":5}}],[\"multiplyandsub<t>\",{\"1\":{\"45\":1}}],[\"multiple\",{\"0\":{\"19\":1}}],[\"minvalue\",{\"1\":{\"45\":1}}],[\"microsoft\",{\"1\":{\"43\":1}}],[\"members\",{\"1\":{\"43\":1}}],[\"memo\",{\"1\":{\"30\":5}}],[\"memoization\",{\"1\":{\"29\":1}}],[\"method\",{\"1\":{\"42\":4}}],[\"mvid\",{\"1\":{\"42\":1}}],[\"m\",{\"1\":{\"35\":3,\"55\":1,\"62\":1}}],[\"make\",{\"1\":{\"62\":6}}],[\"makefile\",{\"0\":{\"62\":1},\"1\":{\"62\":7}}],[\"macframeworkpath\",{\"1\":{\"62\":1}}],[\"macos\",{\"1\":{\"47\":3,\"51\":4,\"52\":2,\"56\":3,\"58\":1,\"62\":1}}],[\"maxvalue\",{\"1\":{\"45\":1}}],[\"main\",{\"1\":{\"43\":2,\"54\":1,\"62\":1}}],[\"managed\",{\"1\":{\"42\":2}}],[\"manifolds\",{\"0\":{\"16\":1}}],[\"map<int\",{\"1\":{\"30\":1}}],[\"map\",{\"1\":{\"30\":1,\"51\":1,\"58\":1,\"62\":1}}],[\"mapping\",{\"0\":{\"15\":1}}],[\"maps\",{\"0\":{\"12\":1}}],[\"近邻\",{\"1\":{\"18\":1}}],[\"近邻可以用三角形\",{\"1\":{\"18\":1}}],[\"圆形来描述\",{\"1\":{\"18\":1}}],[\"矩形\",{\"1\":{\"18\":1}}],[\"情况\",{\"1\":{\"18\":1}}],[\"连续\",{\"1\":{\"18\":1}}],[\"连续性\",{\"0\":{\"18\":1}}],[\"又称为\",{\"1\":{\"18\":1}}],[\"在我们的设置中\",{\"1\":{\"62\":1}}],[\"在该文件夹下创建一个名为\",{\"1\":{\"62\":1}}],[\"在计算机图形学中指\",{\"1\":{\"57\":1}}],[\"在动态规划的背景下\",{\"1\":{\"33\":1}}],[\"在斐波那契问题中\",{\"1\":{\"33\":3}}],[\"在实现效果的前提下\",{\"1\":{\"26\":1}}],[\"在\",{\"0\":{\"34\":1},\"1\":{\"18\":1,\"30\":1,\"31\":1,\"34\":1,\"43\":1,\"53\":1,\"55\":1,\"58\":1,\"62\":1}}],[\"则鼠标左键即将绘制的颜色索引会变成你点击的那个色块的索引值\",{\"1\":{\"59\":1}}],[\"则\",{\"1\":{\"18\":2}}],[\"时\",{\"1\":{\"18\":1}}],[\"弧长积分\",{\"0\":{\"17\":1}}],[\"3f\",{\"1\":{\"45\":1}}],[\"34等\",{\"1\":{\"29\":1}}],[\"3\",{\"1\":{\"16\":1,\"29\":1,\"31\":1,\"32\":1,\"45\":2,\"59\":2}}],[\"3d\",{\"0\":{\"14\":2},\"1\":{\"45\":1}}],[\"2f\",{\"1\":{\"45\":1}}],[\"27a20d9e\",{\"1\":{\"42\":1}}],[\"21\",{\"1\":{\"29\":1}}],[\"2022\",{\"1\":{\"38\":1}}],[\"2021\",{\"1\":{\"25\":1}}],[\"2020\",{\"1\":{\"25\":1}}],[\"2018\",{\"1\":{\"25\":1}}],[\"2\",{\"1\":{\"16\":1,\"28\":1,\"29\":3,\"30\":2,\"31\":2,\"32\":1,\"33\":2,\"45\":2}}],[\"2d\",{\"0\":{\"13\":2},\"1\":{\"12\":1,\"18\":1,\"45\":1,\"57\":2}}],[\"一次\",{\"1\":{\"30\":1}}],[\"一般而言\",{\"1\":{\"29\":1}}],[\"一书中介绍了西欧数学的顺序\",{\"1\":{\"29\":1}}],[\"一个宏\",{\"1\":{\"62\":1}}],[\"一个经典的问题\",{\"0\":{\"29\":1}}],[\"一个体\",{\"1\":{\"16\":1}}],[\"一个表面\",{\"1\":{\"16\":1}}],[\"一条曲线\",{\"1\":{\"16\":1}}],[\"一名游戏开发者\",{\"1\":{\"0\":1}}],[\"16\",{\"1\":{\"59\":2}}],[\"160\",{\"1\":{\"57\":1}}],[\"144\",{\"1\":{\"57\":1}}],[\"15\",{\"1\":{\"52\":1}}],[\"1d\",{\"1\":{\"45\":1}}],[\"1f\",{\"1\":{\"45\":1}}],[\"10\",{\"1\":{\"39\":1}}],[\"11\",{\"0\":{\"36\":1},\"1\":{\"36\":1,\"38\":1}}],[\"1202年\",{\"1\":{\"29\":1}}],[\"13\",{\"1\":{\"29\":1}}],[\"1\",{\"1\":{\"16\":1,\"28\":1,\"29\":5,\"30\":3,\"31\":4,\"32\":4,\"33\":2,\"34\":1,\"39\":1,\"42\":2,\"45\":4,\"48\":2,\"59\":3,\"62\":2}}],[\"流形\",{\"0\":{\"16\":1},\"1\":{\"16\":3}}],[\"us\",{\"1\":{\"43\":1}}],[\"up\",{\"1\":{\"30\":1}}],[\"u\",{\"1\":{\"15\":1}}],[\"unsigned\",{\"1\":{\"42\":2}}],[\"unordered\",{\"1\":{\"30\":2}}],[\"unreal\",{\"1\":{\"0\":1}}],[\"unity\",{\"1\":{\"0\":1}}],[\"把纹理映射到物体表面的关系可以描述为\",{\"1\":{\"15\":1}}],[\"纹理映射\",{\"0\":{\"15\":1}}],[\"其实不是\",{\"1\":{\"43\":1}}],[\"其实\",{\"1\":{\"29\":1}}],[\"其中的文件结构如下\",{\"1\":{\"49\":1}}],[\"其中我们插入一些有两个字段的模型\",{\"1\":{\"35\":1}}],[\"其中每个数字都是前两个数字的总和\",{\"1\":{\"29\":1}}],[\"其中\",{\"1\":{\"13\":1,\"14\":1,\"15\":1}}],[\"其他诸如\",{\"1\":{\"45\":1}}],[\"其他小框架例如\",{\"1\":{\"0\":1}}],[\"其他语言则可以熟练编写\",{\"1\":{\"0\":1}}],[\"p\",{\"1\":{\"51\":1}}],[\"pdb\",{\"1\":{\"42\":1}}],[\"point\",{\"1\":{\"42\":1}}],[\"playground\",{\"0\":{\"40\":1,\"44\":1}}],[\"printf\",{\"1\":{\"54\":1}}],[\"private\",{\"1\":{\"39\":1}}],[\"properties\",{\"1\":{\"62\":1}}],[\"profile\",{\"1\":{\"50\":1,\"51\":4,\"56\":2}}],[\"program\",{\"1\":{\"43\":1}}],[\"preview\",{\"1\":{\"38\":1}}],[\"pre\",{\"1\":{\"32\":4}}],[\"publickeytoken=null\",{\"1\":{\"42\":1}}],[\"public\",{\"1\":{\"37\":3,\"39\":6,\"42\":4,\"43\":8,\"45\":12}}],[\"path\",{\"1\":{\"50\":1}}],[\"pages\",{\"1\":{\"23\":1}}],[\"param\",{\"1\":{\"42\":1}}],[\"parametric\",{\"0\":{\"13\":1,\"14\":1}}],[\"partial\",{\"0\":{\"20\":1}}],[\"pygame\",{\"1\":{\"0\":1}}],[\"python\",{\"1\":{\"0\":1}}],[\"参数曲线\",{\"0\":{\"13\":1,\"14\":1}}],[\"通过本地库\",{\"1\":{\"51\":1}}],[\"通过使用状态转换方程\",{\"1\":{\"33\":1}}],[\"通过应用矩阵来改变坐标系\",{\"1\":{\"8\":1}}],[\"通常可以用高度图来描述地形\",{\"1\":{\"12\":1}}],[\"图\",{\"1\":{\"12\":1}}],[\"高手们习惯使用汇编\",{\"1\":{\"46\":1}}],[\"高度图是一个\",{\"1\":{\"12\":1}}],[\"高度图可以描述为\",{\"1\":{\"12\":1}}],[\"高度图\",{\"0\":{\"12\":1}}],[\"高效地应用一系列变换\",{\"1\":{\"9\":1}}],[\"提示\",{\"1\":{\"11\":1,\"29\":1,\"33\":1,\"50\":1,\"51\":1,\"56\":1,\"62\":1}}],[\"函数调用树存在多个节点\",{\"1\":{\"29\":1}}],[\"函数\",{\"0\":{\"11\":1},\"1\":{\"31\":1}}],[\"基础概念\",{\"0\":{\"10\":1}}],[\"齐次矩阵\",{\"1\":{\"9\":1}}],[\"齐次坐标\",{\"1\":{\"7\":1}}],[\"比较像\",{\"1\":{\"46\":1}}],[\"比较熟悉\",{\"1\":{\"0\":1}}],[\"比使用笛卡尔坐标\",{\"1\":{\"9\":1}}],[\"zshrc\",{\"1\":{\"51\":3,\"56\":2}}],[\"z80\",{\"1\":{\"46\":4}}],[\"z\",{\"1\":{\"9\":2,\"14\":1,\"15\":1}}],[\"y\",{\"1\":{\"9\":2,\"13\":1,\"14\":1,\"15\":1}}],[\"xxx\",{\"1\":{\"37\":1}}],[\"x\",{\"1\":{\"9\":2,\"13\":1,\"14\":1,\"15\":1}}],[\"透视矩阵形式\",{\"1\":{\"9\":1}}],[\"平移矩阵形式\",{\"1\":{\"9\":1}}],[\"为例\",{\"1\":{\"45\":1}}],[\"为什么是\",{\"1\":{\"59\":1}}],[\"为什么要有静态抽象接口方法\",{\"0\":{\"37\":1}}],[\"为什么我们需要齐次坐标\",{\"0\":{\"9\":1}}],[\"为\",{\"1\":{\"35\":1,\"62\":1}}],[\"为了备份\",{\"1\":{\"59\":1}}],[\"为了永久生效\",{\"1\":{\"50\":1}}],[\"为了支持泛型数学\",{\"1\":{\"45\":1}}],[\"为了满足这些需求\",{\"1\":{\"37\":1}}],[\"为了解决这个问题\",{\"1\":{\"35\":1}}],[\"为了使用备忘录\",{\"1\":{\"30\":1}}],[\"为了提高我的英文写作能力\",{\"1\":{\"23\":1}}],[\"为了节约\",{\"1\":{\"23\":1}}],[\"为游戏提供强大的技术支持\",{\"1\":{\"0\":1}}],[\"downloads\",{\"1\":{\"52\":1}}],[\"double\",{\"1\":{\"45\":1}}],[\"dotnet\",{\"1\":{\"0\":1,\"43\":1}}],[\"data\",{\"1\":{\"42\":1,\"62\":1}}],[\"dll\",{\"1\":{\"42\":1,\"51\":1}}],[\"d\",{\"1\":{\"31\":5,\"32\":1}}],[\"dp\",{\"0\":{\"27\":1,\"28\":1},\"1\":{\"28\":2,\"29\":3,\"33\":4}}],[\"defines\",{\"1\":{\"62\":1}}],[\"designer\",{\"1\":{\"51\":1,\"58\":1}}],[\"dev\",{\"1\":{\"62\":4}}],[\"development\",{\"1\":{\"46\":1}}],[\"device\",{\"1\":{\"8\":1}}],[\"deepinsourcecodetester\",{\"1\":{\"43\":2}}],[\"deepinsourcecodederived>\",{\"1\":{\"43\":1}}],[\"deepinsourcecodederived\",{\"1\":{\"43\":2}}],[\"deepinsourcecodebase\",{\"1\":{\"43\":4}}],[\"debug\",{\"1\":{\"42\":2}}],[\"demo\",{\"1\":{\"25\":1}}],[\"derivatives\",{\"0\":{\"20\":1}}],[\"dcs\",{\"1\":{\"8\":2}}],[\"name\",{\"1\":{\"62\":1}}],[\"noi\",{\"1\":{\"62\":1}}],[\"no\",{\"1\":{\"62\":4}}],[\"not\",{\"1\":{\"51\":1}}],[\"normalized\",{\"1\":{\"8\":1}}],[\"nullableattribute\",{\"1\":{\"42\":1}}],[\"numerical\",{\"0\":{\"22\":1}}],[\"negativeone\",{\"1\":{\"45\":1}}],[\"newslot\",{\"1\":{\"42\":2}}],[\"new\",{\"1\":{\"39\":2,\"43\":7,\"45\":5}}],[\"net7\",{\"1\":{\"42\":2}}],[\"net\",{\"0\":{\"45\":1},\"1\":{\"36\":1,\"38\":2,\"45\":1}}],[\"neighbourhoods\",{\"1\":{\"18\":2}}],[\"n\",{\"1\":{\"29\":6,\"30\":10,\"31\":7,\"32\":5,\"33\":3}}],[\"ndcs\",{\"1\":{\"8\":1}}],[\"vsc\",{\"1\":{\"62\":1}}],[\"vscode\",{\"1\":{\"62\":1}}],[\"v0\",{\"1\":{\"52\":1}}],[\"v4\",{\"1\":{\"48\":1}}],[\"value\",{\"1\":{\"45\":9}}],[\"var\",{\"1\":{\"39\":1}}],[\"variables\",{\"0\":{\"19\":1}}],[\"version\",{\"1\":{\"62\":1}}],[\"version=1\",{\"1\":{\"42\":1}}],[\"vector<int>\",{\"1\":{\"31\":1}}],[\"vector\",{\"0\":{\"21\":1},\"1\":{\"31\":1}}],[\"virtual\",{\"1\":{\"38\":2,\"42\":2,\"43\":2}}],[\"visual\",{\"0\":{\"62\":1},\"1\":{\"38\":1,\"62\":3}}],[\"view\",{\"1\":{\"8\":1}}],[\"void\",{\"1\":{\"37\":2,\"42\":5,\"43\":6,\"45\":1,\"54\":1,\"62\":1}}],[\"volume\",{\"1\":{\"16\":1}}],[\"vuepress\",{\"1\":{\"23\":1}}],[\"vue\",{\"1\":{\"23\":1}}],[\"v\",{\"1\":{\"15\":1}}],[\"vcs\",{\"1\":{\"8\":1}}],[\"是\",{\"1\":{\"62\":1}}],[\"是开源工具\",{\"1\":{\"47\":1}}],[\"是否支持诸如加减乘除的数学运算\",{\"1\":{\"37\":1}}],[\"是一样的步骤\",{\"1\":{\"47\":1}}],[\"是一种通过将复杂问题分解为更小的子问题从而解决它们的方法\",{\"1\":{\"28\":1}}],[\"是一个三维坐标点\",{\"1\":{\"14\":1}}],[\"是一个二维坐标点\",{\"1\":{\"13\":1}}],[\"是设备坐标系\",{\"1\":{\"8\":1}}],[\"是标准化设备坐标系\",{\"1\":{\"8\":1}}],[\"是裁剪坐标系\",{\"1\":{\"8\":1}}],[\"是视图坐标系\",{\"1\":{\"8\":1}}],[\"是世界坐标系\",{\"1\":{\"8\":1}}],[\"是对象坐标系\",{\"1\":{\"8\":1}}],[\"wl\",{\"1\":{\"55\":2,\"62\":2}}],[\"wa\",{\"1\":{\"55\":1,\"62\":1}}],[\"wine\",{\"1\":{\"51\":12}}],[\"windows\",{\"1\":{\"47\":1,\"51\":1}}],[\"with\",{\"1\":{\"39\":1}}],[\"writeline\",{\"1\":{\"39\":1,\"43\":4,\"45\":1}}],[\"where\",{\"1\":{\"37\":2,\"39\":1,\"42\":1,\"43\":4,\"45\":5}}],[\"w\",{\"1\":{\"9\":1}}],[\"wcs\",{\"1\":{\"8\":1}}],[\"world\",{\"0\":{\"53\":1},\"1\":{\"0\":1,\"8\":1,\"47\":1,\"53\":1,\"54\":1,\"56\":1}}],[\"ok\",{\"1\":{\"60\":1}}],[\"o\",{\"1\":{\"55\":1,\"62\":2}}],[\"opt\",{\"1\":{\"50\":2}}],[\"operator\",{\"1\":{\"39\":2,\"45\":2}}],[\"override\",{\"1\":{\"39\":1,\"43\":1}}],[\"other\",{\"1\":{\"39\":4}}],[\"of\",{\"0\":{\"19\":1},\"1\":{\"42\":3}}],[\"object\",{\"1\":{\"8\":1,\"34\":1}}],[\"ocs\",{\"1\":{\"8\":1}}],[\"坐标系\",{\"0\":{\"8\":1},\"1\":{\"8\":1}}],[\"着色\",{\"1\":{\"7\":1}}],[\"它功能丰富\",{\"1\":{\"52\":1}}],[\"它兼容\",{\"1\":{\"46\":1}}],[\"它包括编译器\",{\"1\":{\"46\":1}}],[\"它现在要实现更多的接口\",{\"1\":{\"45\":1}}],[\"它的界面是这样的\",{\"1\":{\"58\":1}}],[\"它的\",{\"1\":{\"42\":1}}],[\"它支持在接口中声明\",{\"1\":{\"38\":1}}],[\"它描述了如何从最优解到其子问题构建问题的最优解\",{\"1\":{\"33\":1}}],[\"它涉及使用较小的数据结构\",{\"1\":{\"32\":1}}],[\"它是什么\",{\"1\":{\"36\":1}}],[\"它是什么颜色\",{\"1\":{\"7\":1}}],[\"它是自下而上的\",{\"1\":{\"29\":1}}],[\"它是自上而下的\",{\"1\":{\"29\":1}}],[\"它能看到什么\",{\"1\":{\"7\":1}}],[\"胶片交互进行建模\",{\"1\":{\"7\":1}}],[\"投影\",{\"1\":{\"7\":1}}],[\"交点\",{\"1\":{\"7\":1}}],[\"对比发现\",{\"1\":{\"42\":1}}],[\"对应\",{\"1\":{\"36\":1,\"38\":1}}],[\"对它产生了浓厚的兴趣\",{\"1\":{\"24\":1}}],[\"对于现在而言\",{\"1\":{\"57\":1}}],[\"对于经典的\",{\"1\":{\"46\":1}}],[\"对于开发工具\",{\"1\":{\"26\":1}}],[\"对于\",{\"1\":{\"18\":1}}],[\"对于给定的\",{\"1\":{\"18\":1}}],[\"对光\",{\"1\":{\"7\":1}}],[\"对感知过程进行建模\",{\"1\":{\"7\":1}}],[\"对我们的摄像机建模\",{\"1\":{\"7\":1}}],[\"摄像机模型\",{\"1\":{\"7\":1}}],[\"渲染步骤\",{\"0\":{\"7\":1}}],[\"渲染和变换\",{\"0\":{\"4\":1}}],[\"向量的叉乘\",{\"0\":{\"6\":1}}],[\"向量点乘的应用\",{\"0\":{\"5\":1},\"1\":{\"5\":1}}],[\"gnu99\",{\"1\":{\"62\":1}}],[\"gameboy\",{\"1\":{\"24\":2,\"46\":3,\"51\":2,\"53\":1,\"57\":2,\"58\":2,\"59\":2,\"60\":1}}],[\"github\",{\"1\":{\"23\":1,\"47\":1,\"52\":1}}],[\"gradient\",{\"0\":{\"21\":1}}],[\"goldminer\",{\"0\":{\"3\":1}}],[\"godot\",{\"1\":{\"0\":1}}],[\"gbr\",{\"1\":{\"59\":1,\"60\":1}}],[\"gbmb=\",{\"1\":{\"51\":3}}],[\"gbmb\",{\"0\":{\"51\":1},\"1\":{\"51\":16,\"58\":3}}],[\"gbtd=\",{\"1\":{\"51\":3}}],[\"gbtd\",{\"0\":{\"51\":1,\"58\":1},\"1\":{\"51\":16,\"57\":1,\"58\":5,\"59\":7}}],[\"gbdkdir\",{\"1\":{\"50\":1,\"62\":3}}],[\"gbdk\",{\"0\":{\"46\":1,\"47\":1,\"48\":1,\"50\":1,\"51\":1,\"57\":1},\"1\":{\"25\":1,\"26\":2,\"46\":4,\"47\":2,\"48\":1,\"49\":2,\"50\":3,\"51\":1,\"57\":2,\"58\":1,\"59\":1,\"60\":3,\"62\":1}}],[\"gbc\",{\"0\":{\"24\":1,\"25\":1,\"26\":1},\"1\":{\"25\":2,\"26\":4,\"46\":4}}],[\"gb\",{\"0\":{\"2\":1,\"24\":1,\"25\":1,\"26\":1},\"1\":{\"25\":3,\"26\":5,\"46\":4,\"54\":1,\"55\":2,\"56\":1,\"62\":11}}],[\"也让编译流程更加清晰\",{\"1\":{\"62\":1}}],[\"也使用\",{\"1\":{\"56\":1}}],[\"也是类似的步骤\",{\"1\":{\"47\":1}}],[\"也就是我们熟悉的\",{\"1\":{\"55\":1}}],[\"也就是\",{\"1\":{\"13\":1,\"14\":1}}],[\"也可以交流开发相关的内容\",{\"1\":{\"1\":1}}],[\"也略知一二\",{\"1\":{\"0\":1}}],[\"以\",{\"1\":{\"45\":1}}],[\"以找到较大问题的最优解来解决问题\",{\"1\":{\"33\":1}}],[\"以及怎么使用它\",{\"1\":{\"36\":1}}],[\"以及\",{\"1\":{\"33\":1}}],[\"以及其他开源引擎\",{\"1\":{\"0\":1}}],[\"以便以后可以重复使用\",{\"1\":{\"29\":1}}],[\"以矩阵形式表示透视\",{\"1\":{\"9\":1}}],[\"以矩阵形式表示平移\",{\"1\":{\"9\":1}}],[\"以下游戏均为本人自制的游戏\",{\"1\":{\"1\":1}}],[\"游戏中\",{\"1\":{\"57\":1}}],[\"游戏开发教程系列\",{\"1\":{\"26\":1}}],[\"游戏开发相关的知识\",{\"1\":{\"26\":1}}],[\"游戏开发的神奇工具\",{\"1\":{\"25\":1}}],[\"游戏开发的故事\",{\"0\":{\"25\":1}}],[\"游戏开发\",{\"0\":{\"24\":1}}],[\"游戏开发者能够互相交流技术\",{\"1\":{\"0\":1}}],[\"游戏画廊\",{\"0\":{\"1\":1}}],[\"sym\",{\"1\":{\"62\":1}}],[\"system\",{\"1\":{\"8\":5,\"42\":1}}],[\"show\",{\"1\":{\"62\":1}}],[\"shell\",{\"1\":{\"50\":1,\"51\":2}}],[\"set\",{\"1\":{\"62\":2}}],[\"sequence\",{\"1\":{\"35\":1,\"42\":1}}],[\"smile\",{\"1\":{\"60\":4,\"62\":6}}],[\"sprites\",{\"1\":{\"62\":1}}],[\"sprite\",{\"1\":{\"57\":1,\"62\":6}}],[\"sameboy=\",{\"1\":{\"56\":3}}],[\"sameboy\",{\"0\":{\"52\":1,\"56\":1},\"1\":{\"52\":2,\"56\":8,\"62\":5}}],[\"sdcc\",{\"1\":{\"46\":1}}],[\"sdl2\",{\"1\":{\"0\":1}}],[\"single\",{\"1\":{\"45\":1}}],[\"somestaticabstractmethodderived\",{\"1\":{\"43\":2}}],[\"somestaticabstractmethodbase\",{\"1\":{\"43\":4}}],[\"somestaticabstractmethod\",{\"1\":{\"42\":3,\"43\":5}}],[\"somestaticmethod\",{\"1\":{\"37\":2}}],[\"somemethodderived\",{\"1\":{\"43\":3}}],[\"somemethodbase\",{\"1\":{\"43\":3}}],[\"somemethod\",{\"1\":{\"42\":3,\"43\":5}}],[\"sudo\",{\"1\":{\"50\":1,\"51\":10,\"56\":3}}],[\"sum\",{\"1\":{\"32\":2}}],[\"surface\",{\"1\":{\"16\":1}}],[\"str++\",{\"1\":{\"39\":1}}],[\"str\",{\"1\":{\"39\":1}}],[\"string\",{\"1\":{\"39\":3,\"43\":1,\"45\":2}}],[\"struct\",{\"1\":{\"39\":1,\"45\":2}}],[\"staticabstractinterfacemethods\",{\"1\":{\"42\":10}}],[\"static\",{\"1\":{\"37\":1,\"38\":3,\"39\":2,\"42\":8,\"43\":5,\"45\":10}}],[\"std\",{\"1\":{\"30\":2,\"31\":2}}],[\"studio\",{\"0\":{\"62\":1},\"1\":{\"0\":1,\"25\":2,\"26\":1,\"38\":1,\"62\":3}}],[\"lst\",{\"1\":{\"62\":1}}],[\"lcdc\",{\"1\":{\"62\":1}}],[\"lcc\",{\"1\":{\"55\":1,\"62\":3}}],[\"label\",{\"1\":{\"60\":1}}],[\"language\",{\"1\":{\"43\":1}}],[\"l\",{\"1\":{\"55\":1,\"59\":1,\"62\":1}}],[\"linux\",{\"1\":{\"47\":1,\"51\":4,\"58\":1}}],[\"liber\",{\"1\":{\"29\":1}}],[\"left\",{\"1\":{\"45\":4}}],[\"learn\",{\"1\":{\"43\":1}}],[\"length\",{\"0\":{\"17\":1}}],[\"location\",{\"1\":{\"42\":1}}],[\"look\",{\"1\":{\"30\":1}}],[\"lookup\",{\"1\":{\"22\":1}}],[\"love2d\",{\"1\":{\"0\":1}}],[\"lua\",{\"1\":{\"0\":1}}],[\"和我当时已掌握的\",{\"1\":{\"25\":1}}],[\"和\",{\"1\":{\"0\":1,\"32\":1,\"42\":1,\"46\":2,\"47\":1,\"51\":7,\"58\":1,\"60\":1,\"62\":1}}],[\"正在研究\",{\"1\":{\"0\":1}}],[\"熟悉的游戏引擎主要是\",{\"1\":{\"0\":1}}],[\"熟悉的语言是\",{\"1\":{\"0\":1}}],[\"未来想转行成为一名游戏引擎开发工程师或者图形程序\",{\"1\":{\"0\":1}}],[\"具有两年的多线程和高性能服务器开发经验\",{\"1\":{\"0\":1}}],[\"程序由于是单文件\",{\"1\":{\"62\":1}}],[\"程序\",{\"1\":{\"0\":1,\"47\":1}}],[\"cc\",{\"1\":{\"62\":2}}],[\"ccs\",{\"1\":{\"8\":1}}],[\"cstandard\",{\"1\":{\"62\":1}}],[\"csharp\",{\"1\":{\"43\":1}}],[\"cdb\",{\"1\":{\"62\":1}}],[\"cd\",{\"1\":{\"51\":1}}],[\"cpp\",{\"1\":{\"62\":1}}],[\"cp\",{\"1\":{\"50\":1,\"51\":2}}],[\"cpu\",{\"1\":{\"46\":1}}],[\"cil\",{\"1\":{\"42\":2}}],[\"ctor\",{\"1\":{\"42\":1}}],[\"clean\",{\"1\":{\"62\":3}}],[\"class\",{\"1\":{\"42\":4,\"43\":4}}],[\"clipping\",{\"1\":{\"8\":1}}],[\"c658\",{\"1\":{\"42\":1}}],[\"custom\",{\"1\":{\"42\":1}}],[\"culture=neutral\",{\"1\":{\"42\":1}}],[\"curr\",{\"1\":{\"32\":6}}],[\"curve\",{\"0\":{\"13\":1,\"14\":1},\"1\":{\"16\":1}}],[\"chmod\",{\"1\":{\"51\":1}}],[\"ch\",{\"1\":{\"39\":3}}],[\"char\",{\"1\":{\"39\":1}}],[\"can\",{\"1\":{\"42\":2}}],[\"cases\",{\"1\":{\"33\":2}}],[\"cache\",{\"1\":{\"30\":1}}],[\"calculus\",{\"0\":{\"19\":1,\"22\":1}}],[\"catmario\",{\"0\":{\"2\":1}}],[\"code\",{\"0\":{\"62\":1},\"1\":{\"62\":3}}],[\"color\",{\"1\":{\"60\":1}}],[\"collectionname\",{\"1\":{\"35\":2}}],[\"com\",{\"1\":{\"43\":1}}],[\"compilerpath\",{\"1\":{\"62\":1}}],[\"compilerservices\",{\"1\":{\"42\":1}}],[\"comp5930m\",{\"1\":{\"22\":1}}],[\"configurations\",{\"1\":{\"62\":1}}],[\"contents\",{\"1\":{\"56\":3,\"62\":1}}],[\"continuity\",{\"0\":{\"18\":1}}],[\"console\",{\"1\":{\"39\":1,\"43\":4,\"45\":1}}],[\"constraint\",{\"1\":{\"42\":1}}],[\"const\",{\"1\":{\"39\":1}}],[\"count\",{\"1\":{\"30\":1}}],[\"coordinate\",{\"1\":{\"8\":5}}],[\"c++\",{\"1\":{\"0\":1,\"30\":1,\"31\":1}}],[\"c\",{\"0\":{\"36\":1},\"1\":{\"0\":2,\"25\":1,\"35\":3,\"36\":1,\"38\":1,\"46\":3,\"54\":1,\"55\":2,\"57\":3,\"58\":1,\"59\":1,\"60\":8,\"62\":5}}],[\"服务端方向\",{\"1\":{\"0\":1}}],[\"爱好声乐与编曲\",{\"1\":{\"0\":1}}],[\"喜欢电子产品\",{\"1\":{\"0\":1}}]],\"version\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
