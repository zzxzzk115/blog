const t=JSON.parse(`{"key":"v-6b3cd122","path":"/posts/programming-languages/csharp/static-abstract-members-in-interfaces.html","title":"Deeply dive into static abstract interface methods in C# 11","lang":"en-US","frontmatter":{"title":"Deeply dive into static abstract interface methods in C# 11","author":"Lazy_V","date":"2022-11-30T00:00:00.000Z","category":["Programming Languages"],"tag":["Programming Languages","C#",".NET","Interfaces"],"star":true,"isOriginal":true,"description":"Static abstract interface method is a new feature in C# 11 (corresponding .NET 7.0). In this article, we are going to deeply dive into it, talk about why we need it, what it is and how to use it.","head":[["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://zzxzzk115.github.io/blog/zh/posts/programming-languages/csharp/static-abstract-members-in-interfaces.html"}],["meta",{"property":"og:url","content":"https://zzxzzk115.github.io/blog/posts/programming-languages/csharp/static-abstract-members-in-interfaces.html"}],["meta",{"property":"og:site_name","content":"Lazy_V's Blog"}],["meta",{"property":"og:title","content":"Deeply dive into static abstract interface methods in C# 11"}],["meta",{"property":"og:description","content":"Static abstract interface method is a new feature in C# 11 (corresponding .NET 7.0). In this article, we are going to deeply dive into it, talk about why we need it, what it is and how to use it."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2022-12-17T14:58:15.000Z"}],["meta",{"property":"article:author","content":"Lazy_V"}],["meta",{"property":"article:tag","content":"Programming Languages"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":".NET"}],["meta",{"property":"article:tag","content":"Interfaces"}],["meta",{"property":"article:published_time","content":"2022-11-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-17T14:58:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Deeply dive into static abstract interface methods in C# 11\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-30T00:00:00.000Z\\",\\"dateModified\\":\\"2022-12-17T14:58:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lazy_V\\"}]}"]]},"headers":[{"level":2,"title":"Why we need it","slug":"why-we-need-it","link":"#why-we-need-it","children":[]},{"level":2,"title":"What is it","slug":"what-is-it","link":"#what-is-it","children":[]},{"level":2,"title":"How to use it","slug":"how-to-use-it","link":"#how-to-use-it","children":[{"level":3,"title":"Playground","slug":"playground","link":"#playground","children":[]}]},{"level":2,"title":"Analysing from code aspect","slug":"analysing-from-code-aspect","link":"#analysing-from-code-aspect","children":[{"level":3,"title":"Let's look at IL codes","slug":"let-s-look-at-il-codes","link":"#let-s-look-at-il-codes","children":[]},{"level":3,"title":"Let's try the inheritance relationship","slug":"let-s-try-the-inheritance-relationship","link":"#let-s-try-the-inheritance-relationship","children":[]},{"level":3,"title":"Playground","slug":"playground-1","link":"#playground-1","children":[]}]},{"level":2,"title":"How does .NET support Generic Math?","slug":"how-does-net-support-generic-math","link":"#how-does-net-support-generic-math","children":[]}],"git":{"createdTime":1669822768000,"updatedTime":1671289095000,"contributors":[{"name":"Lazy_V","email":"954294627@qq.com","commits":3}]},"readingTime":{"minutes":4.9,"words":1471},"filePathRelative":"posts/programming-languages/csharp/static-abstract-members-in-interfaces.md","localizedDate":"November 30, 2022","excerpt":"<p>Static abstract interface method is a new feature in C# 11 (corresponding .NET 7.0). In this article, we are going to deeply dive into it, talk about why we need it, what it is and how to use it.</p>\\n","autoDesc":true}`);export{t as data};
