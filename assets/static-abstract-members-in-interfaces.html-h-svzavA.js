const t=JSON.parse('{"key":"v-99eba95a","path":"/zh/posts/programming-languages/csharp/static-abstract-members-in-interfaces.html","title":"深入探究 C# 11 的静态抽象接口方法","lang":"zh-CN","frontmatter":{"title":"深入探究 C# 11 的静态抽象接口方法","author":"Lazy_V","date":"2022-11-30T00:00:00.000Z","category":["编程语言"],"tag":["编程语言","C#",".NET","接口"],"star":true,"isOriginal":true,"description":"静态抽象接口方法是 C# 11 (对应 .NET 7.0) 引入的新特性。本篇我们来探究一下为什么要有它、它是什么，以及怎么使用它。","head":[["link",{"rel":"alternate","hreflang":"en-us","href":"https://zzxzzk115.github.io/blog/posts/programming-languages/csharp/static-abstract-members-in-interfaces.html"}],["meta",{"property":"og:url","content":"https://zzxzzk115.github.io/blog/zh/posts/programming-languages/csharp/static-abstract-members-in-interfaces.html"}],["meta",{"property":"og:site_name","content":"Lazy_V 的博客"}],["meta",{"property":"og:title","content":"深入探究 C# 11 的静态抽象接口方法"}],["meta",{"property":"og:description","content":"静态抽象接口方法是 C# 11 (对应 .NET 7.0) 引入的新特性。本篇我们来探究一下为什么要有它、它是什么，以及怎么使用它。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2022-12-17T14:58:15.000Z"}],["meta",{"property":"article:author","content":"Lazy_V"}],["meta",{"property":"article:tag","content":"编程语言"}],["meta",{"property":"article:tag","content":"C#"}],["meta",{"property":"article:tag","content":".NET"}],["meta",{"property":"article:tag","content":"接口"}],["meta",{"property":"article:published_time","content":"2022-11-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2022-12-17T14:58:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"深入探究 C# 11 的静态抽象接口方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-11-30T00:00:00.000Z\\",\\"dateModified\\":\\"2022-12-17T14:58:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Lazy_V\\"}]}"]]},"headers":[{"level":2,"title":"为什么要有静态抽象接口方法","slug":"为什么要有静态抽象接口方法","link":"#为什么要有静态抽象接口方法","children":[]},{"level":2,"title":"什么是静态抽象接口方法","slug":"什么是静态抽象接口方法","link":"#什么是静态抽象接口方法","children":[]},{"level":2,"title":"怎么样使用静态抽象接口方法","slug":"怎么样使用静态抽象接口方法","link":"#怎么样使用静态抽象接口方法","children":[{"level":3,"title":"Playground","slug":"playground","link":"#playground","children":[]}]},{"level":2,"title":"从代码角度分析","slug":"从代码角度分析","link":"#从代码角度分析","children":[{"level":3,"title":"看看 IL","slug":"看看-il","link":"#看看-il","children":[]},{"level":3,"title":"试一试继承关系","slug":"试一试继承关系","link":"#试一试继承关系","children":[]},{"level":3,"title":"Playground","slug":"playground-1","link":"#playground-1","children":[]}]},{"level":2,"title":".NET 如何支持泛型数学","slug":"net-如何支持泛型数学","link":"#net-如何支持泛型数学","children":[]}],"git":{"createdTime":1669814637000,"updatedTime":1671289095000,"contributors":[{"name":"Lazy_V","email":"954294627@qq.com","commits":5}]},"readingTime":{"minutes":6.05,"words":1814},"filePathRelative":"zh/posts/programming-languages/csharp/static-abstract-members-in-interfaces.md","localizedDate":"2022年11月30日","excerpt":"<p>静态抽象接口方法是 C# 11 (对应 .NET 7.0) 引入的新特性。本篇我们来探究一下为什么要有它、它是什么，以及怎么使用它。</p>\\n","autoDesc":true}');export{t as data};
