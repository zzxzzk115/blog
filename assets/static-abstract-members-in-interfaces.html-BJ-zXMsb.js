import{_ as t,r as p,o as c,c as o,e as l,a as n,b as s,f as i,d as a}from"./app-dqFJ6E25.js";const u={},r=n("p",null,"Static abstract interface method is a new feature in C# 11 (corresponding .NET 7.0). In this article, we are going to deeply dive into it, talk about why we need it, what it is and how to use it.",-1),d=a(`<h2 id="why-we-need-it" tabindex="-1"><a class="header-anchor" href="#why-we-need-it" aria-hidden="true">#</a> Why we need it</h2><p>Let&#39;s recall our previous demands:</p><ol><li><p>We hope to perform mathematical operations in generics, but the compiler can&#39;t know the runtime type of <code>T</code>, so it can&#39;t know whether <code>T</code> supports mathematical operations such as addition, subtraction, multiplication and division, so it can&#39;t implement code like the following:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> a<span class="token punctuation">,</span> <span class="token class-name">T</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>We hope that in some cases, <code>T</code>, as a type that can be determined at compile time, can call the public static method of <code>T</code>. However, the static interface method cannot be declared in the interface to allow us to operate <code>T.XXX()</code>; If only the static interface method could be declared in the interface. We used to dream about implementing code like the followingï¼š</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISomeInterface<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ISomeInterface<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Test</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ISomeInterface<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    T<span class="token punctuation">.</span><span class="token function">SomeStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>In order to meet these needs, Microsoft and community developers jointly launched the static abstract interface method, and everyone&#39;s previous fantasy has now been realized.</p><h2 id="what-is-it" tabindex="-1"><a class="header-anchor" href="#what-is-it" aria-hidden="true">#</a> What is it</h2><p>Static abstract interface method is a new feature in C# 11 (corresponding .NET 7.0). Using the latest version of Visual Studio 2022 and then when NET 7.0 runs, you can taste it fresh.</p><p>It supports declaring the static abstract method in the interface (officially, it supports declaring the static virtual method in the interface, but I still report an error after opening the language preview, and I don&#39;t know how to use static virtual for the time being).</p><h2 id="how-to-use-it" tabindex="-1"><a class="header-anchor" href="#how-to-use-it" aria-hidden="true">#</a> How to use it</h2><p>For an instance, we can use the feature mentioned above to declare the following interface:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IGetNext<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGetNext<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">abstract</span> T <span class="token keyword">operator</span> <span class="token operator">++</span><span class="token punctuation">(</span><span class="token class-name">T</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Many operators force their parameters to match the type, or implement the type parameters containing the type according to the constraints. So, in this case we constrain <code>T</code> implement <code>IGetNext&lt;T&gt;</code>.</p></blockquote><p>Then, define a structure named <code>RepeatSequence</code> to implement the above interface, which creates a string composed of <code>&#39;A&#39;</code>, and each <code>++</code> operation allows an <code>&#39;A&#39;</code> to be added to the string.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">RepeatSequence</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGetNext<span class="token punctuation">&lt;</span>RepeatSequence<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">char</span></span> Ch <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> Text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">(</span>Ch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">RepeatSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> RepeatSequence <span class="token keyword">operator</span> <span class="token operator">++</span><span class="token punctuation">(</span><span class="token class-name">RepeatSequence</span> other<span class="token punctuation">)</span>
        <span class="token operator">=&gt;</span> other <span class="token keyword">with</span> <span class="token punctuation">{</span> Text <span class="token operator">=</span> other<span class="token punctuation">.</span>Text <span class="token operator">+</span> Ch <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Text<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Then we can write some testing codes, let them print to screen and we look at the output.</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RepeatSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Output:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A
AA
AAA
AAAA
AAAAA
AAAAAA
AAAAAAA
AAAAAAAA
AAAAAAAAA
AAAAAAAAAA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="playground" tabindex="-1"><a class="header-anchor" href="#playground" aria-hidden="true">#</a> Playground</h3><iframe style="width:100%;height:400px;" src="https://sharplab.io/#v2:EYLgtghglgdgNAFxAJwK7wCYgNQB8ACATAIwCwAUBfgMwAEsCApsgGYQDGjtAkgOKMIAcowAeCADwAVAHy0A7gAtmXSbRA9+Q0RJkUA3hVpHa+YgDZaEYAGcEyDglqqA9gAdmEBM+S1s2ABQuCErIAJQA3BQAvhRUdLZo7I4ASozungDKjACOqIwwnGoaAsJi4qnpCFm5+ZzS+obGrshQAG6eXOzOMLa07AoQPgDCCrQAvLQA5ACCk5HkxiZ0pgAMTtrjtDCMcibEK/4jcLTEEY1G50u0FYyZOXkFjP6htHoxlAvGNHsWN3c1j1obg8Xh8fn8fyq91qXGcwWYoUuizGsjhIXkUGCr3WYk2aOYADpJBtsLQRrQovNLt9nK1mC0MFxVk5nBk7LAAObPcayYliebvCgMZgwCAAGxMhD2AHYGp8jKYLPgACy0ACy0Bg/lWAG0ALqWZAc6yI+WvJHGdo+BKbba7SHVB6cZ5Us2LFjeWj+Bj0TYrcK+8Qnf30PymxYRr7EACc/gSYfmi3eUSAA"></iframe><h2 id="analysing-from-code-aspect" tabindex="-1"><a class="header-anchor" href="#analysing-from-code-aspect" aria-hidden="true">#</a> Analysing from code aspect</h2><h3 id="let-s-look-at-il-codes" tabindex="-1"><a class="header-anchor" href="#let-s-look-at-il-codes" aria-hidden="true">#</a> Let&#39;s look at IL codes</h3><p>Suppose that we have declared the following interface:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDeepInSourceCode<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDeepInSourceCode<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeStaticAbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The IL codes of it:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Type: StaticAbstractInterfaceMethods.IDeepInSourceCode\`1 </span>
<span class="token comment">// Assembly: StaticAbstractInterfaceMethods, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</span>
<span class="token comment">// MVID: 27A20D9E-C658-48F7-8AC2-47D46316D62D</span>
<span class="token comment">// Location: F:\\static_abstract\\StaticAbstractInterfaceMethods\\bin\\Debug\\net7.0\\StaticAbstractInterfaceMethods.dll</span>
<span class="token comment">// Sequence point data from f:\\static_abstract\\staticabstractinterfacemethods\\bin\\debug\\net7.0\\staticabstractinterfacemethods.pdb</span>

<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">interface</span></span> <span class="token keyword">public</span> <span class="token keyword">abstract</span> auto ansi
  StaticAbstractInterfaceMethods<span class="token punctuation">.</span>IDeepInSourceCode\`<span class="token number">1</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token class-name">StaticAbstractInterfaceMethods</span><span class="token punctuation">.</span>IDeepInSourceCode\`<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token number">0</span><span class="token comment">/*T*/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> T<span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
  <span class="token punctuation">.</span>param constraint <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">/*T*/</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">StaticAbstractInterfaceMethods</span><span class="token punctuation">.</span>IDeepInSourceCode\`<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token number">0</span><span class="token comment">/*T*/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">.</span>custom instance <span class="token keyword">void</span> System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>CompilerServices<span class="token punctuation">.</span>NullableAttribute<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">in</span><span class="token punctuation">]</span> <span class="token class-name">unsigned</span> int8<span class="token punctuation">)</span>
      <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">01</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">)</span> <span class="token comment">// .....</span>
      <span class="token comment">// unsigned int8(1) // 0x01</span>

  <span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig <span class="token keyword">virtual</span> newslot <span class="token keyword">abstract</span> instance <span class="token return-type class-name"><span class="token keyword">void</span></span>
    <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed
  <span class="token punctuation">{</span>
    <span class="token comment">// Can&#39;t find a body</span>
  <span class="token punctuation">}</span> <span class="token comment">// end of method IDeepInSourceCode\`1::SomeMethod</span>

  <span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig <span class="token keyword">static</span> <span class="token keyword">virtual</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span>
    <span class="token function">SomeStaticAbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed
  <span class="token punctuation">{</span>
    <span class="token comment">// Can&#39;t find a body</span>
  <span class="token punctuation">}</span> <span class="token comment">// end of method IDeepInSourceCode\`1::SomeStaticAbstractMethod</span>
<span class="token punctuation">}</span> <span class="token comment">// end of class StaticAbstractInterfaceMethods.IDeepInSourceCode\`1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is found that in fact, the difference between the static abstract method and the ordinary interface method is that the <code>newslot</code> and <code>instance</code> keywords become <code>static</code>.</p><p>It means that the specific implementation method of implementing the static abstract interface method must be a method starting with <code>public static</code>.</p><h3 id="let-s-try-the-inheritance-relationship" tabindex="-1"><a class="header-anchor" href="#let-s-try-the-inheritance-relationship" aria-hidden="true">#</a> Let&#39;s try the inheritance relationship</h3><p>We define two types implementing the interface above:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepInSourceCodeBase</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDeepInSourceCode<span class="token punctuation">&lt;</span>DeepInSourceCodeBase<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;SomeMethodBase is invoked.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeStaticAbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;SomeStaticAbstractMethodBase is invoked.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepInSourceCodeDerived</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DeepInSourceCodeBase</span><span class="token punctuation">,</span> <span class="token class-name">IDeepInSourceCode<span class="token punctuation">&lt;</span>DeepInSourceCodeDerived<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;SomeMethodDerived is invoked.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">new</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeStaticAbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;SomeStaticAbstractMethodDerived is invoked.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DeepInSourceCodeBase</code> implementes <code>IDeepInSourceCode&lt;DeepInSourceCodeBase&gt;</code>.</p><p><code>DeepInSourceCodeDerived</code> derives from <code>DeepInSourceCodeBase</code>, overrides <code>SomeMethod</code> method, and covers <code>SomeStaticAbstractMethod</code> method.</p><p>Let&#39;s write some testing code:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepInSourceCodeTester</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Test</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
        <span class="token keyword">where</span> <span class="token class-name">T1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDeepInSourceCode<span class="token punctuation">&lt;</span>T1<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
        <span class="token keyword">where</span> <span class="token class-name">T2</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
    <span class="token punctuation">{</span>
        <span class="token class-name">T1</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">T2</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">T2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1<span class="token punctuation">.</span><span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        T1<span class="token punctuation">.</span><span class="token function">SomeStaticAbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        T2<span class="token punctuation">.</span><span class="token function">SomeStaticAbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Add testing codes to <code>Main</code>:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        DeepInSourceCodeTester<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Test</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DeepInSourceCodeBase<span class="token punctuation">,</span> DeepInSourceCodeDerived<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Guess what the result is first?</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SomeMethodBase is invoked.
SomeMethodDerived is invoked.
SomeStaticAbstractMethodBase is invoked.
SomeStaticAbstractMethodDerived is invoked.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Would you guess the result like this?</p><p>Actually, the result is not like this, it&#39;s:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SomeMethodBase is invoked.
SomeMethodDerived is invoked.
SomeStaticAbstractMethodBase is invoked.
SomeStaticAbstractMethodBase is invoked.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here is the official explanation: https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface#static-abstract-and-virtual-members</p><p>When we change <code>where T2 : T1, new()</code> to <code>where T2 : IDeepInSourceCode&lt;T2&gt;, new()</code>, the result is what we expect.</p><h3 id="playground-1" tabindex="-1"><a class="header-anchor" href="#playground-1" aria-hidden="true">#</a> Playground</h3><iframe style="width:100%;height:400px;" src="https://sharplab.io/#v2:EYLgtghglgdgNAFxAJwK7wCYgNQB8ACATAIwCwAUBfgMwAEsCApsgGYQDGjtAkgCKOMADtxgBlAPapknAMLiMjADwAVAHy0A7gAtmXZbRA9+QkRKmz5StRQDeFWg9r4ALLQlhGAWUYIt8gBQAlADc9o74xABstBDAAM4IyBwITq7ujKIIEAhQ7ACC8YnJ3r4BIRQAvhRUdES0xsJiktKMcgoAQhBxXIZ8Ao1mLW1KDabNFh1djKq2YQ40tABuUMgIqBAANqlu4h4lfhhBc7R25I7nTsQAnP4AROn78p3d9HH0MIviANaMGAB0t3KZ0cVUowPmtSi23SmWyuQKCSS7AQj0OgWOpwu4WudxhWRy+UKSJRPgOzy4UDesE+P3+gNC4NooNBNSchHq/TG5laln4yCgi1+Bg5Jia3OG5LgRk5YqGlkUo1lE0YfIFvxm5Ex4To4kFyH5Cmhuy8pLKGOO5wiN3uxtRqsFGFe7xpvwBQPOLMZCxgjA0l2iLh2HlhBIRRWRqKOjK1WKtuONIfhROKpow9qFlOd31d9OOzOq5AWdUVg2VykYCWYsy9kIDrnLCRUxClykIqiCtAtjm0uloymIwr6otLPIUTdUUp9GijWIcPeQenZhn7k99M8cMYu/doCAHAF5aFO+8QggzZ332Qh2Qej63T12HLu/g9U/fGecr8/ba/3bP+1/g3xJNERTUo0TPP9CAAjIgMJECIx/CCHHzMEGGYGBNjZS4AHZq0tKFA08aAYH8CIAAYAG0AF0YmQABzOJ0WjB8RQGcZR0YBsmGQP4uIVGURwlKYpRLdjhnTDB21/ZDKgoIA="></iframe>`,45),k={id:"how-does-net-support-generic-math",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#how-does-net-support-generic-math","aria-hidden":"true"},"#",-1),v={href:"https://learn.microsoft.com/en-us/dotnet/standard/generics/math",target:"_blank",rel:"noopener noreferrer"},b=a(`<p>In order to support generic math, <strong>. NET 7.0 has reimplemented all the base element types</strong>.</p><p>Take <code>Int32</code> as an example, it now wants to implement more interfaces to perform some generic mathematical operations:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> <span class="token class-name">Int32</span>
        <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IComparable</span><span class="token punctuation">,</span>
          <span class="token class-name">IConvertible</span><span class="token punctuation">,</span>
          <span class="token class-name">ISpanFormattable</span><span class="token punctuation">,</span>
          <span class="token class-name">IComparable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IEquatable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IBinaryInteger<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IMinMaxValue<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">ISignedNumber<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>In addition to some previously implemented interfaces, the following new interfaces have been implemented by <code>Int32</code>:</p><ul><li><p>IBinaryInterger&lt;int&gt;</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBinaryInteger<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IBinaryNumber<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IShiftOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">where</span> <span class="token class-name">TSelf</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IBinaryInteger<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>IBinaryNumber&lt;int&gt;</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBinaryNumber<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IBitwiseOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">INumber<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">where</span> <span class="token class-name">TSelf</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IBinaryNumber<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>IBitwiseOperators&lt;int, int, int&gt;</p><p>Declared the static abstract methods for overloading four operators: <code>&amp;</code>, <code>|</code>, <code>~</code> and <code>!</code>.</p></li><li><p>INumber&lt;int&gt;</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INumber<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IComparable</span><span class="token punctuation">,</span>
          <span class="token class-name">IComparable<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IComparisonOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IModulusOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">INumberBase<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">where</span> <span class="token class-name">TSelf</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INumber<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>IComparisonOperators&lt;int, int, int&gt;</p><p>Declared the static abstract methods for overloading four operators: <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code> and <code>&lt;=</code>.</p></li><li><p>IModulusOperators&lt;int, int, int&gt;</p><p>Declared the static abstract method for overloading the operator: <code>%</code>.</p></li><li><p>INumberBase&lt;int&gt;</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INumberBase<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAdditionOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IAdditiveIdentity<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IDecrementOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IDivisionOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IEquatable<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IEqualityOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IIncrementOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IMultiplicativeIdentity<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IMultiplyOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">ISpanFormattable</span><span class="token punctuation">,</span>
          <span class="token class-name">ISpanParsable<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">ISubtractionOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IUnaryPlusOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IUnaryNegationOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">where</span> <span class="token class-name">TSelf</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INumberBase<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Mainly declared the static abstract methods for overloading four operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>.</p></li></ul></li></ul></li><li><p>IShiftOperators&lt;int, int, int&gt;</p><p>Declared the static abstract methods for overloading three operators: <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, and <code>&gt;&gt;&gt;</code>.</p></li></ul></li><li><p>IMinMaxValue&lt;int&gt;</p><p>Declared two static abstract properties: <code>MinValue</code> and <code>MaxValue</code>.</p></li><li><p>ISignedNumber&lt;int&gt;</p><p>Declared a static abstract property: <code>NegativeOne</code>.</p></li></ul><p>In this way, <code>Int32</code> can be used as a generic parameter for generic math.</p><p>In addition to <code>Int32</code>, other element types such as <code>Single</code>, <code>Double</code> and <code>Byte</code> also implement many of these interfaces for generic mathematical operations.</p><p>Take a simple example:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">MultiplyAndSub</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> t1<span class="token punctuation">,</span> <span class="token class-name">T</span> t2<span class="token punctuation">,</span> <span class="token class-name">T</span> t3<span class="token punctuation">)</span>
    <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMultiplyOperators<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> T<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">ISubtractionOperators<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> T<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t1 <span class="token operator">*</span> t2 <span class="token operator">-</span> t3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The above method constraints <code>T</code> support multiplication and subtraction operations.</p><p>The above method can be called like this:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token function">MultiplyAndSub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MultiplyAndSub</span><span class="token punctuation">(</span><span class="token number">0.1f</span><span class="token punctuation">,</span> <span class="token number">0.2f</span><span class="token punctuation">,</span> <span class="token number">0.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MultiplyAndSub</span><span class="token punctuation">(</span><span class="token number">0.1d</span><span class="token punctuation">,</span> <span class="token number">0.2d</span><span class="token punctuation">,</span> <span class="token number">0.3d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Of course, we can also define a type by ourselves, and then implement the interface related to multiplication and subtraction:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">MultiplyAndSubCustomStruct</span> <span class="token punctuation">:</span> 
    <span class="token type-list"><span class="token class-name">IMultiplyOperators<span class="token punctuation">&lt;</span>MultiplyAndSubCustomStruct<span class="token punctuation">,</span> MultiplyAndSubCustomStruct<span class="token punctuation">,</span> MultiplyAndSubCustomStruct<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
    <span class="token class-name">ISubtractionOperators<span class="token punctuation">&lt;</span>MultiplyAndSubCustomStruct<span class="token punctuation">,</span> MultiplyAndSubCustomStruct<span class="token punctuation">,</span> MultiplyAndSubCustomStruct<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">MultiplyAndSubCustomStruct</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Value<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> MultiplyAndSubCustomStruct <span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">MultiplyAndSubCustomStruct</span> left<span class="token punctuation">,</span> <span class="token class-name">MultiplyAndSubCustomStruct</span> right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiplyAndSubCustomStruct</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>Value <span class="token operator">*</span> right<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> MultiplyAndSubCustomStruct <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token class-name">MultiplyAndSubCustomStruct</span> left<span class="token punctuation">,</span> <span class="token class-name">MultiplyAndSubCustomStruct</span> right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiplyAndSubCustomStruct</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>Value <span class="token operator">-</span> right<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> format<span class="token punctuation">,</span> <span class="token class-name">IFormatProvider<span class="token punctuation">?</span></span> formatProvider<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> formatProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can then call <code>MultiplyAndSub</code>:</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token function">MultiplyAndSub</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiplyAndSubCustomStruct</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiplyAndSubCustomStruct</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiplyAndSubCustomStruct</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The result is <code>-1</code>, which meets expectations.</p>`,17);function h(g,y){const e=p("ExternalLinkIcon");return c(),o("div",null,[r,l(" more "),d,n("h2",k,[m,s(" How does .NET support "),n("a",v,[s("Generic Math"),i(e)]),s("?")]),b])}const f=t(u,[["render",h],["__file","static-abstract-members-in-interfaces.html.vue"]]);export{f as default};
