import{_ as e,r as p,o as c,c as o,e as l,a as n,b as s,f as i,d as a}from"./app-dqFJ6E25.js";const u={},d=n("p",null,"静态抽象接口方法是 C# 11 (对应 .NET 7.0) 引入的新特性。本篇我们来探究一下为什么要有它、它是什么，以及怎么使用它。",-1),r=a(`<h2 id="为什么要有静态抽象接口方法" tabindex="-1"><a class="header-anchor" href="#为什么要有静态抽象接口方法" aria-hidden="true">#</a> 为什么要有静态抽象接口方法</h2><p>回顾我们曾经的需求：</p><ol><li><p>我们希望在泛型中进行数学运算，但是编译器无法得知 <code>T</code> 的运行时类型，从而无法得知 <code>T</code> 是否支持诸如加减乘除的数学运算，故无法实现类似下面这样的代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token return-type class-name">T</span> <span class="token generic-method"><span class="token function">Add</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> a<span class="token punctuation">,</span> <span class="token class-name">T</span> b<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>我们希望某些情况下，<code>T</code> 作为编译期能够确定的类型，能够调用 <code>T</code> 的公有静态方法。然而，接口中无法声明静态接口方法，来允许我们进行 <code>T.XXX()</code>; 的操作。要是能够让接口中声明静态接口方法就好了。我们曾经的幻想：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ISomeInterface<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ISomeInterface<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Test</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">ISomeInterface<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    T<span class="token punctuation">.</span><span class="token function">SomeStaticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>为了满足这些需求，微软携手社区开发者们，共同推出了静态抽象接口方法，大家以前的幻想现在已经得以实现。</p><h2 id="什么是静态抽象接口方法" tabindex="-1"><a class="header-anchor" href="#什么是静态抽象接口方法" aria-hidden="true">#</a> 什么是静态抽象接口方法</h2><p>静态抽象接口方法是 C# 11 (对应 .NET 7.0) 引入的新特性。使用最新的 Visual Studio 2022 版本，安装过 .NET 7.0 运行时，即可尝鲜。</p><p>它支持在接口中声明 static abstract 方法 (官方说支持在接口中声明 static virtual 方法，但我开启了 preview 后依旧报错，暂时不知道 static virtual 如何使用)。</p><h2 id="怎么样使用静态抽象接口方法" tabindex="-1"><a class="header-anchor" href="#怎么样使用静态抽象接口方法" aria-hidden="true">#</a> 怎么样使用静态抽象接口方法</h2><p>举个例子：</p><p>我们可以利用上述新特性，定义如下接口：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IGetNext<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGetNext<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">abstract</span> T <span class="token keyword">operator</span> <span class="token operator">++</span><span class="token punctuation">(</span><span class="token class-name">T</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>许多运算符都强制要求其参数必须与类型匹配，或者是按照约束要实现包含类型的类型参数，所以这里，我们约束 <code>T</code> 必须实现 <code>IGetNext&lt;T&gt;</code>。</p></blockquote><p>然后，定义一个 <code>RepeatSequence</code> 结构去实现上面的接口，该结构创建由 <code>‘A&#39;</code> 组成的字符串，每个 <code>++</code> 操作都使得向字符串中添加一个 <code>&#39;A&#39;</code>。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">RepeatSequence</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IGetNext<span class="token punctuation">&lt;</span>RepeatSequence<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">const</span> <span class="token class-name"><span class="token keyword">char</span></span> Ch <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">string</span></span> Text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name"><span class="token keyword">string</span></span><span class="token punctuation">(</span>Ch<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token function">RepeatSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> RepeatSequence <span class="token keyword">operator</span> <span class="token operator">++</span><span class="token punctuation">(</span><span class="token class-name">RepeatSequence</span> other<span class="token punctuation">)</span>
        <span class="token operator">=&gt;</span> other <span class="token keyword">with</span> <span class="token punctuation">{</span> Text <span class="token operator">=</span> other<span class="token punctuation">.</span>Text <span class="token operator">+</span> Ch <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Text<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们可以编写测试代码，打印看看结果：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">RepeatSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>str<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>得到输出：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>A
AA
AAA
AAAA
AAAAA
AAAAAA
AAAAAAA
AAAAAAAA
AAAAAAAAA
AAAAAAAAAA
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="playground" tabindex="-1"><a class="header-anchor" href="#playground" aria-hidden="true">#</a> Playground</h3><iframe style="width:100%;height:400px;" src="https://sharplab.io/#v2:EYLgtghglgdgNAFxAJwK7wCYgNQB8ACATAIwCwAUBfgMwAEsCApsgGYQDGjtAkgOKMIAcowAeCADwAVAHy0A7gAtmXSbRA9+Q0RJkUA3hVpHa+YgDZaEYAGcEyDglqqA9gAdmEBM+S1s2ABQuCErIAJQA3BQAvhRUdLZo7I4ASozungDKjACOqIwwnGoaAsJi4qnpCFm5+ZzS+obGrshQAG6eXOzOMLa07AoQPgDCCrQAvLQA5ACCk5HkxiZ0pgAMTtrjtDCMcibEK/4jcLTEEY1G50u0FYyZOXkFjP6htHoxlAvGNHsWN3c1j1obg8Xh8fn8fyq91qXGcwWYoUuizGsjhIXkUGCr3WYk2aOYADpJBtsLQRrQovNLt9nK1mC0MFxVk5nBk7LAAObPcayYliebvCgMZgwCAAGxMhD2AHYGp8jKYLPgACy0ACy0Bg/lWAG0ALqWZAc6yI+WvJHGdo+BKbba7SHVB6cZ5Us2LFjeWj+Bj0TYrcK+8Qnf30PymxYRr7EACc/gSYfmi3eUSAA"></iframe><h2 id="从代码角度分析" tabindex="-1"><a class="header-anchor" href="#从代码角度分析" aria-hidden="true">#</a> 从代码角度分析</h2><h3 id="看看-il" tabindex="-1"><a class="header-anchor" href="#看看-il" aria-hidden="true">#</a> 看看 IL</h3><p>如下接口：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IDeepInSourceCode<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span> <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDeepInSourceCode<span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeStaticAbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的 IL：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token comment">// Type: StaticAbstractInterfaceMethods.IDeepInSourceCode\`1 </span>
<span class="token comment">// Assembly: StaticAbstractInterfaceMethods, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</span>
<span class="token comment">// MVID: 27A20D9E-C658-48F7-8AC2-47D46316D62D</span>
<span class="token comment">// Location: F:\\static_abstract\\StaticAbstractInterfaceMethods\\bin\\Debug\\net7.0\\StaticAbstractInterfaceMethods.dll</span>
<span class="token comment">// Sequence point data from f:\\static_abstract\\staticabstractinterfacemethods\\bin\\debug\\net7.0\\staticabstractinterfacemethods.pdb</span>

<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token class-name"><span class="token keyword">interface</span></span> <span class="token keyword">public</span> <span class="token keyword">abstract</span> auto ansi
  StaticAbstractInterfaceMethods<span class="token punctuation">.</span>IDeepInSourceCode\`<span class="token number">1</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token keyword">class</span> <span class="token class-name">StaticAbstractInterfaceMethods</span><span class="token punctuation">.</span>IDeepInSourceCode\`<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token number">0</span><span class="token comment">/*T*/</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> T<span class="token operator">&gt;</span>
<span class="token punctuation">{</span>
  <span class="token punctuation">.</span>param constraint <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">/*T*/</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">StaticAbstractInterfaceMethods</span><span class="token punctuation">.</span>IDeepInSourceCode\`<span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token number">0</span><span class="token comment">/*T*/</span><span class="token operator">&gt;</span>
    <span class="token punctuation">.</span>custom instance <span class="token keyword">void</span> System<span class="token punctuation">.</span>Runtime<span class="token punctuation">.</span>CompilerServices<span class="token punctuation">.</span>NullableAttribute<span class="token punctuation">::</span><span class="token punctuation">.</span><span class="token function">ctor</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">in</span><span class="token punctuation">]</span> <span class="token class-name">unsigned</span> int8<span class="token punctuation">)</span>
      <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">01</span> <span class="token number">00</span> <span class="token number">01</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token punctuation">)</span> <span class="token comment">// .....</span>
      <span class="token comment">// unsigned int8(1) // 0x01</span>

  <span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig <span class="token keyword">virtual</span> newslot <span class="token keyword">abstract</span> instance <span class="token return-type class-name"><span class="token keyword">void</span></span>
    <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed
  <span class="token punctuation">{</span>
    <span class="token comment">// Can&#39;t find a body</span>
  <span class="token punctuation">}</span> <span class="token comment">// end of method IDeepInSourceCode\`1::SomeMethod</span>

  <span class="token punctuation">.</span>method <span class="token keyword">public</span> hidebysig <span class="token keyword">static</span> <span class="token keyword">virtual</span> <span class="token keyword">abstract</span> <span class="token return-type class-name"><span class="token keyword">void</span></span>
    <span class="token function">SomeStaticAbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token return-type class-name">cil</span> managed
  <span class="token punctuation">{</span>
    <span class="token comment">// Can&#39;t find a body</span>
  <span class="token punctuation">}</span> <span class="token comment">// end of method IDeepInSourceCode\`1::SomeStaticAbstractMethod</span>
<span class="token punctuation">}</span> <span class="token comment">// end of class StaticAbstractInterfaceMethods.IDeepInSourceCode\`1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比发现，实际上，static abstract 方法和普通接口方法的区别在于，<code>newslot</code> 和 <code>instance</code> 关键字变成了 <code>static</code>。</p><p>这意味着，实现 static abstract 接口方法的具体实现方法，必须是一个以 \`public static 开头的方法。</p><h3 id="试一试继承关系" tabindex="-1"><a class="header-anchor" href="#试一试继承关系" aria-hidden="true">#</a> 试一试继承关系</h3><p>接着上面的接口，我们定义两个类型：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepInSourceCodeBase</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDeepInSourceCode<span class="token punctuation">&lt;</span>DeepInSourceCodeBase<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;SomeMethodBase is invoked.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeStaticAbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;SomeStaticAbstractMethodBase is invoked.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepInSourceCodeDerived</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">DeepInSourceCodeBase</span><span class="token punctuation">,</span> <span class="token class-name">IDeepInSourceCode<span class="token punctuation">&lt;</span>DeepInSourceCodeDerived<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;SomeMethodDerived is invoked.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">new</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SomeStaticAbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span><span class="token string">&quot;SomeStaticAbstractMethodDerived is invoked.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>DeepInSourceCodeBase</code> 实现了 <code>IDeepInSourceCode&lt;DeepInSourceCodeBase&gt;</code> 接口。</p><p><code>DeepInSourceCodeDerived</code> 派生自 <code>DeepInSourceCodeBase</code>，重写了 <code>SomeMethod</code> 方法，覆盖了 <code>SomeStaticAbstractMethod</code> 方法。</p><p>写一个测试代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeepInSourceCodeTester</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">Test</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T1<span class="token punctuation">,</span> T2<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
        <span class="token keyword">where</span> <span class="token class-name">T1</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IDeepInSourceCode<span class="token punctuation">&lt;</span>T1<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
        <span class="token keyword">where</span> <span class="token class-name">T2</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
    <span class="token punctuation">{</span>
        <span class="token class-name">T1</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">T1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">T2</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">T2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t1<span class="token punctuation">.</span><span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t2<span class="token punctuation">.</span><span class="token function">SomeMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        T1<span class="token punctuation">.</span><span class="token function">SomeStaticAbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        T2<span class="token punctuation">.</span><span class="token function">SomeStaticAbstractMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>Main</code> 方法中加入测试代码：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Program</span>
<span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span> args<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        DeepInSourceCodeTester<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Test</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>DeepInSourceCodeBase<span class="token punctuation">,</span> DeepInSourceCodeDerived<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先猜猜结果是什么？</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SomeMethodBase is invoked.
SomeMethodDerived is invoked.
SomeStaticAbstractMethodBase is invoked.
SomeStaticAbstractMethodDerived is invoked.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你会猜测是这样的结果吗？</p><p>其实不是。</p><p>这里结果是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SomeMethodBase is invoked.
SomeMethodDerived is invoked.
SomeStaticAbstractMethodBase is invoked.
SomeStaticAbstractMethodBase is invoked.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>官方有专门的说明：https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/interface#static-abstract-and-virtual-members</p><p>当我们把 <code>where T2 : T1, new()</code> 改为 <code>where T2 : IDeepInSourceCode&lt;T2&gt;, new()</code> 结果就是我们猜测的那样了。</p><h3 id="playground-1" tabindex="-1"><a class="header-anchor" href="#playground-1" aria-hidden="true">#</a> Playground</h3><iframe style="width:100%;height:400px;" src="https://sharplab.io/#v2:EYLgtghglgdgNAFxAJwK7wCYgNQB8ACATAIwCwAUBfgMwAEsCApsgGYQDGjtAkgCKOMADtxgBlAPapknAMLiMjADwAVAHy0A7gAtmXZbRA9+QkRKmz5StRQDeFWg9r4ALLQlhGAWUYIt8gBQAlADc9o74xABstBDAAM4IyBwITq7ujKIIEAhQ7ACC8YnJ3r4BIRQAvhRUdES0xsJiktKMcgoAQhBxXIZ8Ao1mLW1KDabNFh1djKq2YQ40tABuUMgIqBAANqlu4h4lfhhBc7R25I7nTsQAnP4AROn78p3d9HH0MIviANaMGAB0t3KZ0cVUowPmtSi23SmWyuQKCSS7AQj0OgWOpwu4WudxhWRy+UKSJRPgOzy4UDesE+P3+gNC4NooNBNSchHq/TG5laln4yCgi1+Bg5Jia3OG5LgRk5YqGlkUo1lE0YfIFvxm5Ex4To4kFyH5Cmhuy8pLKGOO5wiN3uxtRqsFGFe7xpvwBQPOLMZCxgjA0l2iLh2HlhBIRRWRqKOjK1WKtuONIfhROKpow9qFlOd31d9OOzOq5AWdUVg2VykYCWYsy9kIDrnLCRUxClykIqiCtAtjm0uloymIwr6otLPIUTdUUp9GijWIcPeQenZhn7k99M8cMYu/doCAHAF5aFO+8QggzZ332Qh2Qej63T12HLu/g9U/fGecr8/ba/3bP+1/g3xJNERTUo0TPP9CAAjIgMJECIx/CCHHzMEGGYGBNjZS4AHZq0tKFA08aAYH8CIAAYAG0AF0YmQABzOJ0WjB8RQGcZR0YBsmGQP4uIVGURwlKYpRLdjhnTDB21/ZDKgoIA="></iframe>`,47),k={id:"net-如何支持泛型数学",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#net-如何支持泛型数学","aria-hidden":"true"},"#",-1),v={href:"https://learn.microsoft.com/zh-cn/dotnet/standard/generics/math",target:"_blank",rel:"noopener noreferrer"},b=a(`<p>为了支持泛型数学，<strong>.NET 7.0 将所有的基元类型进行了重新实现</strong>。</p><p>以 <code>Int32</code> 为例，它现在要实现更多的接口，这些接口就是为了进行一些泛型数学运算。</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">readonly</span> <span class="token keyword">struct</span> <span class="token class-name">Int32</span>
        <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IComparable</span><span class="token punctuation">,</span>
          <span class="token class-name">IConvertible</span><span class="token punctuation">,</span>
          <span class="token class-name">ISpanFormattable</span><span class="token punctuation">,</span>
          <span class="token class-name">IComparable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IEquatable<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IBinaryInteger<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IMinMaxValue<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">ISignedNumber<span class="token punctuation">&lt;</span><span class="token keyword">int</span><span class="token punctuation">&gt;</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Int32</code> 除了之前实现的一些接口，目前还实现了以下新的接口：</p><ul><li><p>IBinaryInterger&lt;int&gt;</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBinaryInteger<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IBinaryNumber<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IShiftOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">where</span> <span class="token class-name">TSelf</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IBinaryInteger<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>IBinaryNumber&lt;int&gt;</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IBinaryNumber<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IBitwiseOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">INumber<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">where</span> <span class="token class-name">TSelf</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IBinaryNumber<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>IBitwiseOperators&lt;int, int, int&gt;</p><p>声明了重载 <code>&amp;</code>、<code>|</code>、<code>~</code>、<code>!</code> 四个运算符的 static abstract 方法</p></li><li><p>INumber&lt;int&gt;</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INumber<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IComparable</span><span class="token punctuation">,</span>
          <span class="token class-name">IComparable<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IComparisonOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IModulusOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">INumberBase<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">where</span> <span class="token class-name">TSelf</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INumber<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>IComparisonOperators&lt;int, int, int&gt;</p><p>声明了重载 <code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code> 四个运算符的 static abstract 方法</p></li><li><p>IModulusOperators&lt;int, int, int&gt;</p><p>声明了重载 <code>%</code> 运算符的 static abstract 方法</p></li><li><p>INumberBase&lt;int&gt;</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">INumberBase<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IAdditionOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IAdditiveIdentity<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IDecrementOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IDivisionOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IEquatable<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IEqualityOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IIncrementOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IMultiplicativeIdentity<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IMultiplyOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">ISpanFormattable</span><span class="token punctuation">,</span>
          <span class="token class-name">ISpanParsable<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">ISubtractionOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IUnaryPlusOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
          <span class="token class-name">IUnaryNegationOperators<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">,</span> TSelf<span class="token punctuation">&gt;</span></span></span>
        <span class="token keyword">where</span> <span class="token class-name">TSelf</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">INumberBase<span class="token punctuation">&lt;</span>TSelf<span class="token punctuation">&gt;</span><span class="token punctuation">?</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>简述：主要声明了四则运算相关运算符的重载 static abstract 方法。</p></li></ul></li></ul></li><li><p>IShiftOperators&lt;int, int, int&gt;</p><p>声明了重载 <code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code> 三个移位运算符的 static abstract 方法</p></li></ul></li><li><p>IMinMaxValue&lt;int&gt;</p><p>声明了 <code>MinValue</code>、<code>MaxValue</code> 两个 static abstract 属性，表示具有最大最小值属性。</p></li><li><p>ISignedNumber&lt;int&gt;</p><p>声明了 <code>NegativeOne</code> static abstract 属性，表示具有 -1 属性。</p></li></ul><p>如此一来，<code>Int32</code> 可以作为泛型数学的泛型参数。</p><p>除了 <code>Int32</code>，其他诸如 <code>Single</code>、<code>Double</code>、<code>Byte</code> 这些基元类型也都实现了很多这种用于泛型数学运算的接口。</p><p>举一个简单的例子：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token generic-method"><span class="token function">MultiplyAndSub</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>T<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token class-name">T</span> t1<span class="token punctuation">,</span> <span class="token class-name">T</span> t2<span class="token punctuation">,</span> <span class="token class-name">T</span> t3<span class="token punctuation">)</span>
    <span class="token keyword">where</span> <span class="token class-name">T</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IMultiplyOperators<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> T<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">ISubtractionOperators<span class="token punctuation">&lt;</span>T<span class="token punctuation">,</span> T<span class="token punctuation">,</span> T<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    Console<span class="token punctuation">.</span><span class="token function">WriteLine</span><span class="token punctuation">(</span>t1 <span class="token operator">*</span> t2 <span class="token operator">-</span> t3<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述方法约束 <code>T</code> 类型支持乘法和减法运算。</p><p>可以这样调用上述方法：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token function">MultiplyAndSub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MultiplyAndSub</span><span class="token punctuation">(</span><span class="token number">0.1f</span><span class="token punctuation">,</span> <span class="token number">0.2f</span><span class="token punctuation">,</span> <span class="token number">0.3f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MultiplyAndSub</span><span class="token punctuation">(</span><span class="token number">0.1d</span><span class="token punctuation">,</span> <span class="token number">0.2d</span><span class="token punctuation">,</span> <span class="token number">0.3d</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然，我们也可以自己定义一个类型，然后实现 乘法、减法 相关的接口：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token keyword">public</span> <span class="token keyword">struct</span> <span class="token class-name">MultiplyAndSubCustomStruct</span> <span class="token punctuation">:</span> 
    <span class="token type-list"><span class="token class-name">IMultiplyOperators<span class="token punctuation">&lt;</span>MultiplyAndSubCustomStruct<span class="token punctuation">,</span> MultiplyAndSubCustomStruct<span class="token punctuation">,</span> MultiplyAndSubCustomStruct<span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span>
    <span class="token class-name">ISubtractionOperators<span class="token punctuation">&lt;</span>MultiplyAndSubCustomStruct<span class="token punctuation">,</span> MultiplyAndSubCustomStruct<span class="token punctuation">,</span> MultiplyAndSubCustomStruct<span class="token punctuation">&gt;</span></span></span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token function">MultiplyAndSubCustomStruct</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">int</span></span> <span class="token keyword">value</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        Value <span class="token operator">=</span> <span class="token keyword">value</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token class-name"><span class="token keyword">int</span></span> Value<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> MultiplyAndSubCustomStruct <span class="token keyword">operator</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token class-name">MultiplyAndSubCustomStruct</span> left<span class="token punctuation">,</span> <span class="token class-name">MultiplyAndSubCustomStruct</span> right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiplyAndSubCustomStruct</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>Value <span class="token operator">*</span> right<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> MultiplyAndSubCustomStruct <span class="token keyword">operator</span> <span class="token operator">-</span><span class="token punctuation">(</span><span class="token class-name">MultiplyAndSubCustomStruct</span> left<span class="token punctuation">,</span> <span class="token class-name">MultiplyAndSubCustomStruct</span> right<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiplyAndSubCustomStruct</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span>Value <span class="token operator">-</span> right<span class="token punctuation">.</span>Value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">ToString</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span><span class="token punctuation">?</span></span> format<span class="token punctuation">,</span> <span class="token class-name">IFormatProvider<span class="token punctuation">?</span></span> formatProvider<span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> Value<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> formatProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后也可以调用 <code>MultiplyAndSub</code>：</p><div class="language-csharp line-numbers-mode" data-ext="cs"><pre class="language-csharp"><code><span class="token function">MultiplyAndSub</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiplyAndSubCustomStruct</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiplyAndSubCustomStruct</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MultiplyAndSubCustomStruct</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结果是 <code>-1</code>，符合预期。</p>`,17);function g(y,h){const t=p("ExternalLinkIcon");return c(),o("div",null,[d,l(" more "),r,n("h2",k,[m,s(" .NET 如何支持"),n("a",v,[s("泛型数学"),i(t)])]),b])}const A=e(u,[["render",g],["__file","static-abstract-members-in-interfaces.html.vue"]]);export{A as default};
