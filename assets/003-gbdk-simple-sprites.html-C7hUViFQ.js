import{_ as i,r as t,o,c as p,a as n,b as s,f as e,e as c,d as l}from"./app-dqFJ6E25.js";const d="/blog/images/game-dev/retro/gameboy/gbdk/gbtd_interface_01.png",r="/blog/images/game-dev/retro/gameboy/gbdk/gbtd_color_picker.png",u="/blog/images/game-dev/retro/gameboy/gbdk/gbtd_left_toolbar.png",m="/blog/images/game-dev/retro/gameboy/gbdk/first_sprite_smile_face.png",v="/blog/images/game-dev/retro/gameboy/gbdk/export_smile_face_as_gbdk_c_array.png",k="/blog/images/game-dev/retro/gameboy/gbdk/successfully_showed_first_sprite.png",b={},g=n("p",null,"GameBoy 屏幕分辨率为 160*144，对于现在而言，这是非常低的，但是这个分辨率对于那个像素时代而言，却已经足以显示一个个生动活泼的角色了。",-1),h={href:"https://en.wikipedia.org/wiki/Sprite_(computer_graphics)",target:"_blank",rel:"noopener noreferrer"},f=n("p",null,"举个例子，超级马里奥中，马里奥对应的位图就是精灵。",-1),_=n("p",null,"我们如何使用 GBDK 将一个精灵绘制到 GameBoy 的屏幕中呢？",-1),B=l('<p>答案是，使用工具，设计好我们的精灵，最后将精灵数据导出为 C 数组。</p><p>这里，我们使用最为流行的 GBTD。</p><div class="hint-container info"><p class="hint-container-title">如果你想造轮子</p><p>当然，自己写一个工具也是可以的，只要自己写的工具最后导出的 C 数组符合 GBDK 需要的 C 数组格式就行。</p></div><h2 id="gbtd-简介" tabindex="-1"><a class="header-anchor" href="#gbtd-简介" aria-hidden="true">#</a> GBTD 简介</h2><p>在 GameBoy 的世界中，地图多半是由瓦块所组成的瓦块地图 (Tile Map)，精灵实际上也是由一些小小的瓦块组成的。</p><p>GBTD, GameBoy Tile Designer，主要用于设计瓦块 (Tile)，并最终导出兼容 GBDK 的 C 数组。</p><p>它的界面是这样的：</p><figure><img src="'+d+`" alt="GBTD 的界面" tabindex="0" loading="lazy"><figcaption>GBTD 的界面</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">关于 MacOS/Linux 运行 GBTD 和 GBMB</p><p>如果没有搭建好环境，请参考上一篇文章，先搭建好环境。</p><p>环境搭建好后，且跟着教程一起配置了 alias 后，可以直接使用别名打开：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 打开 GBTD</span>
gbtd

<span class="token comment"># 打开 GBMB</span>
gbmb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="绘制第一个简单的精灵" tabindex="-1"><a class="header-anchor" href="#绘制第一个简单的精灵" aria-hidden="true">#</a> 绘制第一个简单的精灵</h2><p>接下来，我们绘制一个 <code>8*8</code> 的笑脸，并显示在靠近屏幕中央的位置。</p><div class="hint-container info"><p class="hint-container-title">为什么是 8*8</p><p>GameBoy 中，精灵的渲染有两种模式（二选一）：</p><ul><li><code>8*8</code></li><li><code>8*16</code></li></ul><p>每个瓦块的尺寸最小为 <code>8*8</code>，所以最简单的精灵都是用一个瓦块，这里我们希望精灵不要过于迷你，所以还是选择 <code>8*8</code> 的尺寸，实际上，<code>1*1</code> 都是可以的，只是依旧还是需要一个 <code>8*8</code> 的瓦块来表达。复杂一点的精灵，可能会使用 <code>8*16</code> 模式。更复杂一点的精灵，甚至可能是多个 <code>8*8</code> 的瓦片组合而成的。</p></div><p>GBTD 的最下方有一个颜色选择器。</p><p>左侧 L R 显示的是鼠标左键和鼠标右键对应要在画布上绘制的颜色索引。</p><p>右侧的四个色块代表 0 到 3 四个索引色，每个索引对应的颜色是我们自己通过调色板进行配置的，默认调色板是从白到黑的渐变的四个颜色。</p><figure><img src="`+r+'" alt="GBTD 颜色选择器" tabindex="0" loading="lazy"><figcaption>GBTD 颜色选择器</figcaption></figure><p>GBTD 的左侧工具栏，默认选择了画笔工具，画笔底下是油漆桶工具。往下四个是移动工具，可以自行试试效果。再往下是垂直翻转、水平翻转、旋转以及自动更新。</p><figure><img src="'+u+'" alt="GBTD 左侧工具栏" tabindex="0" loading="lazy"><figcaption>GBTD 左侧工具栏</figcaption></figure><div class="hint-container info"><p class="hint-container-title">GBTD 不存在橡皮擦工具</p><p>GBTD 不存在橡皮擦工具，这是因为 GameBoy 的颜色模式是索引色模式，而非 RGBA 模式。</p><p>如果需要擦除某个画错的部分，你要做的就是使用另一个索引色来填充画错的部分。</p></div><p>当我们在颜色选择器的右侧色块区域使用鼠标左键点击其中一个色块，则鼠标左键即将绘制的颜色索引会变成你点击的那个色块的索引值，简而言之就是接下来你的鼠标左键在画布上绘制的时候画笔（或油漆桶）的颜色变成了你所选色块的颜色。鼠标右键也是一样的逻辑。这样方便我们鼠标左右两个键在画布上绘制图形。</p><p>我们首先选择画笔工具，使用鼠标左键点击颜色选择器右侧的索引值为 3 的黑色色块，然后在画布上绘制一个笑脸，当然，你也可以按照自己的想法绘制，只要是 <code>8*8</code> 及以内的就行。</p><p>然后选择油漆桶工具，选择索引值为 1 的浅灰色色块，然后填充笑脸。</p><p>画好后大致长这样（没认真画，教程嘛，意思意思）：</p><figure><img src="'+m+'" alt="第一个精灵：笑脸" tabindex="0" loading="lazy"><figcaption>第一个精灵：笑脸</figcaption></figure><p>绘制好了，我们就可以开始导出成 GBDK 兼容的 C 数组了。</p><p>当然，为了备份，你应该先保存一下。保存后，你将得到一个以 <code>.gbr</code> 后缀的文件，下次再用 GBTD 打开它就能继续编辑。</p><h2 id="导出绘制的精灵" tabindex="-1"><a class="header-anchor" href="#导出绘制的精灵" aria-hidden="true">#</a> 导出绘制的精灵</h2><p>最上面主菜单点击 <code>Files/ExportTo</code>，然后配置如下：</p><figure><img src="'+v+`" alt="导出笑脸为 GBDK 支持的 C 数组" tabindex="0" loading="lazy"><figcaption>导出笑脸为 GBDK 支持的 C 数组</figcaption></figure><div class="hint-container info"><p class="hint-container-title">关键参数介绍</p><p>Filename - 导出文件的名称，这里我们填入 <code>Smile.c</code></p><p>Type - 导出数据的类型，这里我们选择 <code>GBDK C file</code>，代表导出文件中包含的数据是兼容 GBDK 的 C 数组</p><p>Label - 导出 C 数组的名称，我们在代码中会用到，这里我们命名为 <code>Smile</code></p><p>Format - 颜色格式，这里我们选择 <code>Gameboy 4 color</code></p></div><p>点击 <code>OK</code> 即可导出。导出成功后，会在 <code>.gbr</code> 所在同级目录下得到 <code>Smile.h</code> 和 <code>Smile.c</code> 文件。</p><p><code>.h</code> 文件中是数组相关的声明，而 <code>.c</code> 文件中是具体定义，存放了实际的精灵数据。</p><p>下面，我们就可以利用 C 数组，开始编写程序，绘制精灵了。</p><h2 id="开始编程吧" tabindex="-1"><a class="header-anchor" href="#开始编程吧" aria-hidden="true">#</a> 开始编程吧！</h2><h3 id="使用-visual-studio-code-makefile-进行项目搭建" tabindex="-1"><a class="header-anchor" href="#使用-visual-studio-code-makefile-进行项目搭建" aria-hidden="true">#</a> 使用 Visual Studio Code + Makefile 进行项目搭建</h3><div class="hint-container info"><p class="hint-container-title">相关信息</p><p>之前的 helloworld 程序由于是单文件，过于简单，所以没有提到 Visual Studio Code 的配置以及使用 Makefile。</p><p>后面的项目中，我们都会使用 Visual Studio Code + Makefile 的模式来进行开发。</p></div><p>我们创建一个 <code>gb-dev</code> 目录，并在它下面创建一个 <code>first-sprite</code> 目录。</p><p>然后使用 Visual Studio Code 打开 <code>gb-dev</code> 目录。</p><p>首先配置 <code>includePath</code>，让我们可以拥有智能提示。在 <code>gb-dev</code> 目录下创建一个 <code>.vscode</code> 文件夹，在该文件夹下创建一个名为 <code>c_cpp_properties.json</code> 的配置文件：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;configurations&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;GBDK_VSC&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;includePath&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
                <span class="token string">&quot;\${GBDKDIR}/include/**&quot;</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;defines&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;macFrameworkPath&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token property">&quot;compilerPath&quot;</span><span class="token operator">:</span> <span class="token string">&quot;\${GBDKDIR}/bin/lcc&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;cStandard&quot;</span><span class="token operator">:</span> <span class="token string">&quot;gnu99&quot;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token number">4</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，我们以后的代码就拥有智能提示了。</p><p>然后我们将之前导出的 <code>Smile.h</code> 和 <code>Smile.c</code> 拷贝到 <code>first-sprite</code> 目录下。</p><p>接着我们就可以在 <code>first-sprite</code> 目录下，开始编写主程序 <code>FirstSprite.c</code> 了：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;gb/gb.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;Smile.h&quot;</span></span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token comment">// 设置精灵数据</span>
    <span class="token comment">// 从第 0 号位的 Tile 开始，设置 No.0 的瓦块的数据</span>
    <span class="token comment">// 数据来源于 Smile 数组</span>
    <span class="token function">set_sprite_data</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> Smile<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token comment">// 设置精灵使用哪个瓦块的数据</span>
    <span class="token comment">// 这里是 No.0 精灵使用 No.0 瓦块数据</span>
    <span class="token function">set_sprite_tile</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 一个宏，内部设置 LCDC 寄存器的第 1 位为 1，</span>
    <span class="token comment">// 目的是开启精灵层，代表显示所有精灵</span>
    SHOW_SPRITES<span class="token punctuation">;</span>

    <span class="token comment">// 将精灵 No.0 移动到 (84, 78) 的位置，即屏幕中央附近</span>
    <span class="token function">move_sprite</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>随后，我们编写一个叫做 <code>Makefile</code> 的文件。实际上，Makefile 是 make 的配置文件，make 可以方便我们设定编译参数以及具体每个模块的编译流程。这些模块的编译流程大多是重复的，所以使用 make 这套规则去编译，节约了我们的时间，也让编译流程更加清晰。</p><p>我们的 <code>Makefile</code> 如下：</p><div class="language-makefile line-numbers-mode" data-ext="makefile"><pre class="language-makefile"><code><span class="token comment"># 设置 LCC 编译器执行路径</span>
CC  <span class="token operator">=</span> <span class="token variable">$</span><span class="token punctuation">(</span>GBDKDIR<span class="token punctuation">)</span>/bin/lcc

<span class="token comment"># 设置 SameBoy 执行路径</span>
EMU <span class="token operator">=</span> /Applications/SameBoy.app/Contents/MacOS/SameBoy

<span class="token comment"># 默认行为，编译各个编译单元，最后链接得到 FirstSprite.gb</span>
<span class="token target symbol">all</span><span class="token punctuation">:</span>
	<span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> -Wa-l -Wl-m -Wl-j -o FirstSprite.gb Smile.c FirstSprite.c

<span class="token comment"># 编译得到 FirstSprite.gb 后，使用 SameBoy 启动</span>
<span class="token target symbol">run</span><span class="token punctuation">:</span> all
	<span class="token variable">$</span><span class="token punctuation">(</span>EMU<span class="token punctuation">)</span> FirstSprite.gb

<span class="token comment"># 清理，删除中间文件和目标文件</span>
<span class="token target symbol">clean</span><span class="token punctuation">:</span>
	rm -f *.o *.lst *.map *.gb *.ihx *.sym *.cdb *.adb *.asm *.noi
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，make 支持几种不同的命令参数：</p><ul><li>无，即默认行为，默认为 Makefile 中第一个出现的目标，在我们的设置中，为 all</li><li>all，编译链接最终得到 <code>FirstSprite.gb</code> ，即 ROM 文件</li><li>run，编译得到 ROM 后，使用 SameBoy 模拟器运行该 ROM 文件</li><li>clean，清理，删除中间文件和目标文件</li></ul><p>我们可以直接使用 <code>make run</code> 来编译、链接并运行。</p><p>最后的效果如下：</p><figure><img src="`+k+'" alt="成功在屏幕中显示第一个精灵" tabindex="0" loading="lazy"><figcaption>成功在屏幕中显示第一个精灵</figcaption></figure><p>最后还可以使用 <code>make clean</code> 来删除中间文件和目标文件，回到只有源码和 Makefile 等文件的状态。</p>',53),y={class:"hint-container tip"},G=n("p",{class:"hint-container-title"},"提示",-1),S=n("code",null,"gb-dev",-1),D={href:"https://github.com/zzxzzk115/blog/tree/master/src/.vuepress/public/src/gb-dev/",target:"_blank",rel:"noopener noreferrer"};function C(q,x){const a=t("ExternalLinkIcon");return o(),p("div",null,[g,n("p",null,[n("a",h,[s("精灵 (Sprite)"),e(a)]),s("，在计算机图形学中指 2D 的位图，并经常使用于 2D 游戏中。")]),f,_,c(" more "),B,n("div",y,[G,n("p",null,[S,s(" 源码"),n("a",D,[s("看这里"),e(a)])])])])}const M=i(b,[["render",C],["__file","003-gbdk-simple-sprites.html.vue"]]);export{M as default};
