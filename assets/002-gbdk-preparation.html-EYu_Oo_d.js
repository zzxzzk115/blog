import{_ as d,r,o as u,c as b,e as h,a as s,b as a,f as n,w as e,d as c}from"./app-dqFJ6E25.js";const v="/blog/images/game-dev/retro/gameboy/gbdk/helloworld_samboy.png",m={},k=s("p",null,"GBDK 是开源工具，我们可以在 GitHub 上直接下载最新的 Release 版本。",-1),g=s("p",null,"我最近习惯使用 MacOS，这里我首先介绍如何在 MacOS 上搭建 GBDK 环境，并成功编译 Hello world 程序。Linux 和 MacOS 是一样的步骤。Windows 也是类似的步骤，如果有问题，欢迎随时在评论区留言。",-1),_=s("h2",{id:"下载-gbdk",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#下载-gbdk","aria-hidden":"true"},"#"),a(" 下载 GBDK")],-1),f={href:"https://github.com/gbdk-2020/gbdk-2020/releases/download/4.1.1/gbdk-macos.tar.gz",target:"_blank",rel:"noopener noreferrer"},B={href:"https://github.com/gbdk-2020/gbdk-2020/releases",target:"_blank",rel:"noopener noreferrer"},D=s("h2",{id:"文件结构介绍",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#文件结构介绍","aria-hidden":"true"},"#"),a(" 文件结构介绍")],-1),G=s("p",null,[a("解压下载得到的压缩包后，我们得到一个名为 "),s("code",null,"gbdk"),a(" 的文件夹，其中的文件结构如下：")],-1),x=c(`<p>接下来我们需要把 <code>gbdk</code> 文件夹移动到一个合适的位置，并添加环境变量。</p><h2 id="移动-gbdk-文件夹-并添加相关的环境变量" tabindex="-1"><a class="header-anchor" href="#移动-gbdk-文件夹-并添加相关的环境变量" aria-hidden="true">#</a> 移动 gbdk 文件夹，并添加相关的环境变量</h2><p>可以把该文件夹拷贝到 <code>/opt/gbdk</code>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-r</span> gbdk /opt/gbdk
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后设置相关的环境变量。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>为了永久生效，可以编辑 /etc/profile 或者你所使用的 shell 配置文件：</p></div>`,6),w=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token builtin class-name"},"echo"),a(),s("span",{class:"token string"},'"export GBDKDIR=/opt/gbdk/"'),a(),s("span",{class:"token operator"},"|"),a(),s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token function"},"tee"),a(),s("span",{class:"token parameter variable"},"-a"),a(` /etc/profile
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),y=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token builtin class-name"},"echo"),a(),s("span",{class:"token string"},'"export GBDKDIR=/opt/gbdk/"'),a(),s("span",{class:"token operator"},"|"),a(),s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token function"},"tee"),a(),s("span",{class:"token parameter variable"},"-a"),a(` ~/.bashrc
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),M=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[s("span",{class:"token builtin class-name"},"echo"),a(),s("span",{class:"token string"},'"export GBDKDIR=/opt/gbdk/"'),a(),s("span",{class:"token operator"},"|"),a(),s("span",{class:"token function"},"sudo"),a(),s("span",{class:"token function"},"tee"),a(),s("span",{class:"token parameter variable"},"-a"),a(` ~/.zshrc
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),S=s("div",{class:"hint-container info"},[s("p",{class:"hint-container-title"},"相关信息"),s("p",null,"GBDKDIR 系统环境变量是必须设置的内容，除此之外，你可以选择将 bin 目录设置到 PATH 变量中，这样我们可以更方便的使用一些预编译的可执行程序。")],-1),I=s("h2",{id:"准备好为-gbdk-而修正的-gbtd-与-gbmb",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#准备好为-gbdk-而修正的-gbtd-与-gbmb","aria-hidden":"true"},"#"),a(" 准备好为 GBDK 而修正的 GBTD 与 GBMB")],-1),q=s("p",null,"GBTD (GameBoy Tile Designer) 和 GBMB (GameBoy Map Builder) 分别用于瓦块设计与地图编辑。前者可以绘制精灵和瓦块，后者使用前者已绘制好的瓦块进行地图的编辑。",-1),K={href:"https://github.com/gbdk-2020/GBTD_GBMB/releases/download/2.4.5/GBTD_GBMB_release.zip",target:"_blank",rel:"noopener noreferrer"},R={href:"https://github.com/gbdk-2020/GBTD_GBMB/releases",target:"_blank",rel:"noopener noreferrer"},T=c(`<p>下载好并解压后，我们会得到 <code>GBTD_GBMB_release</code> 文件夹，里面包括 <code>GBTD</code> 文件夹和 <code>GBMB</code> 文件夹。</p><p>我们在 <code>gbdk</code> 文件夹下新建 <code>tools</code> 目录，然后将解压后得到的 <code>GBTD</code> 目录和 <code>GBMB</code> 目录拷贝到 <code>tools</code> 目录。</p><p>MacOS 和 Linux 用户可以使用 shell 来快速操作：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$GBDKDIR</span>/tools
<span class="token builtin class-name">cd</span> GBTD_GBMB_release
<span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-r</span> GBTD <span class="token variable">$GBDKDIR</span>/tools/
<span class="token function">sudo</span> <span class="token function">cp</span> <span class="token parameter variable">-r</span> GBMB <span class="token variable">$GBDKDIR</span>/tools/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">重点注意</p><p>此时可能部分 ini 配置文件不具备相应的权限，我们直接设置这些文件的权限掩码为 777：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">chmod</span> <span class="token number">777</span> <span class="token variable">$GBDKDIR</span>/tools/**/*.ini
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></div>`,5),O={class:"hint-container tip"},L=s("p",{class:"hint-container-title"},"提示",-1),A=s("p",null,"MacOS 和 Linux 需要准备 Wine 环境：",-1),$=s("blockquote",null,[s("p",null,"Wine (Wine is not an emulator, 递归式命名)，可以在 MacOS 和 Linux 上，通过本地库，链接 DLL 的形式，运行 Windows 应用。")],-1),z=s("p",null,"如果没有安装 Homebrew 的话，需要先安装：",-1),W=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[a("/bin/bash "),s("span",{class:"token parameter variable"},"-c"),a(),s("span",{class:"token string"},[a('"'),s("span",{class:"token variable"},[s("span",{class:"token variable"},"$("),s("span",{class:"token function"},"curl"),a(),s("span",{class:"token parameter variable"},"-fsSL"),a(" https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh"),s("span",{class:"token variable"},")")]),a('"')]),a(`
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"})])],-1),H=s("p",null,"然后使用 brew 命令，安装 Wine-CrossOver：",-1),C=s("div",{class:"language-bash line-numbers-mode","data-ext":"sh"},[s("pre",{class:"language-bash"},[s("code",null,[a("brew "),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"--formula"),a(` gcenx/wine/winetricks
brew `),s("span",{class:"token function"},"install"),a(),s("span",{class:"token parameter variable"},"--cask"),a(` --no-quarantine gcenx/wine/wine-crossover
`)])]),s("div",{class:"line-numbers","aria-hidden":"true"},[s("div",{class:"line-number"}),s("div",{class:"line-number"})])],-1),E=s("p",null,"此时 Wine-CrossOver 准备就绪，后面会用到它。",-1),N=s("p",null,"待补充。欢迎发 PR。",-1),V=c(`<div class="hint-container tip"><p class="hint-container-title">MacOS 和 Linux 使用 Wine 运行 GBTD 和 GBMB 的后续流程</p><p>上面这些都配置好后，我们就可以这样运行 GBTD 和 GBMB：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>wine <span class="token variable">$GBDKDIR</span>/tools/GBTD/gbtd.exe
wine <span class="token variable">$GBDKDIR</span>/tools/GBMB/gbmb.exe
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>觉得麻烦，建议使用 alias 命令创建别名，建议写入到 /etc/profile，当然也可以跟上面配置环境变量一样，写入到 shell 的配置文件中：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 添加到 /etc/profile</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;alias gbtd=&#39;wine <span class="token variable">$GBDKDIR</span>/tools/GBTD/gbtd.exe&#39;&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/profile
<span class="token builtin class-name">echo</span> <span class="token string">&quot;alias gbmb=&#39;wine <span class="token variable">$GBDKDIR</span>/tools/GBMB/gbmb.exe&#39;&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/profile

<span class="token comment"># 添加到 ~/.zshrc</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;alias gbtd=&#39;wine <span class="token variable">$GBDKDIR</span>/tools/GBTD/gbtd.exe&#39;&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> ~/.zshrc
<span class="token builtin class-name">echo</span> <span class="token string">&quot;alias gbmb=&#39;wine <span class="token variable">$GBDKDIR</span>/tools/GBMB/gbmb.exe&#39;&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> ~/.zshrc

<span class="token comment"># 添加到 ~/.bashrc</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;alias gbtd=&#39;wine <span class="token variable">$GBDKDIR</span>/tools/GBTD/gbtd.exe&#39;&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> ~/.bashrc
<span class="token builtin class-name">echo</span> <span class="token string">&quot;alias gbmb=&#39;wine <span class="token variable">$GBDKDIR</span>/tools/GBMB/gbmb.exe&#39;&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> ~/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="准备好模拟器-sameboy" tabindex="-1"><a class="header-anchor" href="#准备好模拟器-sameboy" aria-hidden="true">#</a> 准备好模拟器 - SameBoy</h2>`,2),P={href:"https://github.com/LIJI32/SameBoy",target:"_blank",rel:"noopener noreferrer"},F=s("p",null,"打开它的下载页面，下载对应的版本即可：https://sameboy.github.io/downloads/",-1),J={href:"https://github.com/LIJI32/SameBoy/releases/download/v0.15.8/sameboy_cocoa_v0.15.8.zip",target:"_blank",rel:"noopener noreferrer"},j=c(`<p>解压后是一个 app，拖到 <code>应用程序</code> (英文系统中是 <code>Applications</code>) 中即可完成安装。</p><h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello, world!</h2><p>接下来编写我们第一个程序：在 GameBoy 的屏幕里打印一行 &quot;Hello,world!&quot;</p><h3 id="编写源码" tabindex="-1"><a class="header-anchor" href="#编写源码" aria-hidden="true">#</a> 编写源码</h3><p><code>helloworld.c</code>:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;gb/gb.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;HELLO, WORLD!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命令行编译" tabindex="-1"><a class="header-anchor" href="#命令行编译" aria-hidden="true">#</a> 命令行编译</h3><p>在 <code>helloworld.c</code> 的同级目录打开命令行，并执行：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$GBDKDIR</span>/bin/lcc -Wa-l -Wl-m -Wl-j <span class="token parameter variable">-o</span> helloworld.gb helloworld.c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行结束后，会发现目录下编译得到了 <code>helloworld.gb</code>，也就是我们熟悉的 ROM 文件啦，放到模拟器可以直接运行。</p><h3 id="用-sameboy-打开-看看效果吧" tabindex="-1"><a class="header-anchor" href="#用-sameboy-打开-看看效果吧" aria-hidden="true">#</a> 用 SameBoy 打开，看看效果吧</h3><figure><img src="`+v+`" alt="Hello, world!" tabindex="0" loading="lazy"><figcaption>Hello, world!</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>可以将 SameBoy 也使用 alias 取个别名：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 添加到 /etc/profile</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;alias sameboy=/Applications/SameBoy.app/Contents/MacOS/SameBoy&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> /etc/profile

<span class="token comment"># 添加到 ~/.zshrc</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;alias sameboy=/Applications/SameBoy.app/Contents/MacOS/SameBoy&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> ~/.zshrc

<span class="token comment"># 添加到 ~/.bashrc</span>
<span class="token builtin class-name">echo</span> <span class="token string">&quot;alias sameboy=/Applications/SameBoy.app/Contents/MacOS/SameBoy&quot;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> <span class="token parameter variable">-a</span> ~/.bashrc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们就可以使用</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>sameboy helloworld.gb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这种形式直接运行游戏了。</p></div><p>恭喜，到这里，你已经入门了！🎉🎉🎉</p>`,14);function Q(U,X){const i=r("ExternalLinkIcon"),l=r("FontIcon"),p=r("Tabs");return u(),b("div",null,[k,g,h(" more "),_,s("p",null,[a("撰写本文时，GBDK 的稳定版本为 v4.1.1，"),s("a",f,[a("点击直接下载"),n(i)]),a("。")]),s("p",null,[a("你也可以访问"),s("a",B,[a("这里"),n(i)]),a("下载最新的版本。")]),D,G,s("ul",null,[s("li",null,[n(l,{icon:"folder"}),a(" bin/ (包含所有预编译好的可执行程序)")]),s("li",null,[n(l,{icon:"folder"}),a(" include/ (包含相关头文件)")]),s("li",null,[n(l,{icon:"folder"}),a(" lib/ (包含相关库文件)")]),s("li",null,[n(l,{icon:"folder"}),a(" examples/ (包含提供的样例)")]),s("li",null,[n(l,{icon:"folder"}),a(" licenses/ (包含所有许可证)")]),s("li",null,[n(l,{icon:"pdf"}),a(" gbdk_manual.pdf (gbdk手册)")]),s("li",null,[n(l,{icon:"pdf"}),a(" sdccman.pdf (sdcc手册)")]),s("li",null,[n(l,{icon:"changelog"}),a(" ChangeLog (更新日志)")]),s("li",null,[n(l,{icon:"readme"}),a(" README (自述文件)")])]),x,n(p,{id:"78",data:[{id:"/etc/profile"},{id:"~/.bashrc"},{id:"~/.zshrc"}]},{title0:e(({value:o,isActive:t})=>[a("/etc/profile")]),title1:e(({value:o,isActive:t})=>[a("~/.bashrc")]),title2:e(({value:o,isActive:t})=>[a("~/.zshrc")]),tab0:e(({value:o,isActive:t})=>[w]),tab1:e(({value:o,isActive:t})=>[y]),tab2:e(({value:o,isActive:t})=>[M]),_:1},8,["data"]),S,I,q,s("p",null,[a("我们后续会用到这两个工具，这里我们先下载准备好。"),s("a",K,[a("点击下载"),n(i)])]),s("p",null,[a("最新版本在"),s("a",R,[a("这个页面"),n(i)]),a("。")]),T,s("div",O,[L,A,$,n(p,{id:"131",data:[{id:"MacOS"},{id:"Linux"}]},{title0:e(({value:o,isActive:t})=>[a("MacOS")]),title1:e(({value:o,isActive:t})=>[a("Linux")]),tab0:e(({value:o,isActive:t})=>[z,W,H,C,E]),tab1:e(({value:o,isActive:t})=>[N]),_:1})]),V,s("p",null,[a("由于我使用 MacOS，我考虑使用开源、跨平台的模拟器："),s("a",P,[a("SameBoy"),n(i)]),a("，它功能丰富，支持调试，方便我们开发。")]),F,s("p",null,[a("这里我下载 "),s("a",J,[a("MacOS 最新 v0.15.8 版"),n(i)]),a("。")]),j])}const Z=d(m,[["render",Q],["__file","002-gbdk-preparation.html.vue"]]);export{Z as default};
